/* tslint:disable */
// generated by typescript-json-validator
import Ajv = require('ajv');
import {GameLog, GameLogEntry, Action, JoinGame, PlayerGame} from './types';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {GameLog, GameLogEntry, Action, JoinGame, PlayerGame};
export const Schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Action": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "join_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId"
      ],
      "type": "object"
    },
    "GameLog": {
      "defaultProperties": [
      ],
      "properties": {
        "entries": {
          "items": {
            "defaultProperties": [
            ],
            "properties": {
              "action": {
                "defaultProperties": [
                ],
                "properties": {
                  "gameId": {
                    "type": "string"
                  },
                  "kind": {
                    "enum": [
                      "join_game"
                    ],
                    "type": "string"
                  },
                  "playerId": {
                    "type": "string"
                  }
                },
                "required": [
                  "gameId",
                  "kind",
                  "playerId"
                ],
                "type": "object"
              },
              "timestamp": {
              }
            },
            "required": [
              "action",
              "timestamp"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "entries"
      ],
      "type": "object"
    },
    "GameLogEntry": {
      "defaultProperties": [
      ],
      "properties": {
        "action": {
          "defaultProperties": [
          ],
          "properties": {
            "gameId": {
              "type": "string"
            },
            "kind": {
              "enum": [
                "join_game"
              ],
              "type": "string"
            },
            "playerId": {
              "type": "string"
            }
          },
          "required": [
            "gameId",
            "kind",
            "playerId"
          ],
          "type": "object"
        },
        "timestamp": {
        }
      },
      "required": [
        "action",
        "timestamp"
      ],
      "type": "object"
    },
    "JoinGame": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "join_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId"
      ],
      "type": "object"
    },
    "PlayerGame": {
      "defaultProperties": [
      ],
      "properties": {
        "playerIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "playerIds"
      ],
      "type": "object"
    }
  }
};
ajv.addSchema(Schema, 'Schema')
export function validate(typeName: 'GameLog'): (value: unknown) => GameLog;
export function validate(typeName: 'GameLogEntry'): (value: unknown) => GameLogEntry;
export function validate(typeName: 'Action'): (value: unknown) => Action;
export function validate(typeName: 'JoinGame'): (value: unknown) => JoinGame;
export function validate(typeName: 'PlayerGame'): (value: unknown) => PlayerGame;
export function validate(typeName: string): (value: unknown) => any {
  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
  return (value: unknown): any => {
    if (!validator) {
      throw new Error(`No validator defined for Schema#/definitions/${typeName}`)
    }
  
    const valid = validator(value);

    if (!valid) {
      throw new Error(
        'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: typeName}),
      );
    }

    return value as any;
  };
}