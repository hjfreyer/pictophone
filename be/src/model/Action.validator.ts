/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import Action from './Action';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {Action};
export const ActionSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "anyOf": [
    {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "join_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId"
      ],
      "type": "object"
    },
    {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "start_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId"
      ],
      "type": "object"
    },
    {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "make_move"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        },
        "submission": {
          "anyOf": [
            {
              "defaultProperties": [
              ],
              "properties": {
                "kind": {
                  "enum": [
                    "word"
                  ],
                  "type": "string"
                },
                "word": {
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "word"
              ],
              "type": "object"
            },
            {
              "defaultProperties": [
              ],
              "properties": {
                "drawingId": {
                  "type": "string"
                },
                "kind": {
                  "enum": [
                    "drawing"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "drawingId",
                "kind"
              ],
              "type": "object"
            }
          ]
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId",
        "submission"
      ],
      "type": "object"
    }
  ]
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
const rawValidateAction = ajv.compile(ActionSchema) as ValidateFunction<Action>;
export default function validate(value: unknown): Action {
  if (rawValidateAction(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(rawValidateAction.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Action'}) +
      '\n\n' +
      inspect(value),
    );
  }
}