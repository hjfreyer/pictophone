/* tslint:disable */
// generated by typescript-json-validator
import Ajv = require('ajv');
import {AnyAction, AnyState, AnyExport} from './index';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {AnyAction, AnyState, AnyExport};
export const Schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AnyAction": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "join_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        },
        "version": {
          "enum": [
            "v1.0"
          ],
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId",
        "version"
      ],
      "type": "object"
    },
    "AnyExport": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "type": "string"
        },
        "kind": {
          "enum": [
            "player_game"
          ],
          "type": "string"
        },
        "playerId": {
          "type": "string"
        },
        "players": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "enum": [
            "v1.0"
          ],
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId",
        "players",
        "version"
      ],
      "type": "object"
    },
    "AnyState": {
      "defaultProperties": [
      ],
      "properties": {
        "kind": {
          "enum": [
            "root"
          ],
          "type": "string"
        },
        "players": {
          "$ref": "#/definitions/Record<string,string[]>"
        },
        "version": {
          "enum": [
            "v1.0"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind",
        "players",
        "version"
      ],
      "type": "object"
    },
    "Record<string,string[]>": {
      "defaultProperties": [
      ],
      "description": "Construct a type with a set of properties K of type T",
      "type": "object"
    }
  }
};
ajv.addSchema(Schema, 'Schema')
export function validate(typeName: 'AnyAction'): (value: unknown) => AnyAction;
export function validate(typeName: 'AnyState'): (value: unknown) => AnyState;
export function validate(typeName: 'AnyExport'): (value: unknown) => AnyExport;
export function validate(typeName: string): (value: unknown) => any {
  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
  return (value: unknown): any => {
    if (!validator) {
      throw new Error(`No validator defined for Schema#/definitions/${typeName}`)
    }
  
    const valid = validator(value);

    if (!valid) {
      throw new Error(
        'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: typeName}),
      );
    }

    return value as any;
  };
}