/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import Action from './Action';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const ActionSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "JoinGameAction1_1": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "maxLength": 1024,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9_-]*$",
          "type": "string"
        },
        "kind": {
          "enum": [
            "join_game"
          ],
          "type": "string"
        },
        "playerDisplayName": {
          "maxLength": 1024,
          "minLength": 1,
          "type": "string"
        },
        "playerId": {
          "maxLength": 1024,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9_-]*$",
          "type": "string"
        },
        "version": {
          "enum": [
            "1.1"
          ],
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerDisplayName",
        "playerId",
        "version"
      ],
      "type": "object"
    },
    "StartGameAction1_1": {
      "defaultProperties": [
      ],
      "properties": {
        "gameId": {
          "maxLength": 1024,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9_-]*$",
          "type": "string"
        },
        "kind": {
          "enum": [
            "start_game"
          ],
          "type": "string"
        },
        "playerId": {
          "maxLength": 1024,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9_-]*$",
          "type": "string"
        },
        "version": {
          "enum": [
            "1.1"
          ],
          "type": "string"
        }
      },
      "required": [
        "gameId",
        "kind",
        "playerId",
        "version"
      ],
      "type": "object"
    }
  },
  "else": {
    "else": {
      "else": {
        "properties": {
          "kind": {
            "enum": [
              "join_game",
              "start_game",
              "make_move"
            ],
            "type": "string"
          }
        },
        "required": [
          "kind"
        ]
      },
      "if": {
        "properties": {
          "kind": {
            "enum": [
              "make_move"
            ],
            "type": "string"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "defaultProperties": [
        ],
        "properties": {
          "gameId": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]*$",
            "type": "string"
          },
          "kind": {
            "enum": [
              "make_move"
            ],
            "type": "string"
          },
          "playerId": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]*$",
            "type": "string"
          },
          "submission": {
            "anyOf": [
              {
                "defaultProperties": [
                ],
                "properties": {
                  "kind": {
                    "enum": [
                      "word"
                    ],
                    "type": "string"
                  },
                  "word": {
                    "maxLength": 1024,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "word"
                ],
                "type": "object"
              },
              {
                "defaultProperties": [
                ],
                "properties": {
                  "drawingId": {
                    "type": "string"
                  },
                  "kind": {
                    "enum": [
                      "drawing"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "drawingId",
                  "kind"
                ],
                "type": "object"
              }
            ]
          },
          "version": {
            "enum": [
              "1.1"
            ],
            "type": "string"
          }
        },
        "required": [
          "gameId",
          "kind",
          "playerId",
          "submission",
          "version"
        ],
        "type": "object"
      }
    },
    "if": {
      "properties": {
        "kind": {
          "enum": [
            "start_game"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ]
    },
    "then": {
      "$ref": "#/definitions/StartGameAction1_1"
    }
  },
  "if": {
    "properties": {
      "kind": {
        "enum": [
          "join_game"
        ],
        "type": "string"
      }
    },
    "required": [
      "kind"
    ]
  },
  "then": {
    "$ref": "#/definitions/JoinGameAction1_1"
  }
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isAction = ajv.compile(ActionSchema) as ValidateFunction<Action>;
export default function validate(value: unknown): Action {
  if (isAction(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isAction.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Action'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
