/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var pictophone_v1_0_pb = require('../pictophone/v1_0_pb.js');
goog.exportSymbol('proto.pictophone.v1_1.Action', null, global);
goog.exportSymbol('proto.pictophone.v1_1.Game', null, global);
goog.exportSymbol('proto.pictophone.v1_1.GetGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v1_1.GetGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v1_1.QueryRequest', null, global);
goog.exportSymbol('proto.pictophone.v1_1.QueryResponse', null, global);
goog.exportSymbol('proto.pictophone.v1_1.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_1.Action.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_1.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.Action.displayName = 'proto.pictophone.v1_1.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_1.Action.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v1_1.Action.MethodCase = {
  METHOD_NOT_SET: 0,
  CREATE_GAME_REQUEST: 1,
  DELETE_GAME_REQUEST: 2
};

/**
 * @return {proto.pictophone.v1_1.Action.MethodCase}
 */
proto.pictophone.v1_1.Action.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_1.Action.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_1.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    createGameRequest: (f = msg.getCreateGameRequest()) && pictophone_v1_0_pb.CreateGameRequest.toObject(includeInstance, f),
    deleteGameRequest: (f = msg.getDeleteGameRequest()) && pictophone_v1_0_pb.DeleteGameRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.Action}
 */
proto.pictophone.v1_1.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.Action;
  return proto.pictophone.v1_1.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.Action}
 */
proto.pictophone.v1_1.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pictophone_v1_0_pb.CreateGameRequest;
      reader.readMessage(value,pictophone_v1_0_pb.CreateGameRequest.deserializeBinaryFromReader);
      msg.setCreateGameRequest(value);
      break;
    case 2:
      var value = new pictophone_v1_0_pb.DeleteGameRequest;
      reader.readMessage(value,pictophone_v1_0_pb.DeleteGameRequest.deserializeBinaryFromReader);
      msg.setDeleteGameRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateGameRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pictophone_v1_0_pb.CreateGameRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeleteGameRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pictophone_v1_0_pb.DeleteGameRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional pictophone.v1_0.CreateGameRequest create_game_request = 1;
 * @return {?proto.pictophone.v1_0.CreateGameRequest}
 */
proto.pictophone.v1_1.Action.prototype.getCreateGameRequest = function() {
  return /** @type{?proto.pictophone.v1_0.CreateGameRequest} */ (
    jspb.Message.getWrapperField(this, pictophone_v1_0_pb.CreateGameRequest, 1));
};


/** @param {?proto.pictophone.v1_0.CreateGameRequest|undefined} value */
proto.pictophone.v1_1.Action.prototype.setCreateGameRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_1.Action.oneofGroups_[0], value);
};


proto.pictophone.v1_1.Action.prototype.clearCreateGameRequest = function() {
  this.setCreateGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.Action.prototype.hasCreateGameRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional pictophone.v1_0.DeleteGameRequest delete_game_request = 2;
 * @return {?proto.pictophone.v1_0.DeleteGameRequest}
 */
proto.pictophone.v1_1.Action.prototype.getDeleteGameRequest = function() {
  return /** @type{?proto.pictophone.v1_0.DeleteGameRequest} */ (
    jspb.Message.getWrapperField(this, pictophone_v1_0_pb.DeleteGameRequest, 2));
};


/** @param {?proto.pictophone.v1_0.DeleteGameRequest|undefined} value */
proto.pictophone.v1_1.Action.prototype.setDeleteGameRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v1_1.Action.oneofGroups_[0], value);
};


proto.pictophone.v1_1.Action.prototype.clearDeleteGameRequest = function() {
  this.setDeleteGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.Action.prototype.hasDeleteGameRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_1.Response.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_1.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.Response.displayName = 'proto.pictophone.v1_1.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_1.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v1_1.Response.MethodCase = {
  METHOD_NOT_SET: 0,
  CREATE_GAME_RESPONSE: 1,
  DELETE_GAME_RESPONSE: 2
};

/**
 * @return {proto.pictophone.v1_1.Response.MethodCase}
 */
proto.pictophone.v1_1.Response.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_1.Response.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_1.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    createGameResponse: (f = msg.getCreateGameResponse()) && pictophone_v1_0_pb.CreateGameResponse.toObject(includeInstance, f),
    deleteGameResponse: (f = msg.getDeleteGameResponse()) && pictophone_v1_0_pb.DeleteGameResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.Response}
 */
proto.pictophone.v1_1.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.Response;
  return proto.pictophone.v1_1.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.Response}
 */
proto.pictophone.v1_1.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pictophone_v1_0_pb.CreateGameResponse;
      reader.readMessage(value,pictophone_v1_0_pb.CreateGameResponse.deserializeBinaryFromReader);
      msg.setCreateGameResponse(value);
      break;
    case 2:
      var value = new pictophone_v1_0_pb.DeleteGameResponse;
      reader.readMessage(value,pictophone_v1_0_pb.DeleteGameResponse.deserializeBinaryFromReader);
      msg.setDeleteGameResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateGameResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pictophone_v1_0_pb.CreateGameResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeleteGameResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pictophone_v1_0_pb.DeleteGameResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional pictophone.v1_0.CreateGameResponse create_game_response = 1;
 * @return {?proto.pictophone.v1_0.CreateGameResponse}
 */
proto.pictophone.v1_1.Response.prototype.getCreateGameResponse = function() {
  return /** @type{?proto.pictophone.v1_0.CreateGameResponse} */ (
    jspb.Message.getWrapperField(this, pictophone_v1_0_pb.CreateGameResponse, 1));
};


/** @param {?proto.pictophone.v1_0.CreateGameResponse|undefined} value */
proto.pictophone.v1_1.Response.prototype.setCreateGameResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_1.Response.oneofGroups_[0], value);
};


proto.pictophone.v1_1.Response.prototype.clearCreateGameResponse = function() {
  this.setCreateGameResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.Response.prototype.hasCreateGameResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional pictophone.v1_0.DeleteGameResponse delete_game_response = 2;
 * @return {?proto.pictophone.v1_0.DeleteGameResponse}
 */
proto.pictophone.v1_1.Response.prototype.getDeleteGameResponse = function() {
  return /** @type{?proto.pictophone.v1_0.DeleteGameResponse} */ (
    jspb.Message.getWrapperField(this, pictophone_v1_0_pb.DeleteGameResponse, 2));
};


/** @param {?proto.pictophone.v1_0.DeleteGameResponse|undefined} value */
proto.pictophone.v1_1.Response.prototype.setDeleteGameResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v1_1.Response.oneofGroups_[0], value);
};


proto.pictophone.v1_1.Response.prototype.clearDeleteGameResponse = function() {
  this.setDeleteGameResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.Response.prototype.hasDeleteGameResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_1.QueryRequest.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_1.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.QueryRequest.displayName = 'proto.pictophone.v1_1.QueryRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_1.QueryRequest.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.pictophone.v1_1.QueryRequest.MethodCase = {
  METHOD_NOT_SET: 0,
  GET_GAME_REQUEST: 1
};

/**
 * @return {proto.pictophone.v1_1.QueryRequest.MethodCase}
 */
proto.pictophone.v1_1.QueryRequest.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_1.QueryRequest.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_1.QueryRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    getGameRequest: (f = msg.getGetGameRequest()) && proto.pictophone.v1_1.GetGameRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.QueryRequest}
 */
proto.pictophone.v1_1.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.QueryRequest;
  return proto.pictophone.v1_1.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.QueryRequest}
 */
proto.pictophone.v1_1.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_1.GetGameRequest;
      reader.readMessage(value,proto.pictophone.v1_1.GetGameRequest.deserializeBinaryFromReader);
      msg.setGetGameRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.QueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetGameRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_1.GetGameRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetGameRequest get_game_request = 1;
 * @return {?proto.pictophone.v1_1.GetGameRequest}
 */
proto.pictophone.v1_1.QueryRequest.prototype.getGetGameRequest = function() {
  return /** @type{?proto.pictophone.v1_1.GetGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_1.GetGameRequest, 1));
};


/** @param {?proto.pictophone.v1_1.GetGameRequest|undefined} value */
proto.pictophone.v1_1.QueryRequest.prototype.setGetGameRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_1.QueryRequest.oneofGroups_[0], value);
};


proto.pictophone.v1_1.QueryRequest.prototype.clearGetGameRequest = function() {
  this.setGetGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.QueryRequest.prototype.hasGetGameRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.QueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_1.QueryResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_1.QueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.QueryResponse.displayName = 'proto.pictophone.v1_1.QueryResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_1.QueryResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.pictophone.v1_1.QueryResponse.MethodCase = {
  METHOD_NOT_SET: 0,
  GET_GAME_RESPONSE: 1
};

/**
 * @return {proto.pictophone.v1_1.QueryResponse.MethodCase}
 */
proto.pictophone.v1_1.QueryResponse.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_1.QueryResponse.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_1.QueryResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.QueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.QueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.QueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.QueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    getGameResponse: (f = msg.getGetGameResponse()) && proto.pictophone.v1_1.GetGameResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.QueryResponse}
 */
proto.pictophone.v1_1.QueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.QueryResponse;
  return proto.pictophone.v1_1.QueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.QueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.QueryResponse}
 */
proto.pictophone.v1_1.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_1.GetGameResponse;
      reader.readMessage(value,proto.pictophone.v1_1.GetGameResponse.deserializeBinaryFromReader);
      msg.setGetGameResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.QueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.QueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.QueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.QueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetGameResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_1.GetGameResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetGameResponse get_game_response = 1;
 * @return {?proto.pictophone.v1_1.GetGameResponse}
 */
proto.pictophone.v1_1.QueryResponse.prototype.getGetGameResponse = function() {
  return /** @type{?proto.pictophone.v1_1.GetGameResponse} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_1.GetGameResponse, 1));
};


/** @param {?proto.pictophone.v1_1.GetGameResponse|undefined} value */
proto.pictophone.v1_1.QueryResponse.prototype.setGetGameResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_1.QueryResponse.oneofGroups_[0], value);
};


proto.pictophone.v1_1.QueryResponse.prototype.clearGetGameResponse = function() {
  this.setGetGameResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.QueryResponse.prototype.hasGetGameResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.GetGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_1.GetGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.GetGameRequest.displayName = 'proto.pictophone.v1_1.GetGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.GetGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.GetGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.GetGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.GetGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.GetGameRequest}
 */
proto.pictophone.v1_1.GetGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.GetGameRequest;
  return proto.pictophone.v1_1.GetGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.GetGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.GetGameRequest}
 */
proto.pictophone.v1_1.GetGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.GetGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.GetGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.GetGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.GetGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.pictophone.v1_1.GetGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v1_1.GetGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.GetGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_1.GetGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.GetGameResponse.displayName = 'proto.pictophone.v1_1.GetGameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.GetGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.GetGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.GetGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.GetGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.pictophone.v1_1.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.GetGameResponse}
 */
proto.pictophone.v1_1.GetGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.GetGameResponse;
  return proto.pictophone.v1_1.GetGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.GetGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.GetGameResponse}
 */
proto.pictophone.v1_1.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_1.Game;
      reader.readMessage(value,proto.pictophone.v1_1.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.GetGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.GetGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.GetGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.GetGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_1.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.pictophone.v1_1.Game}
 */
proto.pictophone.v1_1.GetGameResponse.prototype.getGame = function() {
  return /** @type{?proto.pictophone.v1_1.Game} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_1.Game, 1));
};


/** @param {?proto.pictophone.v1_1.Game|undefined} value */
proto.pictophone.v1_1.GetGameResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pictophone.v1_1.GetGameResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_1.GetGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_1.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_1.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_1.Game.displayName = 'proto.pictophone.v1_1.Game';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_1.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_1.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_1.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_1.Game}
 */
proto.pictophone.v1_1.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_1.Game;
  return proto.pictophone.v1_1.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_1.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_1.Game}
 */
proto.pictophone.v1_1.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_1.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_1.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_1.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_1.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string short_code = 1;
 * @return {string}
 */
proto.pictophone.v1_1.Game.prototype.getShortCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_1.Game.prototype.setShortCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.pictophone.v1_1);
