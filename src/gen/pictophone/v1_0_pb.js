/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pictophone.v1_0.Action', null, global);
goog.exportSymbol('proto.pictophone.v1_0.CreateGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v1_0.CreateGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v1_0.DeleteGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v1_0.DeleteGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v1_0.GameAlreadyExistsError', null, global);
goog.exportSymbol('proto.pictophone.v1_0.GameNotFoundError', null, global);
goog.exportSymbol('proto.pictophone.v1_0.QueryRequest', null, global);
goog.exportSymbol('proto.pictophone.v1_0.QueryResponse', null, global);
goog.exportSymbol('proto.pictophone.v1_0.Response', null, global);
goog.exportSymbol('proto.pictophone.v1_0.ShortCodeInUseError', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_0.Action.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_0.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.Action.displayName = 'proto.pictophone.v1_0.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_0.Action.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v1_0.Action.MethodCase = {
  METHOD_NOT_SET: 0,
  CREATE_GAME_REQUEST: 1,
  DELETE_GAME_REQUEST: 2
};

/**
 * @return {proto.pictophone.v1_0.Action.MethodCase}
 */
proto.pictophone.v1_0.Action.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_0.Action.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_0.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    createGameRequest: (f = msg.getCreateGameRequest()) && proto.pictophone.v1_0.CreateGameRequest.toObject(includeInstance, f),
    deleteGameRequest: (f = msg.getDeleteGameRequest()) && proto.pictophone.v1_0.DeleteGameRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.Action}
 */
proto.pictophone.v1_0.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.Action;
  return proto.pictophone.v1_0.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.Action}
 */
proto.pictophone.v1_0.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_0.CreateGameRequest;
      reader.readMessage(value,proto.pictophone.v1_0.CreateGameRequest.deserializeBinaryFromReader);
      msg.setCreateGameRequest(value);
      break;
    case 2:
      var value = new proto.pictophone.v1_0.DeleteGameRequest;
      reader.readMessage(value,proto.pictophone.v1_0.DeleteGameRequest.deserializeBinaryFromReader);
      msg.setDeleteGameRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateGameRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_0.CreateGameRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeleteGameRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v1_0.DeleteGameRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional CreateGameRequest create_game_request = 1;
 * @return {?proto.pictophone.v1_0.CreateGameRequest}
 */
proto.pictophone.v1_0.Action.prototype.getCreateGameRequest = function() {
  return /** @type{?proto.pictophone.v1_0.CreateGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.CreateGameRequest, 1));
};


/** @param {?proto.pictophone.v1_0.CreateGameRequest|undefined} value */
proto.pictophone.v1_0.Action.prototype.setCreateGameRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_0.Action.oneofGroups_[0], value);
};


proto.pictophone.v1_0.Action.prototype.clearCreateGameRequest = function() {
  this.setCreateGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.Action.prototype.hasCreateGameRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteGameRequest delete_game_request = 2;
 * @return {?proto.pictophone.v1_0.DeleteGameRequest}
 */
proto.pictophone.v1_0.Action.prototype.getDeleteGameRequest = function() {
  return /** @type{?proto.pictophone.v1_0.DeleteGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.DeleteGameRequest, 2));
};


/** @param {?proto.pictophone.v1_0.DeleteGameRequest|undefined} value */
proto.pictophone.v1_0.Action.prototype.setDeleteGameRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v1_0.Action.oneofGroups_[0], value);
};


proto.pictophone.v1_0.Action.prototype.clearDeleteGameRequest = function() {
  this.setDeleteGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.Action.prototype.hasDeleteGameRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_0.Response.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_0.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.Response.displayName = 'proto.pictophone.v1_0.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_0.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v1_0.Response.MethodCase = {
  METHOD_NOT_SET: 0,
  CREATE_GAME_RESPONSE: 1,
  DELETE_GAME_RESPONSE: 2
};

/**
 * @return {proto.pictophone.v1_0.Response.MethodCase}
 */
proto.pictophone.v1_0.Response.prototype.getMethodCase = function() {
  return /** @type {proto.pictophone.v1_0.Response.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_0.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    createGameResponse: (f = msg.getCreateGameResponse()) && proto.pictophone.v1_0.CreateGameResponse.toObject(includeInstance, f),
    deleteGameResponse: (f = msg.getDeleteGameResponse()) && proto.pictophone.v1_0.DeleteGameResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.Response}
 */
proto.pictophone.v1_0.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.Response;
  return proto.pictophone.v1_0.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.Response}
 */
proto.pictophone.v1_0.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_0.CreateGameResponse;
      reader.readMessage(value,proto.pictophone.v1_0.CreateGameResponse.deserializeBinaryFromReader);
      msg.setCreateGameResponse(value);
      break;
    case 2:
      var value = new proto.pictophone.v1_0.DeleteGameResponse;
      reader.readMessage(value,proto.pictophone.v1_0.DeleteGameResponse.deserializeBinaryFromReader);
      msg.setDeleteGameResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateGameResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_0.CreateGameResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeleteGameResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v1_0.DeleteGameResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CreateGameResponse create_game_response = 1;
 * @return {?proto.pictophone.v1_0.CreateGameResponse}
 */
proto.pictophone.v1_0.Response.prototype.getCreateGameResponse = function() {
  return /** @type{?proto.pictophone.v1_0.CreateGameResponse} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.CreateGameResponse, 1));
};


/** @param {?proto.pictophone.v1_0.CreateGameResponse|undefined} value */
proto.pictophone.v1_0.Response.prototype.setCreateGameResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_0.Response.oneofGroups_[0], value);
};


proto.pictophone.v1_0.Response.prototype.clearCreateGameResponse = function() {
  this.setCreateGameResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.Response.prototype.hasCreateGameResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteGameResponse delete_game_response = 2;
 * @return {?proto.pictophone.v1_0.DeleteGameResponse}
 */
proto.pictophone.v1_0.Response.prototype.getDeleteGameResponse = function() {
  return /** @type{?proto.pictophone.v1_0.DeleteGameResponse} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.DeleteGameResponse, 2));
};


/** @param {?proto.pictophone.v1_0.DeleteGameResponse|undefined} value */
proto.pictophone.v1_0.Response.prototype.setDeleteGameResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v1_0.Response.oneofGroups_[0], value);
};


proto.pictophone.v1_0.Response.prototype.clearDeleteGameResponse = function() {
  this.setDeleteGameResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.Response.prototype.hasDeleteGameResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.QueryRequest.displayName = 'proto.pictophone.v1_0.QueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.QueryRequest}
 */
proto.pictophone.v1_0.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.QueryRequest;
  return proto.pictophone.v1_0.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.QueryRequest}
 */
proto.pictophone.v1_0.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.QueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.QueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.QueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.QueryResponse.displayName = 'proto.pictophone.v1_0.QueryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.QueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.QueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.QueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.QueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.QueryResponse}
 */
proto.pictophone.v1_0.QueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.QueryResponse;
  return proto.pictophone.v1_0.QueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.QueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.QueryResponse}
 */
proto.pictophone.v1_0.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.QueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.QueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.QueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.QueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.CreateGameRequest.displayName = 'proto.pictophone.v1_0.CreateGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.CreateGameRequest}
 */
proto.pictophone.v1_0.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.CreateGameRequest;
  return proto.pictophone.v1_0.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.CreateGameRequest}
 */
proto.pictophone.v1_0.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v1_0.CreateGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.CreateGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string short_code = 2;
 * @return {string}
 */
proto.pictophone.v1_0.CreateGameRequest.prototype.getShortCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.CreateGameRequest.prototype.setShortCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.CreateGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_0.CreateGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_0.CreateGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.CreateGameResponse.displayName = 'proto.pictophone.v1_0.CreateGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_0.CreateGameResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v1_0.CreateGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  GAME_ALREADY_EXISTS_ERROR: 1,
  SHORT_CODE_IN_USE_ERROR: 2
};

/**
 * @return {proto.pictophone.v1_0.CreateGameResponse.ErrorCase}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v1_0.CreateGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_0.CreateGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.CreateGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.CreateGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.CreateGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameAlreadyExistsError: (f = msg.getGameAlreadyExistsError()) && proto.pictophone.v1_0.GameAlreadyExistsError.toObject(includeInstance, f),
    shortCodeInUseError: (f = msg.getShortCodeInUseError()) && proto.pictophone.v1_0.ShortCodeInUseError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.CreateGameResponse}
 */
proto.pictophone.v1_0.CreateGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.CreateGameResponse;
  return proto.pictophone.v1_0.CreateGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.CreateGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.CreateGameResponse}
 */
proto.pictophone.v1_0.CreateGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_0.GameAlreadyExistsError;
      reader.readMessage(value,proto.pictophone.v1_0.GameAlreadyExistsError.deserializeBinaryFromReader);
      msg.setGameAlreadyExistsError(value);
      break;
    case 2:
      var value = new proto.pictophone.v1_0.ShortCodeInUseError;
      reader.readMessage(value,proto.pictophone.v1_0.ShortCodeInUseError.deserializeBinaryFromReader);
      msg.setShortCodeInUseError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.CreateGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.CreateGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.CreateGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameAlreadyExistsError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_0.GameAlreadyExistsError.serializeBinaryToWriter
    );
  }
  f = message.getShortCodeInUseError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v1_0.ShortCodeInUseError.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameAlreadyExistsError game_already_exists_error = 1;
 * @return {?proto.pictophone.v1_0.GameAlreadyExistsError}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.getGameAlreadyExistsError = function() {
  return /** @type{?proto.pictophone.v1_0.GameAlreadyExistsError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.GameAlreadyExistsError, 1));
};


/** @param {?proto.pictophone.v1_0.GameAlreadyExistsError|undefined} value */
proto.pictophone.v1_0.CreateGameResponse.prototype.setGameAlreadyExistsError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_0.CreateGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v1_0.CreateGameResponse.prototype.clearGameAlreadyExistsError = function() {
  this.setGameAlreadyExistsError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.hasGameAlreadyExistsError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShortCodeInUseError short_code_in_use_error = 2;
 * @return {?proto.pictophone.v1_0.ShortCodeInUseError}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.getShortCodeInUseError = function() {
  return /** @type{?proto.pictophone.v1_0.ShortCodeInUseError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.ShortCodeInUseError, 2));
};


/** @param {?proto.pictophone.v1_0.ShortCodeInUseError|undefined} value */
proto.pictophone.v1_0.CreateGameResponse.prototype.setShortCodeInUseError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v1_0.CreateGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v1_0.CreateGameResponse.prototype.clearShortCodeInUseError = function() {
  this.setShortCodeInUseError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.CreateGameResponse.prototype.hasShortCodeInUseError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.GameAlreadyExistsError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.GameAlreadyExistsError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.GameAlreadyExistsError.displayName = 'proto.pictophone.v1_0.GameAlreadyExistsError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.GameAlreadyExistsError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.GameAlreadyExistsError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.GameAlreadyExistsError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.GameAlreadyExistsError.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.GameAlreadyExistsError}
 */
proto.pictophone.v1_0.GameAlreadyExistsError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.GameAlreadyExistsError;
  return proto.pictophone.v1_0.GameAlreadyExistsError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.GameAlreadyExistsError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.GameAlreadyExistsError}
 */
proto.pictophone.v1_0.GameAlreadyExistsError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.GameAlreadyExistsError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.GameAlreadyExistsError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.GameAlreadyExistsError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.GameAlreadyExistsError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v1_0.GameAlreadyExistsError.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.GameAlreadyExistsError.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.ShortCodeInUseError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.ShortCodeInUseError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.ShortCodeInUseError.displayName = 'proto.pictophone.v1_0.ShortCodeInUseError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.ShortCodeInUseError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.ShortCodeInUseError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.ShortCodeInUseError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.ShortCodeInUseError.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.ShortCodeInUseError}
 */
proto.pictophone.v1_0.ShortCodeInUseError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.ShortCodeInUseError;
  return proto.pictophone.v1_0.ShortCodeInUseError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.ShortCodeInUseError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.ShortCodeInUseError}
 */
proto.pictophone.v1_0.ShortCodeInUseError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.ShortCodeInUseError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.ShortCodeInUseError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.ShortCodeInUseError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.ShortCodeInUseError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string short_code = 1;
 * @return {string}
 */
proto.pictophone.v1_0.ShortCodeInUseError.prototype.getShortCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.ShortCodeInUseError.prototype.setShortCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.DeleteGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.DeleteGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.DeleteGameRequest.displayName = 'proto.pictophone.v1_0.DeleteGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.DeleteGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.DeleteGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.DeleteGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.DeleteGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.DeleteGameRequest}
 */
proto.pictophone.v1_0.DeleteGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.DeleteGameRequest;
  return proto.pictophone.v1_0.DeleteGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.DeleteGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.DeleteGameRequest}
 */
proto.pictophone.v1_0.DeleteGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.DeleteGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.DeleteGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.DeleteGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.DeleteGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v1_0.DeleteGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.DeleteGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.DeleteGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v1_0.DeleteGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v1_0.DeleteGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.DeleteGameResponse.displayName = 'proto.pictophone.v1_0.DeleteGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v1_0.DeleteGameResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.pictophone.v1_0.DeleteGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  GAME_NOT_FOUND_ERROR: 1
};

/**
 * @return {proto.pictophone.v1_0.DeleteGameResponse.ErrorCase}
 */
proto.pictophone.v1_0.DeleteGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v1_0.DeleteGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v1_0.DeleteGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.DeleteGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.DeleteGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.DeleteGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.DeleteGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameNotFoundError: (f = msg.getGameNotFoundError()) && proto.pictophone.v1_0.GameNotFoundError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.DeleteGameResponse}
 */
proto.pictophone.v1_0.DeleteGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.DeleteGameResponse;
  return proto.pictophone.v1_0.DeleteGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.DeleteGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.DeleteGameResponse}
 */
proto.pictophone.v1_0.DeleteGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v1_0.GameNotFoundError;
      reader.readMessage(value,proto.pictophone.v1_0.GameNotFoundError.deserializeBinaryFromReader);
      msg.setGameNotFoundError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.DeleteGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.DeleteGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.DeleteGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.DeleteGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameNotFoundError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v1_0.GameNotFoundError.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameNotFoundError game_not_found_error = 1;
 * @return {?proto.pictophone.v1_0.GameNotFoundError}
 */
proto.pictophone.v1_0.DeleteGameResponse.prototype.getGameNotFoundError = function() {
  return /** @type{?proto.pictophone.v1_0.GameNotFoundError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v1_0.GameNotFoundError, 1));
};


/** @param {?proto.pictophone.v1_0.GameNotFoundError|undefined} value */
proto.pictophone.v1_0.DeleteGameResponse.prototype.setGameNotFoundError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v1_0.DeleteGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v1_0.DeleteGameResponse.prototype.clearGameNotFoundError = function() {
  this.setGameNotFoundError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v1_0.DeleteGameResponse.prototype.hasGameNotFoundError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v1_0.GameNotFoundError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v1_0.GameNotFoundError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v1_0.GameNotFoundError.displayName = 'proto.pictophone.v1_0.GameNotFoundError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v1_0.GameNotFoundError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v1_0.GameNotFoundError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v1_0.GameNotFoundError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.GameNotFoundError.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v1_0.GameNotFoundError}
 */
proto.pictophone.v1_0.GameNotFoundError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v1_0.GameNotFoundError;
  return proto.pictophone.v1_0.GameNotFoundError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v1_0.GameNotFoundError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v1_0.GameNotFoundError}
 */
proto.pictophone.v1_0.GameNotFoundError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v1_0.GameNotFoundError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v1_0.GameNotFoundError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v1_0.GameNotFoundError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v1_0.GameNotFoundError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v1_0.GameNotFoundError.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v1_0.GameNotFoundError.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.pictophone.v1_0);
