/* tslint:disable */
// generated by typescript-json-validator
import Ajv = require('ajv');
import {History, Game, UnstartedGame, ActiveGame, FinishedGame} from './history';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {History, Game, UnstartedGame, ActiveGame, FinishedGame};
export const Schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "ActiveGame": {
      "defaultProperties": [
      ],
      "properties": {
        "playerIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "responses": {
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "array"
        },
        "state": {
          "enum": [
            "ACTIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "playerIds",
        "responses",
        "state"
      ],
      "type": "object"
    },
    "FinishedGame": {
      "defaultProperties": [
      ],
      "properties": {
        "playerIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "enum": [
            "FINISHED"
          ],
          "type": "string"
        }
      },
      "required": [
        "playerIds",
        "state"
      ],
      "type": "object"
    },
    "Game": {
      "else": {
        "else": {
          "else": {
            "properties": {
              "state": {
                "enum": [
                  "UNSTARTED",
                  "ACTIVE",
                  "FINISHED"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ]
          },
          "if": {
            "properties": {
              "state": {
                "enum": [
                  "FINISHED"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ]
          },
          "then": {
            "defaultProperties": [
            ],
            "properties": {
              "playerIds": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "state": {
                "enum": [
                  "FINISHED"
                ],
                "type": "string"
              }
            },
            "required": [
              "playerIds",
              "state"
            ],
            "type": "object"
          }
        },
        "if": {
          "properties": {
            "state": {
              "enum": [
                "ACTIVE"
              ],
              "type": "string"
            }
          },
          "required": [
            "state"
          ]
        },
        "then": {
          "defaultProperties": [
          ],
          "properties": {
            "playerIds": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "responses": {
              "items": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "array"
            },
            "state": {
              "enum": [
                "ACTIVE"
              ],
              "type": "string"
            }
          },
          "required": [
            "playerIds",
            "responses",
            "state"
          ],
          "type": "object"
        }
      },
      "if": {
        "properties": {
          "state": {
            "enum": [
              "UNSTARTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ]
      },
      "then": {
        "defaultProperties": [
        ],
        "properties": {
          "playerIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "enum": [
              "UNSTARTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "playerIds",
          "state"
        ],
        "type": "object"
      }
    },
    "History": {
      "defaultProperties": [
      ],
      "properties": {
        "games": {
          "additionalProperties": {
            "anyOf": [
              {
                "defaultProperties": [
                ],
                "properties": {
                  "playerIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "state": {
                    "enum": [
                      "UNSTARTED"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "playerIds",
                  "state"
                ],
                "type": "object"
              },
              {
                "defaultProperties": [
                ],
                "properties": {
                  "playerIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "responses": {
                    "items": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "state": {
                    "enum": [
                      "ACTIVE"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "playerIds",
                  "responses",
                  "state"
                ],
                "type": "object"
              },
              {
                "defaultProperties": [
                ],
                "properties": {
                  "playerIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "state": {
                    "enum": [
                      "FINISHED"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "playerIds",
                  "state"
                ],
                "type": "object"
              }
            ]
          },
          "defaultProperties": [
          ],
          "type": "object"
        }
      },
      "required": [
        "games"
      ],
      "type": "object"
    },
    "UnstartedGame": {
      "defaultProperties": [
      ],
      "properties": {
        "playerIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "enum": [
            "UNSTARTED"
          ],
          "type": "string"
        }
      },
      "required": [
        "playerIds",
        "state"
      ],
      "type": "object"
    }
  }
};
ajv.addSchema(Schema, 'Schema')
export function validate(typeName: 'History'): (value: unknown) => History;
export function validate(typeName: 'Game'): (value: unknown) => Game;
export function validate(typeName: 'UnstartedGame'): (value: unknown) => UnstartedGame;
export function validate(typeName: 'ActiveGame'): (value: unknown) => ActiveGame;
export function validate(typeName: 'FinishedGame'): (value: unknown) => FinishedGame;
export function validate(typeName: string): (value: unknown) => any {
  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
  return (value: unknown): any => {
    if (!validator) {
      throw new Error(`No validator defined for Schema#/definitions/${typeName}`)
    }
  
    const valid = validator(value);

    if (!valid) {
      throw new Error(
        'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: typeName}),
      );
    }

    return value as any;
  };
}