/* tslint:disable */
// generated by typescript-json-validator
import Ajv from 'ajv';
import { Drawing, Upload, UploadResponse, Pointer } from './rpc';
export const ajv = new Ajv({ "allErrors": true, "coerceTypes": false, "format": "fast", "nullable": true, "unicode": true, "uniqueItems": true, "useDefaults": true });

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const Schema = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Drawing": {
            "defaultProperties": [
            ],
            "properties": {
                "kind": {
                    "enum": [
                        "drawing"
                    ],
                    "type": "string"
                },
                "paths": {
                    "items": {
                        "items": {
                            "type": "number"
                        },
                        "type": "array"
                    },
                    "type": "array"
                }
            },
            "required": [
                "kind",
                "paths"
            ],
            "type": "object"
        },
        "Pointer": {
            "defaultProperties": [
            ],
            "properties": {
                "actionId": {
                    "type": "string"
                }
            },
            "required": [
                "actionId"
            ],
            "type": "object"
        },
        "Upload": {
            "defaultProperties": [
            ],
            "properties": {
                "kind": {
                    "enum": [
                        "drawing"
                    ],
                    "type": "string"
                },
                "paths": {
                    "items": {
                        "items": {
                            "type": "number"
                        },
                        "type": "array"
                    },
                    "type": "array"
                }
            },
            "required": [
                "kind",
                "paths"
            ],
            "type": "object"
        },
        "UploadResponse": {
            "defaultProperties": [
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        }
    }
};
ajv.addSchema(Schema, 'Schema')
export function validate(typeName: 'Drawing'): (value: unknown) => Drawing;
export function validate(typeName: 'Upload'): (value: unknown) => Upload;
export function validate(typeName: 'UploadResponse'): (value: unknown) => UploadResponse;
export function validate(typeName: 'Pointer'): (value: unknown) => Pointer;
export function validate(typeName: string): (value: unknown) => any {
    const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
    return (value: unknown): any => {
        if (!validator) {
            throw new Error(`No validator defined for Schema#/definitions/${typeName}`)
        }

        const valid = validator(value);

        if (!valid) {
            throw new Error(
                'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), { dataVar: typeName }),
            );
        }

        return value as any;
    };
}
