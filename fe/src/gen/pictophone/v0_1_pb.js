/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pictophone.v0_1.CreateGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v0_1.CreateGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v0_1.EmptyHandError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.Game', null, global);
goog.exportSymbol('proto.pictophone.v0_1.Game.GameOver', null, global);
goog.exportSymbol('proto.pictophone.v0_1.Game.NotYourTurn', null, global);
goog.exportSymbol('proto.pictophone.v0_1.Game.Unstarted', null, global);
goog.exportSymbol('proto.pictophone.v0_1.Game.YourTurn', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GameAlreadyExistsError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GameAlreadyOverError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GameAlreadyStartedError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GameNotFoundError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GameNotStartedError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GetGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v0_1.GetGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v0_1.InvalidGameParametersError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.JoinGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v0_1.JoinGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v0_1.MakeMoveRequest', null, global);
goog.exportSymbol('proto.pictophone.v0_1.MakeMoveResponse', null, global);
goog.exportSymbol('proto.pictophone.v0_1.MoveAbortedError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.NotYourTurnError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.PlayerNotInGameError', null, global);
goog.exportSymbol('proto.pictophone.v0_1.StartGameRequest', null, global);
goog.exportSymbol('proto.pictophone.v0_1.StartGameResponse', null, global);
goog.exportSymbol('proto.pictophone.v0_1.UnknownError', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.CreateGameRequest.displayName = 'proto.pictophone.v0_1.CreateGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.CreateGameRequest}
 */
proto.pictophone.v0_1.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.CreateGameRequest;
  return proto.pictophone.v0_1.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.CreateGameRequest}
 */
proto.pictophone.v0_1.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v0_1.CreateGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.CreateGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.pictophone.v0_1.CreateGameRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.CreateGameRequest.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.CreateGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.CreateGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.CreateGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.CreateGameResponse.displayName = 'proto.pictophone.v0_1.CreateGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.CreateGameResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.CreateGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNKNOWN_ERROR: 1,
  GAME_ALREADY_EXISTS_ERROR: 2
};

/**
 * @return {proto.pictophone.v0_1.CreateGameResponse.ErrorCase}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v0_1.CreateGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.CreateGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.CreateGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.CreateGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.CreateGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),
    gameAlreadyExistsError: (f = msg.getGameAlreadyExistsError()) && proto.pictophone.v0_1.GameAlreadyExistsError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.CreateGameResponse}
 */
proto.pictophone.v0_1.CreateGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.CreateGameResponse;
  return proto.pictophone.v0_1.CreateGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.CreateGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.CreateGameResponse}
 */
proto.pictophone.v0_1.CreateGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v0_1.UnknownError;
      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);
      msg.setUnknownError(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.GameAlreadyExistsError;
      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyExistsError.deserializeBinaryFromReader);
      msg.setGameAlreadyExistsError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.CreateGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.CreateGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.CreateGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnknownError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter
    );
  }
  f = message.getGameAlreadyExistsError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.GameAlreadyExistsError.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnknownError unknown_error = 1;
 * @return {?proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.getUnknownError = function() {
  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));
};


/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */
proto.pictophone.v0_1.CreateGameResponse.prototype.setUnknownError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.CreateGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.CreateGameResponse.prototype.clearUnknownError = function() {
  this.setUnknownError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.hasUnknownError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameAlreadyExistsError game_already_exists_error = 2;
 * @return {?proto.pictophone.v0_1.GameAlreadyExistsError}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.getGameAlreadyExistsError = function() {
  return /** @type{?proto.pictophone.v0_1.GameAlreadyExistsError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyExistsError, 2));
};


/** @param {?proto.pictophone.v0_1.GameAlreadyExistsError|undefined} value */
proto.pictophone.v0_1.CreateGameResponse.prototype.setGameAlreadyExistsError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.CreateGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.CreateGameResponse.prototype.clearGameAlreadyExistsError = function() {
  this.setGameAlreadyExistsError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.CreateGameResponse.prototype.hasGameAlreadyExistsError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.JoinGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.JoinGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.JoinGameRequest.displayName = 'proto.pictophone.v0_1.JoinGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.JoinGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.JoinGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.JoinGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.JoinGameRequest}
 */
proto.pictophone.v0_1.JoinGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.JoinGameRequest;
  return proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.JoinGameRequest}
 */
proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.JoinGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.JoinGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v0_1.JoinGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.JoinGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.pictophone.v0_1.JoinGameRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.JoinGameRequest.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.JoinGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.JoinGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.JoinGameResponse.displayName = 'proto.pictophone.v0_1.JoinGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.JoinGameResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.JoinGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNKNOWN_ERROR: 1,
  GAME_NOT_FOUND_ERROR: 2,
  GAME_ALREADY_STARTED_ERROR: 3
};

/**
 * @return {proto.pictophone.v0_1.JoinGameResponse.ErrorCase}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v0_1.JoinGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.JoinGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.JoinGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),
    gameNotFoundError: (f = msg.getGameNotFoundError()) && proto.pictophone.v0_1.GameNotFoundError.toObject(includeInstance, f),
    gameAlreadyStartedError: (f = msg.getGameAlreadyStartedError()) && proto.pictophone.v0_1.GameAlreadyStartedError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.JoinGameResponse}
 */
proto.pictophone.v0_1.JoinGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.JoinGameResponse;
  return proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.JoinGameResponse}
 */
proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v0_1.UnknownError;
      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);
      msg.setUnknownError(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.GameNotFoundError;
      reader.readMessage(value,proto.pictophone.v0_1.GameNotFoundError.deserializeBinaryFromReader);
      msg.setGameNotFoundError(value);
      break;
    case 3:
      var value = new proto.pictophone.v0_1.GameAlreadyStartedError;
      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader);
      msg.setGameAlreadyStartedError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.JoinGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnknownError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter
    );
  }
  f = message.getGameNotFoundError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.GameNotFoundError.serializeBinaryToWriter
    );
  }
  f = message.getGameAlreadyStartedError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnknownError unknown_error = 1;
 * @return {?proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.getUnknownError = function() {
  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));
};


/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */
proto.pictophone.v0_1.JoinGameResponse.prototype.setUnknownError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.JoinGameResponse.prototype.clearUnknownError = function() {
  this.setUnknownError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.hasUnknownError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameNotFoundError game_not_found_error = 2;
 * @return {?proto.pictophone.v0_1.GameNotFoundError}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.getGameNotFoundError = function() {
  return /** @type{?proto.pictophone.v0_1.GameNotFoundError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameNotFoundError, 2));
};


/** @param {?proto.pictophone.v0_1.GameNotFoundError|undefined} value */
proto.pictophone.v0_1.JoinGameResponse.prototype.setGameNotFoundError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.JoinGameResponse.prototype.clearGameNotFoundError = function() {
  this.setGameNotFoundError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.hasGameNotFoundError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GameAlreadyStartedError game_already_started_error = 3;
 * @return {?proto.pictophone.v0_1.GameAlreadyStartedError}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.getGameAlreadyStartedError = function() {
  return /** @type{?proto.pictophone.v0_1.GameAlreadyStartedError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyStartedError, 3));
};


/** @param {?proto.pictophone.v0_1.GameAlreadyStartedError|undefined} value */
proto.pictophone.v0_1.JoinGameResponse.prototype.setGameAlreadyStartedError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.JoinGameResponse.prototype.clearGameAlreadyStartedError = function() {
  this.setGameAlreadyStartedError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.JoinGameResponse.prototype.hasGameAlreadyStartedError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.StartGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.StartGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.StartGameRequest.displayName = 'proto.pictophone.v0_1.StartGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.StartGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.StartGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.StartGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    windowSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    length: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.StartGameRequest}
 */
proto.pictophone.v0_1.StartGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.StartGameRequest;
  return proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.StartGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.StartGameRequest}
 */
proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindowSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.StartGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWindowSize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.StartGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.StartGameRequest.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 window_size = 3;
 * @return {number}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.getWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pictophone.v0_1.StartGameRequest.prototype.setWindowSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 length = 4;
 * @return {number}
 */
proto.pictophone.v0_1.StartGameRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pictophone.v0_1.StartGameRequest.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.StartGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.StartGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.StartGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.StartGameResponse.displayName = 'proto.pictophone.v0_1.StartGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.StartGameResponse.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.StartGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNKNOWN_ERROR: 1,
  PLAYER_NOT_IN_GAME_ERROR: 2,
  INVALID_GAME_PARAMETERS_ERROR: 3,
  GAME_ALREADY_STARTED_ERROR: 4
};

/**
 * @return {proto.pictophone.v0_1.StartGameResponse.ErrorCase}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v0_1.StartGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.StartGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.StartGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.StartGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),
    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),
    invalidGameParametersError: (f = msg.getInvalidGameParametersError()) && proto.pictophone.v0_1.InvalidGameParametersError.toObject(includeInstance, f),
    gameAlreadyStartedError: (f = msg.getGameAlreadyStartedError()) && proto.pictophone.v0_1.GameAlreadyStartedError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.StartGameResponse}
 */
proto.pictophone.v0_1.StartGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.StartGameResponse;
  return proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.StartGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.StartGameResponse}
 */
proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v0_1.UnknownError;
      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);
      msg.setUnknownError(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.PlayerNotInGameError;
      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);
      msg.setPlayerNotInGameError(value);
      break;
    case 3:
      var value = new proto.pictophone.v0_1.InvalidGameParametersError;
      reader.readMessage(value,proto.pictophone.v0_1.InvalidGameParametersError.deserializeBinaryFromReader);
      msg.setInvalidGameParametersError(value);
      break;
    case 4:
      var value = new proto.pictophone.v0_1.GameAlreadyStartedError;
      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader);
      msg.setGameAlreadyStartedError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.StartGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnknownError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter
    );
  }
  f = message.getPlayerNotInGameError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter
    );
  }
  f = message.getInvalidGameParametersError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pictophone.v0_1.InvalidGameParametersError.serializeBinaryToWriter
    );
  }
  f = message.getGameAlreadyStartedError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnknownError unknown_error = 1;
 * @return {?proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.getUnknownError = function() {
  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));
};


/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */
proto.pictophone.v0_1.StartGameResponse.prototype.setUnknownError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.StartGameResponse.prototype.clearUnknownError = function() {
  this.setUnknownError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.hasUnknownError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerNotInGameError player_not_in_game_error = 2;
 * @return {?proto.pictophone.v0_1.PlayerNotInGameError}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.getPlayerNotInGameError = function() {
  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));
};


/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */
proto.pictophone.v0_1.StartGameResponse.prototype.setPlayerNotInGameError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.StartGameResponse.prototype.clearPlayerNotInGameError = function() {
  this.setPlayerNotInGameError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.hasPlayerNotInGameError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InvalidGameParametersError invalid_game_parameters_error = 3;
 * @return {?proto.pictophone.v0_1.InvalidGameParametersError}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.getInvalidGameParametersError = function() {
  return /** @type{?proto.pictophone.v0_1.InvalidGameParametersError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.InvalidGameParametersError, 3));
};


/** @param {?proto.pictophone.v0_1.InvalidGameParametersError|undefined} value */
proto.pictophone.v0_1.StartGameResponse.prototype.setInvalidGameParametersError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.StartGameResponse.prototype.clearInvalidGameParametersError = function() {
  this.setInvalidGameParametersError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.hasInvalidGameParametersError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GameAlreadyStartedError game_already_started_error = 4;
 * @return {?proto.pictophone.v0_1.GameAlreadyStartedError}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.getGameAlreadyStartedError = function() {
  return /** @type{?proto.pictophone.v0_1.GameAlreadyStartedError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyStartedError, 4));
};


/** @param {?proto.pictophone.v0_1.GameAlreadyStartedError|undefined} value */
proto.pictophone.v0_1.StartGameResponse.prototype.setGameAlreadyStartedError = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.StartGameResponse.prototype.clearGameAlreadyStartedError = function() {
  this.setGameAlreadyStartedError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.StartGameResponse.prototype.hasGameAlreadyStartedError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.MakeMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.MakeMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.MakeMoveRequest.displayName = 'proto.pictophone.v0_1.MakeMoveRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.MakeMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.MakeMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MakeMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sentence: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.MakeMoveRequest}
 */
proto.pictophone.v0_1.MakeMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.MakeMoveRequest;
  return proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.MakeMoveRequest}
 */
proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSentence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.MakeMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.MakeMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSentence();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v0_1.MakeMoveRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.MakeMoveRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.pictophone.v0_1.MakeMoveRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.MakeMoveRequest.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sentence = 3;
 * @return {string}
 */
proto.pictophone.v0_1.MakeMoveRequest.prototype.getSentence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.MakeMoveRequest.prototype.setSentence = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.MakeMoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.MakeMoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.MakeMoveResponse.displayName = 'proto.pictophone.v0_1.MakeMoveResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.MakeMoveResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNKNOWN_ERROR: 1,
  NOT_YOUR_TURN_ERROR: 2,
  GAME_NOT_STARTED_ERROR: 3,
  GAME_ALREADY_OVER_ERROR: 4
};

/**
 * @return {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.MakeMoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MakeMoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),
    notYourTurnError: (f = msg.getNotYourTurnError()) && proto.pictophone.v0_1.NotYourTurnError.toObject(includeInstance, f),
    gameNotStartedError: (f = msg.getGameNotStartedError()) && proto.pictophone.v0_1.GameNotStartedError.toObject(includeInstance, f),
    gameAlreadyOverError: (f = msg.getGameAlreadyOverError()) && proto.pictophone.v0_1.GameAlreadyOverError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.MakeMoveResponse}
 */
proto.pictophone.v0_1.MakeMoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.MakeMoveResponse;
  return proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.MakeMoveResponse}
 */
proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v0_1.UnknownError;
      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);
      msg.setUnknownError(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.NotYourTurnError;
      reader.readMessage(value,proto.pictophone.v0_1.NotYourTurnError.deserializeBinaryFromReader);
      msg.setNotYourTurnError(value);
      break;
    case 3:
      var value = new proto.pictophone.v0_1.GameNotStartedError;
      reader.readMessage(value,proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader);
      msg.setGameNotStartedError(value);
      break;
    case 4:
      var value = new proto.pictophone.v0_1.GameAlreadyOverError;
      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyOverError.deserializeBinaryFromReader);
      msg.setGameAlreadyOverError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.MakeMoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnknownError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter
    );
  }
  f = message.getNotYourTurnError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.NotYourTurnError.serializeBinaryToWriter
    );
  }
  f = message.getGameNotStartedError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter
    );
  }
  f = message.getGameAlreadyOverError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pictophone.v0_1.GameAlreadyOverError.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnknownError unknown_error = 1;
 * @return {?proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.getUnknownError = function() {
  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));
};


/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */
proto.pictophone.v0_1.MakeMoveResponse.prototype.setUnknownError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.MakeMoveResponse.prototype.clearUnknownError = function() {
  this.setUnknownError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.hasUnknownError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NotYourTurnError not_your_turn_error = 2;
 * @return {?proto.pictophone.v0_1.NotYourTurnError}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.getNotYourTurnError = function() {
  return /** @type{?proto.pictophone.v0_1.NotYourTurnError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.NotYourTurnError, 2));
};


/** @param {?proto.pictophone.v0_1.NotYourTurnError|undefined} value */
proto.pictophone.v0_1.MakeMoveResponse.prototype.setNotYourTurnError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.MakeMoveResponse.prototype.clearNotYourTurnError = function() {
  this.setNotYourTurnError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.hasNotYourTurnError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GameNotStartedError game_not_started_error = 3;
 * @return {?proto.pictophone.v0_1.GameNotStartedError}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.getGameNotStartedError = function() {
  return /** @type{?proto.pictophone.v0_1.GameNotStartedError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameNotStartedError, 3));
};


/** @param {?proto.pictophone.v0_1.GameNotStartedError|undefined} value */
proto.pictophone.v0_1.MakeMoveResponse.prototype.setGameNotStartedError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.MakeMoveResponse.prototype.clearGameNotStartedError = function() {
  this.setGameNotStartedError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.hasGameNotStartedError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GameAlreadyOverError game_already_over_error = 4;
 * @return {?proto.pictophone.v0_1.GameAlreadyOverError}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.getGameAlreadyOverError = function() {
  return /** @type{?proto.pictophone.v0_1.GameAlreadyOverError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyOverError, 4));
};


/** @param {?proto.pictophone.v0_1.GameAlreadyOverError|undefined} value */
proto.pictophone.v0_1.MakeMoveResponse.prototype.setGameAlreadyOverError = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.MakeMoveResponse.prototype.clearGameAlreadyOverError = function() {
  this.setGameAlreadyOverError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.MakeMoveResponse.prototype.hasGameAlreadyOverError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GetGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GetGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GetGameRequest.displayName = 'proto.pictophone.v0_1.GetGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GetGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GetGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GetGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GetGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GetGameRequest}
 */
proto.pictophone.v0_1.GetGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GetGameRequest;
  return proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GetGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GetGameRequest}
 */
proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GetGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GetGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pictophone.v0_1.GetGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.GetGameRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.pictophone.v0_1.GetGameRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.GetGameRequest.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GetGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.GetGameResponse.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.GetGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GetGameResponse.displayName = 'proto.pictophone.v0_1.GetGameResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.GetGameResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.GetGameResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNKNOWN_ERROR: 1,
  PLAYER_NOT_IN_GAME_ERROR: 2
};

/**
 * @return {proto.pictophone.v0_1.GetGameResponse.ErrorCase}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.getErrorCase = function() {
  return /** @type {proto.pictophone.v0_1.GetGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GetGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GetGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GetGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),
    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),
    game: (f = msg.getGame()) && proto.pictophone.v0_1.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GetGameResponse}
 */
proto.pictophone.v0_1.GetGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GetGameResponse;
  return proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GetGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GetGameResponse}
 */
proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pictophone.v0_1.UnknownError;
      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);
      msg.setUnknownError(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.PlayerNotInGameError;
      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);
      msg.setPlayerNotInGameError(value);
      break;
    case 3:
      var value = new proto.pictophone.v0_1.Game;
      reader.readMessage(value,proto.pictophone.v0_1.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GetGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnknownError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter
    );
  }
  f = message.getPlayerNotInGameError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pictophone.v0_1.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnknownError unknown_error = 1;
 * @return {?proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.getUnknownError = function() {
  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));
};


/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */
proto.pictophone.v0_1.GetGameResponse.prototype.setUnknownError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.GetGameResponse.prototype.clearUnknownError = function() {
  this.setUnknownError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.hasUnknownError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerNotInGameError player_not_in_game_error = 2;
 * @return {?proto.pictophone.v0_1.PlayerNotInGameError}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.getPlayerNotInGameError = function() {
  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));
};


/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */
proto.pictophone.v0_1.GetGameResponse.prototype.setPlayerNotInGameError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);
};


proto.pictophone.v0_1.GetGameResponse.prototype.clearPlayerNotInGameError = function() {
  this.setPlayerNotInGameError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.hasPlayerNotInGameError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Game game = 3;
 * @return {?proto.pictophone.v0_1.Game}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.getGame = function() {
  return /** @type{?proto.pictophone.v0_1.Game} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game, 3));
};


/** @param {?proto.pictophone.v0_1.Game|undefined} value */
proto.pictophone.v0_1.GetGameResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pictophone.v0_1.GetGameResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.GetGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.repeatedFields_, proto.pictophone.v0_1.Game.oneofGroups_);
};
goog.inherits(proto.pictophone.v0_1.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.Game.displayName = 'proto.pictophone.v0_1.Game';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pictophone.v0_1.Game.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pictophone.v0_1.Game.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.pictophone.v0_1.Game.StateCase = {
  STATE_NOT_SET: 0,
  UNSTARTED: 2,
  YOUR_TURN: 3,
  NOT_YOUR_TURN: 4,
  GAME_OVER: 5
};

/**
 * @return {proto.pictophone.v0_1.Game.StateCase}
 */
proto.pictophone.v0_1.Game.prototype.getStateCase = function() {
  return /** @type {proto.pictophone.v0_1.Game.StateCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.Game.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerIdsList: jspb.Message.getRepeatedField(msg, 1),
    unstarted: (f = msg.getUnstarted()) && proto.pictophone.v0_1.Game.Unstarted.toObject(includeInstance, f),
    yourTurn: (f = msg.getYourTurn()) && proto.pictophone.v0_1.Game.YourTurn.toObject(includeInstance, f),
    notYourTurn: (f = msg.getNotYourTurn()) && proto.pictophone.v0_1.Game.NotYourTurn.toObject(includeInstance, f),
    gameOver: (f = msg.getGameOver()) && proto.pictophone.v0_1.Game.GameOver.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.Game}
 */
proto.pictophone.v0_1.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.Game;
  return proto.pictophone.v0_1.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.Game}
 */
proto.pictophone.v0_1.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayerIds(value);
      break;
    case 2:
      var value = new proto.pictophone.v0_1.Game.Unstarted;
      reader.readMessage(value,proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader);
      msg.setUnstarted(value);
      break;
    case 3:
      var value = new proto.pictophone.v0_1.Game.YourTurn;
      reader.readMessage(value,proto.pictophone.v0_1.Game.YourTurn.deserializeBinaryFromReader);
      msg.setYourTurn(value);
      break;
    case 4:
      var value = new proto.pictophone.v0_1.Game.NotYourTurn;
      reader.readMessage(value,proto.pictophone.v0_1.Game.NotYourTurn.deserializeBinaryFromReader);
      msg.setNotYourTurn(value);
      break;
    case 5:
      var value = new proto.pictophone.v0_1.Game.GameOver;
      reader.readMessage(value,proto.pictophone.v0_1.Game.GameOver.deserializeBinaryFromReader);
      msg.setGameOver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUnstarted();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter
    );
  }
  f = message.getYourTurn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pictophone.v0_1.Game.YourTurn.serializeBinaryToWriter
    );
  }
  f = message.getNotYourTurn();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pictophone.v0_1.Game.NotYourTurn.serializeBinaryToWriter
    );
  }
  f = message.getGameOver();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pictophone.v0_1.Game.GameOver.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.Game.Unstarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.Game.Unstarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.Game.Unstarted.displayName = 'proto.pictophone.v0_1.Game.Unstarted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.Game.Unstarted.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.Game.Unstarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.Unstarted.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.Game.Unstarted}
 */
proto.pictophone.v0_1.Game.Unstarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.Game.Unstarted;
  return proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.Game.Unstarted}
 */
proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.Game.Unstarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.Game.Unstarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.Game.YourTurn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.YourTurn.repeatedFields_, null);
};
goog.inherits(proto.pictophone.v0_1.Game.YourTurn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.Game.YourTurn.displayName = 'proto.pictophone.v0_1.Game.YourTurn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pictophone.v0_1.Game.YourTurn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.Game.YourTurn.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.Game.YourTurn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.Game.YourTurn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.YourTurn.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.Game.YourTurn}
 */
proto.pictophone.v0_1.Game.YourTurn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.Game.YourTurn;
  return proto.pictophone.v0_1.Game.YourTurn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.Game.YourTurn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.Game.YourTurn}
 */
proto.pictophone.v0_1.Game.YourTurn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.Game.YourTurn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.Game.YourTurn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.Game.YourTurn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.YourTurn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string context = 1;
 * @return {!Array<string>}
 */
proto.pictophone.v0_1.Game.YourTurn.prototype.getContextList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.pictophone.v0_1.Game.YourTurn.prototype.setContextList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pictophone.v0_1.Game.YourTurn.prototype.addContext = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pictophone.v0_1.Game.YourTurn.prototype.clearContextList = function() {
  this.setContextList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.Game.NotYourTurn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.Game.NotYourTurn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.Game.NotYourTurn.displayName = 'proto.pictophone.v0_1.Game.NotYourTurn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.Game.NotYourTurn.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.Game.NotYourTurn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.Game.NotYourTurn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.NotYourTurn.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.Game.NotYourTurn}
 */
proto.pictophone.v0_1.Game.NotYourTurn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.Game.NotYourTurn;
  return proto.pictophone.v0_1.Game.NotYourTurn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.Game.NotYourTurn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.Game.NotYourTurn}
 */
proto.pictophone.v0_1.Game.NotYourTurn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.Game.NotYourTurn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.Game.NotYourTurn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.Game.NotYourTurn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.NotYourTurn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.Game.GameOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.GameOver.repeatedFields_, null);
};
goog.inherits(proto.pictophone.v0_1.Game.GameOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.Game.GameOver.displayName = 'proto.pictophone.v0_1.Game.GameOver';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pictophone.v0_1.Game.GameOver.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.Game.GameOver.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.Game.GameOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.Game.GameOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.GameOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    sentencesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.Game.GameOver}
 */
proto.pictophone.v0_1.Game.GameOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.Game.GameOver;
  return proto.pictophone.v0_1.Game.GameOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.Game.GameOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.Game.GameOver}
 */
proto.pictophone.v0_1.Game.GameOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSentences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.Game.GameOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.Game.GameOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.Game.GameOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.Game.GameOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSentencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string sentences = 1;
 * @return {!Array<string>}
 */
proto.pictophone.v0_1.Game.GameOver.prototype.getSentencesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.pictophone.v0_1.Game.GameOver.prototype.setSentencesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pictophone.v0_1.Game.GameOver.prototype.addSentences = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pictophone.v0_1.Game.GameOver.prototype.clearSentencesList = function() {
  this.setSentencesList([]);
};


/**
 * repeated string player_ids = 1;
 * @return {!Array<string>}
 */
proto.pictophone.v0_1.Game.prototype.getPlayerIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.pictophone.v0_1.Game.prototype.setPlayerIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pictophone.v0_1.Game.prototype.addPlayerIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pictophone.v0_1.Game.prototype.clearPlayerIdsList = function() {
  this.setPlayerIdsList([]);
};


/**
 * optional Unstarted unstarted = 2;
 * @return {?proto.pictophone.v0_1.Game.Unstarted}
 */
proto.pictophone.v0_1.Game.prototype.getUnstarted = function() {
  return /** @type{?proto.pictophone.v0_1.Game.Unstarted} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.Unstarted, 2));
};


/** @param {?proto.pictophone.v0_1.Game.Unstarted|undefined} value */
proto.pictophone.v0_1.Game.prototype.setUnstarted = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.Game.oneofGroups_[0], value);
};


proto.pictophone.v0_1.Game.prototype.clearUnstarted = function() {
  this.setUnstarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.Game.prototype.hasUnstarted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional YourTurn your_turn = 3;
 * @return {?proto.pictophone.v0_1.Game.YourTurn}
 */
proto.pictophone.v0_1.Game.prototype.getYourTurn = function() {
  return /** @type{?proto.pictophone.v0_1.Game.YourTurn} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.YourTurn, 3));
};


/** @param {?proto.pictophone.v0_1.Game.YourTurn|undefined} value */
proto.pictophone.v0_1.Game.prototype.setYourTurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.Game.oneofGroups_[0], value);
};


proto.pictophone.v0_1.Game.prototype.clearYourTurn = function() {
  this.setYourTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.Game.prototype.hasYourTurn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NotYourTurn not_your_turn = 4;
 * @return {?proto.pictophone.v0_1.Game.NotYourTurn}
 */
proto.pictophone.v0_1.Game.prototype.getNotYourTurn = function() {
  return /** @type{?proto.pictophone.v0_1.Game.NotYourTurn} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.NotYourTurn, 4));
};


/** @param {?proto.pictophone.v0_1.Game.NotYourTurn|undefined} value */
proto.pictophone.v0_1.Game.prototype.setNotYourTurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.pictophone.v0_1.Game.oneofGroups_[0], value);
};


proto.pictophone.v0_1.Game.prototype.clearNotYourTurn = function() {
  this.setNotYourTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.Game.prototype.hasNotYourTurn = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GameOver game_over = 5;
 * @return {?proto.pictophone.v0_1.Game.GameOver}
 */
proto.pictophone.v0_1.Game.prototype.getGameOver = function() {
  return /** @type{?proto.pictophone.v0_1.Game.GameOver} */ (
    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.GameOver, 5));
};


/** @param {?proto.pictophone.v0_1.Game.GameOver|undefined} value */
proto.pictophone.v0_1.Game.prototype.setGameOver = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.pictophone.v0_1.Game.oneofGroups_[0], value);
};


proto.pictophone.v0_1.Game.prototype.clearGameOver = function() {
  this.setGameOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pictophone.v0_1.Game.prototype.hasGameOver = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.UnknownError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.UnknownError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.UnknownError.displayName = 'proto.pictophone.v0_1.UnknownError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.UnknownError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.UnknownError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.UnknownError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.UnknownError.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.UnknownError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.UnknownError;
  return proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.UnknownError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.UnknownError}
 */
proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.UnknownError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.UnknownError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.pictophone.v0_1.UnknownError.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pictophone.v0_1.UnknownError.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GameAlreadyExistsError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GameAlreadyExistsError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GameAlreadyExistsError.displayName = 'proto.pictophone.v0_1.GameAlreadyExistsError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GameAlreadyExistsError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GameAlreadyExistsError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GameAlreadyExistsError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyExistsError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GameAlreadyExistsError}
 */
proto.pictophone.v0_1.GameAlreadyExistsError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GameAlreadyExistsError;
  return proto.pictophone.v0_1.GameAlreadyExistsError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GameAlreadyExistsError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GameAlreadyExistsError}
 */
proto.pictophone.v0_1.GameAlreadyExistsError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GameAlreadyExistsError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GameAlreadyExistsError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GameAlreadyExistsError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyExistsError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.InvalidGameParametersError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.InvalidGameParametersError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.InvalidGameParametersError.displayName = 'proto.pictophone.v0_1.InvalidGameParametersError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.InvalidGameParametersError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.InvalidGameParametersError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.InvalidGameParametersError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.InvalidGameParametersError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.InvalidGameParametersError}
 */
proto.pictophone.v0_1.InvalidGameParametersError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.InvalidGameParametersError;
  return proto.pictophone.v0_1.InvalidGameParametersError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.InvalidGameParametersError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.InvalidGameParametersError}
 */
proto.pictophone.v0_1.InvalidGameParametersError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.InvalidGameParametersError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.InvalidGameParametersError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.InvalidGameParametersError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.InvalidGameParametersError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.NotYourTurnError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.NotYourTurnError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.NotYourTurnError.displayName = 'proto.pictophone.v0_1.NotYourTurnError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.NotYourTurnError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.NotYourTurnError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.NotYourTurnError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.NotYourTurnError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.NotYourTurnError}
 */
proto.pictophone.v0_1.NotYourTurnError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.NotYourTurnError;
  return proto.pictophone.v0_1.NotYourTurnError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.NotYourTurnError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.NotYourTurnError}
 */
proto.pictophone.v0_1.NotYourTurnError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.NotYourTurnError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.NotYourTurnError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.NotYourTurnError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.NotYourTurnError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GameAlreadyStartedError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GameAlreadyStartedError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GameAlreadyStartedError.displayName = 'proto.pictophone.v0_1.GameAlreadyStartedError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GameAlreadyStartedError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GameAlreadyStartedError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyStartedError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}
 */
proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GameAlreadyStartedError;
  return proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}
 */
proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GameAlreadyStartedError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GameAlreadyOverError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GameAlreadyOverError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GameAlreadyOverError.displayName = 'proto.pictophone.v0_1.GameAlreadyOverError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GameAlreadyOverError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GameAlreadyOverError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GameAlreadyOverError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyOverError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GameAlreadyOverError}
 */
proto.pictophone.v0_1.GameAlreadyOverError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GameAlreadyOverError;
  return proto.pictophone.v0_1.GameAlreadyOverError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GameAlreadyOverError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GameAlreadyOverError}
 */
proto.pictophone.v0_1.GameAlreadyOverError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GameAlreadyOverError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GameAlreadyOverError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GameAlreadyOverError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameAlreadyOverError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GameNotStartedError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GameNotStartedError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GameNotStartedError.displayName = 'proto.pictophone.v0_1.GameNotStartedError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GameNotStartedError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GameNotStartedError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameNotStartedError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GameNotStartedError}
 */
proto.pictophone.v0_1.GameNotStartedError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GameNotStartedError;
  return proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GameNotStartedError}
 */
proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GameNotStartedError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GameNotStartedError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.GameNotFoundError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.GameNotFoundError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.GameNotFoundError.displayName = 'proto.pictophone.v0_1.GameNotFoundError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.GameNotFoundError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.GameNotFoundError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.GameNotFoundError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameNotFoundError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.GameNotFoundError}
 */
proto.pictophone.v0_1.GameNotFoundError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.GameNotFoundError;
  return proto.pictophone.v0_1.GameNotFoundError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.GameNotFoundError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.GameNotFoundError}
 */
proto.pictophone.v0_1.GameNotFoundError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.GameNotFoundError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.GameNotFoundError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.GameNotFoundError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.GameNotFoundError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.PlayerNotInGameError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.PlayerNotInGameError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.PlayerNotInGameError.displayName = 'proto.pictophone.v0_1.PlayerNotInGameError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.PlayerNotInGameError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.PlayerNotInGameError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.PlayerNotInGameError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.PlayerNotInGameError}
 */
proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.PlayerNotInGameError;
  return proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.PlayerNotInGameError}
 */
proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.PlayerNotInGameError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.PlayerNotInGameError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.MoveAbortedError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.MoveAbortedError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.MoveAbortedError.displayName = 'proto.pictophone.v0_1.MoveAbortedError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.MoveAbortedError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.MoveAbortedError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MoveAbortedError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.MoveAbortedError}
 */
proto.pictophone.v0_1.MoveAbortedError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.MoveAbortedError;
  return proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.MoveAbortedError}
 */
proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.MoveAbortedError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.MoveAbortedError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pictophone.v0_1.EmptyHandError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pictophone.v0_1.EmptyHandError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pictophone.v0_1.EmptyHandError.displayName = 'proto.pictophone.v0_1.EmptyHandError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pictophone.v0_1.EmptyHandError.prototype.toObject = function(opt_includeInstance) {
  return proto.pictophone.v0_1.EmptyHandError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pictophone.v0_1.EmptyHandError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.EmptyHandError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pictophone.v0_1.EmptyHandError}
 */
proto.pictophone.v0_1.EmptyHandError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pictophone.v0_1.EmptyHandError;
  return proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pictophone.v0_1.EmptyHandError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pictophone.v0_1.EmptyHandError}
 */
proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pictophone.v0_1.EmptyHandError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pictophone.v0_1.EmptyHandError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.pictophone.v0_1);
