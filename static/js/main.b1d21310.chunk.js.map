{"version":3,"sources":["config.ts","Drawing.tsx","model/rpc.validator.ts","context.ts","GameView.tsx","model/1.1.validator.ts","gen/pictophone/V0_1ServiceClientPb.ts","watch.ts","navigation.ts","App.tsx","serviceWorker.ts","index.tsx","gen/pictophone/v0_1_pb.js"],"names":["TEST_FB","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","TEST_CONFIG","backendAddr","firebase","PROD_CONFIG","QA_CONFIG","Config","process","REACT_APP_ENV","Error","getEnvironment","Drawing","ajv","Ajv","addMetaSchema","require","addSchema","app","initializeApp","storage","PictophoneClient","hostname","credentials","options","client_","hostname_","credentials_","options_","methodInfoJoinGame","grpcWeb","MethodInfo","pictophone_v0_1_pb","request","serializeBinary","deserializeBinary","methodInfoStartGame","methodInfoMakeMove","methodInfoGetGame","this","metadata","callback","undefined","rpcCall","unaryCall","serverStreaming","fromConstant","value","next","Promise","race","fromIterator","iter","init","a","done","map","fn","outer","switchMap","helper","inner","side","Nav","sink","ixa","watch","parseLocation","window","location","pathname","history","pushState","serializeLocation","write","segments","split","console","log","length","page","gameId","playerId","flattenGlobals","input","pipeWith","f","w","authInfo","then","getGame","client","req","pb","setGameId","setPlayerId","resp","on","e","d","toObject","Symbol","asyncIterator","View","s","dispatch","state","game","ListGames","useForm","register","handleSubmit","errors","joinRegister","joinHandleSubmit","Fragment","onSubmit","i","kind","name","required","ref","Game","JSON","stringify","g","unstarted","playerIdsList","onClick","started","etag","numMistakes","roundNum","numbersPlayedList","handList","auth","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","SignInPage","firebaseAuth","App","promise","server","navigation","nav","authInfoPromise","resolve","reject","onAuthStateChanged","user","ready","globals","states","Channel","gs","flatten","integrate","push","joinGame","startGame","setEtag","makeMove","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","root","document","getElementById","watchable","ReactDOM","render","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker","jspb","goog","global","Function","exportSymbol","proto","pictophone","v0_1","ActionRequest","opt_data","Message","initialize","oneofGroups_","inherits","DEBUG","COMPILED","displayName","MethodCase","METHOD_NOT_SET","JOIN_GAME_REQUEST","START_GAME_REQUEST","MAKE_MOVE_REQUEST","prototype","getMethodCase","computeOneofCase","GENERATE_TO_OBJECT","opt_includeInstance","includeInstance","msg","obj","joinGameRequest","getJoinGameRequest","JoinGameRequest","startGameRequest","getStartGameRequest","StartGameRequest","makeMoveRequest","getMakeMoveRequest","MakeMoveRequest","$jspbMessageInstance","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readMessage","setJoinGameRequest","setStartGameRequest","setMakeMoveRequest","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","writeMessage","getWrapperField","setOneofWrapperField","clearJoinGameRequest","hasJoinGameRequest","getField","clearStartGameRequest","hasStartGameRequest","clearMakeMoveRequest","hasMakeMoveRequest","ActionResponse","JOIN_GAME_RESPONSE","START_GAME_RESPONSE","MAKE_MOVE_RESPONSE","joinGameResponse","getJoinGameResponse","JoinGameResponse","startGameResponse","getStartGameResponse","StartGameResponse","makeMoveResponse","getMakeMoveResponse","MakeMoveResponse","setJoinGameResponse","setStartGameResponse","setMakeMoveResponse","clearJoinGameResponse","hasJoinGameResponse","clearStartGameResponse","hasStartGameResponse","clearMakeMoveResponse","hasMakeMoveResponse","QueryRequest","GET_GAME_REQUEST","getGameRequest","getGetGameRequest","GetGameRequest","setGetGameRequest","clearGetGameRequest","hasGetGameRequest","QueryResponse","GET_GAME_RESPONSE","getGameResponse","getGetGameResponse","GetGameResponse","setGetGameResponse","clearGetGameResponse","hasGetGameResponse","getFieldWithDefault","readString","getGameId","writeString","getPlayerId","setProto3StringField","ErrorCase","ERROR_NOT_SET","UNKNOWN_ERROR","GAME_ALREADY_STARTED_ERROR","getErrorCase","unknownError","getUnknownError","UnknownError","gameAlreadyStartedError","getGameAlreadyStartedError","GameAlreadyStartedError","setUnknownError","setGameAlreadyStartedError","clearUnknownError","hasUnknownError","clearGameAlreadyStartedError","hasGameAlreadyStartedError","randomSeed","readUint64","setRandomSeed","getRandomSeed","writeUint64","setProto3IntField","PLAYER_NOT_IN_GAME_ERROR","playerNotInGameError","getPlayerNotInGameError","PlayerNotInGameError","setPlayerNotInGameError","clearPlayerNotInGameError","hasPlayerNotInGameError","getEtag","MOVE_ABORTED_ERROR","GAME_NOT_STARTED_ERROR","EMPTY_HAND_ERROR","moveAbortedError","getMoveAbortedError","MoveAbortedError","gameNotStartedError","getGameNotStartedError","GameNotStartedError","emptyHandError","getEmptyHandError","EmptyHandError","setMoveAbortedError","setGameNotStartedError","setEmptyHandError","clearMoveAbortedError","hasMoveAbortedError","clearGameNotStartedError","hasGameNotStartedError","clearEmptyHandError","hasEmptyHandError","setGame","setWrapperField","clearGame","hasGame","repeatedFields_","StateCase","STATE_NOT_SET","UNSTARTED","STARTED","getStateCase","getRepeatedField","getUnstarted","Unstarted","getStarted","Started","addPlayerIds","setUnstarted","setStarted","getPlayerIdsList","writeRepeatedString","readUint32","setNumMistakes","setRoundNum","readPackedUint32","setNumbersPlayedList","setHandList","getNumMistakes","writeUint32","getRoundNum","getNumbersPlayedList","writePackedUint32","getHandList","setField","addNumbersPlayed","opt_index","addToRepeatedField","clearNumbersPlayedList","addHand","clearHandList","setPlayerIdsList","clearPlayerIdsList","clearUnstarted","hasUnstarted","clearStarted","hasStarted","setError","getError","object","extend","exports"],"mappings":"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","file":"static/js/main.b1d21310.chunk.js","sourcesContent":["export type Config = {\n    backendAddr: string\n    firebase: FirebaseConfig\n}\n\ntype FirebaseConfig = {\n    apiKey: string\n    authDomain: string\n    databaseURL: string\n    projectId: string\n    storageBucket: string\n    messagingSenderId: string\n    appId: string\n    measurementId?: string\n}\n\ntype Environment = 'production' | 'qa' | 'test' | 'development'\n\nexport function getEnvironment(): Environment {\n    switch (process.env.NODE_ENV) {\n        case 'development':\n        case 'test':\n            return process.env.NODE_ENV\n        case 'production':\n            switch (process.env.REACT_APP_ENV) {\n                case 'production':\n                case 'qa':\n                    return process.env.REACT_APP_ENV\n                default:\n                    throw new Error('undefined REACT_APP_ENV: ' + process.env.REACT_APP_ENV)\n            }\n    }\n}\n\nconst PROD_FB: FirebaseConfig = {\n    apiKey: \"AIzaSyCzMg7Q2ByK5UxUd_x730LT8TmOmbA61MU\",\n    authDomain: \"pictophone-app.firebaseapp.com\",\n    databaseURL: \"https://pictophone-app.firebaseio.com\",\n    projectId: \"pictophone-app\",\n    storageBucket: 'pictophone-app-drawings',\n    messagingSenderId: \"837882351009\",\n    appId: \"1:837882351009:web:9056a6b26d58fb373ecfe0\"\n}\n\nconst TEST_FB: FirebaseConfig = {\n    apiKey: \"AIzaSyAGXRsAOC3bHfWzbf-Xe6LMEFSu8996yOA\",\n    authDomain: \"pictophone-test.firebaseapp.com\",\n    databaseURL: \"https://pictophone-test.firebaseio.com\",\n    projectId: \"pictophone-test\",\n    storageBucket: \"pictophone-test.appspot.com\",\n    messagingSenderId: \"794693152973\",\n    appId: \"1:794693152973:web:0e0e7c89d77aa30b073984\",\n    measurementId: \"G-TL1FE9GRD6\"\n};\n\nconst TEST_CONFIG: Config = {\n    backendAddr: 'http://localhost:3111',\n    firebase: TEST_FB,\n}\n\nconst PROD_CONFIG: Config = {\n    backendAddr: 'https://api.pictophone.app',\n    firebase: PROD_FB,\n}\n\nconst QA_CONFIG: Config = {\n    backendAddr: 'https://pictophone-be-t2flyr2hcq-ue.a.run.app',\n    firebase: TEST_FB,\n}\n\nexport default function Config(): Config {\n    switch (getEnvironment()) {\n        case 'development':\n            return TEST_CONFIG\n        case 'production':\n            return PROD_CONFIG\n        case 'qa':\n            return QA_CONFIG\n        default:\n            throw new Error('unsupported')\n    }\n}\n","import React, { useRef, useEffect } from 'react'\nimport { Drawing as DrawingModel } from './model/rpc'\n\ntype DrawingProps = {\n    drawing: DrawingModel\n    width: number\n    height: number\n}\n\nfunction scalePath(path: number[], sx: number, sy: number) {\n    const res: number[] = []\n    for (let i = 0; i < path.length; i += 2) {\n        res.push(path[i] * sx, path[i + 1] * sy)\n    }\n    return res\n}\n\nexport const Drawing: React.FC<DrawingProps> = ({ drawing, width, height }) => {\n    const svgRef = useRef<SVGSVGElement>(null)\n\n    useEffect(() => {\n        const e: SVGSVGElement = svgRef.current!\n\n        e.style.width = width + 'px'\n        e.style.height = height + 'px'\n    })\n\n    const scaled: DrawingModel = {\n        kind: 'drawing',\n        paths: drawing.paths.map(path => scalePath(path, width, height))\n    }\n\n    return (\n        <svg ref={svgRef}>\n            {\n                scaled.paths.map((p, idx) =>\n                    <path key={idx}\n                        d={renderPath(p)}\n                        stroke=\"black\"\n                        strokeWidth=\"2\"\n                        fill=\"transparent\" />\n                )\n            }\n        </svg>\n    )\n}\n\nfunction renderPath(p: number[]): string {\n    if (p.length === 0) {\n        return \"\"\n    }\n    if (p.length === 2) {\n        const x = p[0]\n        const y = p[1]\n        return `M ${x} ${y} L ${x + 1} ${y}`\n    }\n    let res = `M ${p[0]} ${p[1]}`\n    for (let idx = 0; idx < p.length; idx += 2) {\n        res += `L ${p[idx]} ${p[idx + 1]}`\n    }\n    return res\n}\n\nexport default Drawing\n","/* tslint:disable */\n// generated by typescript-json-validator\nimport Ajv from 'ajv';\nimport { Drawing, Upload, UploadResponse, Pointer } from './rpc';\nexport const ajv = new Ajv({ \"allErrors\": true, \"coerceTypes\": false, \"format\": \"fast\", \"nullable\": true, \"unicode\": true, \"uniqueItems\": true, \"useDefaults\": true });\n\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n\nexport const Schema = {\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"definitions\": {\n        \"Drawing\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"kind\": {\n                    \"enum\": [\n                        \"drawing\"\n                    ],\n                    \"type\": \"string\"\n                },\n                \"paths\": {\n                    \"items\": {\n                        \"items\": {\n                            \"type\": \"number\"\n                        },\n                        \"type\": \"array\"\n                    },\n                    \"type\": \"array\"\n                }\n            },\n            \"required\": [\n                \"kind\",\n                \"paths\"\n            ],\n            \"type\": \"object\"\n        },\n        \"Pointer\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"actionId\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"actionId\"\n            ],\n            \"type\": \"object\"\n        },\n        \"Upload\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"kind\": {\n                    \"enum\": [\n                        \"drawing\"\n                    ],\n                    \"type\": \"string\"\n                },\n                \"paths\": {\n                    \"items\": {\n                        \"items\": {\n                            \"type\": \"number\"\n                        },\n                        \"type\": \"array\"\n                    },\n                    \"type\": \"array\"\n                }\n            },\n            \"required\": [\n                \"kind\",\n                \"paths\"\n            ],\n            \"type\": \"object\"\n        },\n        \"UploadResponse\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"id\"\n            ],\n            \"type\": \"object\"\n        }\n    }\n};\najv.addSchema(Schema, 'Schema')\nexport function validate(typeName: 'Drawing'): (value: unknown) => Drawing;\nexport function validate(typeName: 'Upload'): (value: unknown) => Upload;\nexport function validate(typeName: 'UploadResponse'): (value: unknown) => UploadResponse;\nexport function validate(typeName: 'Pointer'): (value: unknown) => Pointer;\nexport function validate(typeName: string): (value: unknown) => any {\n    const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);\n    return (value: unknown): any => {\n        if (!validator) {\n            throw new Error(`No validator defined for Schema#/definitions/${typeName}`)\n        }\n\n        const valid = validator(value);\n\n        if (!valid) {\n            throw new Error(\n                'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), { dataVar: typeName }),\n            );\n        }\n\n        return value as any;\n    };\n}\n","import firebase from 'firebase/app'\nimport React, { useState, useEffect } from 'react';\nimport Config from './config'\n\n\nexport const app = firebase.initializeApp(Config().firebase)\n\n// export const FirebaseContext : React.Context<firebase.Firebase> = React.createContext(app);\n","\nimport React, { useEffect, useRef, useState } from 'react'\nimport Canvas, { DraftDrawing } from './Canvas'\nimport Drawing from './Drawing'\nimport { Drawing as DrawingModel } from './model/rpc'\nimport { validate as validateRpc } from './model/rpc.validator'\nimport * as model from './model/1.1'\nimport config from './config'\nimport { app } from './context';\nimport { Value } from './db';\n\nconst storage = app.storage();\n\ntype GameViewProps = {\n    playerGame: model.PlayerGame\n    startGame: () => void\n    submitWord: (word: string) => void\n    submitDrawing: (s: DrawingModel) => void\n}\n\nconst GameView: React.FC<GameViewProps> = ({ playerGame, startGame, submitWord, submitDrawing }) => {\n    const playerList = <div>\n        Players: {\n            playerGame.players.map((p, idx) =>\n                <div key={idx}>{p.displayName}</div>\n            )\n        }\n    </div>\n\n    switch (playerGame.state) {\n        case \"UNSTARTED\":\n            return <div>\n                {playerList}\n                Waiting to start game.\n            <button onClick={startGame}>Start Game</button>\n            </div>\n        case \"FIRST_PROMPT\":\n        case \"WAITING_FOR_PROMPT\":\n        case \"RESPOND_TO_PROMPT\":\n            return <ActiveGame playerGame={playerGame} submitWord={submitWord} submitDrawing={submitDrawing} />\n\n        case \"GAME_OVER\":\n            return <Series serieses={playerGame.series} />\n    }\n}\n\ntype ActiveGameProps = {\n    playerGame: model.BoringPlayerGame | model.RespondToPromptPlayerGame\n    submitWord: (word: string) => void\n    submitDrawing: (s: DrawingModel) => void\n}\n\nconst ActiveGame: React.FC<ActiveGameProps> = ({ playerGame, submitWord, submitDrawing }) => {\n    const initText = ''\n    const initDraftDrawing = {\n        drawing: {\n            kind: 'drawing' as 'drawing',\n            paths: []\n        },\n        inProgress: {},\n    }\n\n    const [textSub, setTextSub] = useState(\"\")\n    const [draftDrawing, setDraftDrawing] = useState<DraftDrawing>(initDraftDrawing)\n\n    const [dims, setDims] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    })\n\n    useEffect(() => {\n        return window.addEventListener('resize', () => setDims({\n            width: window.innerWidth,\n            height: window.innerHeight\n        }))\n    }, [])\n\n    const doTextSub = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        submitWord(textSub)\n        setTextSub(initText)\n    }\n\n    const doDrawingSub = () => {\n        submitDrawing(draftDrawing.drawing)\n        setDraftDrawing(initDraftDrawing)\n    }\n\n    const firstPrompt = <main id=\"game\">\n        <header>Pictophone!</header>\n        <div className=\"instructions\">Come up with a thing!</div>\n        <form onSubmit={doTextSub}>\n            <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </main>\n\n    const waitForPrompt = <main id=\"game\">\n        <header>Pictophone!</header>\n        <div className=\"instructions\">\n            Chill out for a sec while everyone else finishes.\n        </div>\n    </main>\n\n    const canvasHeight1 = dims.height * 0.7\n    const canvasWidth1 = canvasHeight1 * 3 / 4\n    const canvasWidth = Math.min(canvasWidth1, dims.width * 0.95)\n    const canvasHeight = canvasWidth * 4 / 3\n\n    const respond = (playerGame: model.RespondToPromptPlayerGame) =>\n        playerGame.prompt.kind === 'word'\n            ? <main id=\"game\">\n                <div className=\"word-prompt\" >\n                    {playerGame.prompt.word}\n                </div>\n                <Canvas draft={draftDrawing} onChange={setDraftDrawing}\n                    width={canvasWidth} height={canvasHeight} />\n                <button onClick={doDrawingSub}>Submit</button>\n            </main>\n            : <main id=\"game\">\n                <DownloadDrawing drawingId={playerGame.prompt.drawingId}\n                    width={canvasWidth} height={canvasHeight} />\n                <form onSubmit={doTextSub}>\n                    <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n                    <button>Submit</button>\n                </form>\n            </main>\n\n    switch (playerGame.state) {\n        case \"UNSTARTED\":\n            throw new Error(\"wtf\")\n        case \"FIRST_PROMPT\":\n            return firstPrompt\n        case \"WAITING_FOR_PROMPT\":\n            return waitForPrompt\n        case \"RESPOND_TO_PROMPT\":\n            return respond(playerGame)\n    }\n}\n\ntype SeriesProps = {\n    serieses: model.ExportedSeries[]\n}\n\nconst Series: React.FC<SeriesProps> = ({ serieses }) => {\n    return <main id=\"sharing\">\n        <div className=\"series\">\n            Scroll this way -&gt;\n        </div>\n        {\n            serieses.map((series, seriesIdx) => <div key={seriesIdx} className=\"series\">\n                {\n                    series.entries.map((e, eIdx) => <Entry key={eIdx} entry={e} />)\n                }\n            </div>)\n        }\n    </main>\n}\n\nconst Entry: React.FC<{ entry: model.ExportedSeriesEntry }> = ({ entry }) => {\n    const container = useRef<HTMLDivElement>(null)\n    const [dims, setDims] = useState({ width: 0, height: 0 })\n\n    useEffect(() => {\n        setDims({\n            width: container.current!.offsetWidth,\n            height: container.current!.offsetHeight,\n        })\n    }, [])\n\n    if (entry.submission.kind === 'word') {\n        return <div ref={container}\n            className=\"words\">{entry.submission.word}</div>\n    } else {\n        const width = widthForBox(dims.width, dims.height)\n        return <div ref={container} className=\"drawing\">\n            <DownloadDrawing drawingId={entry.submission.drawingId}\n                width={width} height={4 * width / 3} />\n        </div>\n    }\n}\n\nfunction widthForBox(width: number, height: number): number {\n    let widthFromHeight = height * 0.75\n    return Math.min(width, widthFromHeight)\n}\n\n\n\nexport function useDrawing(id: string): Value<DrawingModel> {\n    const [value, setValue] = useState<Value<DrawingModel>>({ state: 'loading' });\n    useEffect(() => {\n        (async (): Promise<void> => {\n            let url: string;\n            try {\n                url = await storage.ref(id).getDownloadURL();\n            } catch (e) {\n                console.log(e)\n                if (e.code === 'storage/object-not-found') {\n                    setValue({\n                        state: 'not_found'\n                    })\n                }\n                return\n            }\n            const res = await fetch(url);\n            console.log(res.status, res);\n            if (res.status === 200) {\n                const d = validateRpc('Upload')(await res.json())\n                setValue({\n                    state: 'ready',\n                    value: d\n                })\n            } else {\n                throw new Error(res.statusText)\n            }\n        })();\n    }, [id])\n    return value\n}\n\ntype DownloadDrawingProps = {\n    drawingId: string\n    width: number\n    height: number\n}\n\nconst DownloadDrawing: React.FC<DownloadDrawingProps> = ({ drawingId, width, height }) => {\n    const drawing = useDrawing(drawingId);\n    switch (drawing.state) {\n        case \"loading\":\n            return <div>Loading...</div>\n        case \"not_found\":\n            return <div>Not found :(</div>\n        case \"ready\":\n            return <Drawing drawing={drawing.value} width={width} height={height} />\n\n    }\n\n\n}\nexport default GameView\n","/* tslint:disable */\n// generated by typescript-json-validator\nimport Ajv from 'ajv';\nimport { JoinGameAction, StartGameAction, MakeMoveAction, Submission, BoringPlayerGame, RespondToPromptPlayerGame, FinishedPlayerGame, ExportedSeries, ExportedSeriesEntry, ExportedPlayer, PlayerGame, GameList } from './1.1';\nexport const ajv = new Ajv({ \"allErrors\": true, \"coerceTypes\": false, \"format\": \"fast\", \"nullable\": true, \"unicode\": true, \"uniqueItems\": true, \"useDefaults\": true });\n\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n\nexport const Schema = {\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"definitions\": {\n        \"BoringPlayerGame\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"players\": {\n                    \"items\": {\n                        \"$ref\": \"#/definitions/ExportedPlayer\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"state\": {\n                    \"enum\": [\n                        \"FIRST_PROMPT\",\n                        \"UNSTARTED\",\n                        \"WAITING_FOR_PROMPT\"\n                    ],\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"players\",\n                \"state\"\n            ],\n            \"type\": \"object\"\n        },\n        \"ExportedPlayer\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"displayName\": {\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"displayName\",\n                \"id\"\n            ],\n            \"type\": \"object\"\n        },\n        \"ExportedSeries\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"entries\": {\n                    \"items\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                            \"playerId\": {\n                                \"type\": \"string\"\n                            },\n                            \"submission\": {\n                                \"anyOf\": [\n                                    {\n                                        \"defaultProperties\": [\n                                        ],\n                                        \"properties\": {\n                                            \"kind\": {\n                                                \"enum\": [\n                                                    \"word\"\n                                                ],\n                                                \"type\": \"string\"\n                                            },\n                                            \"word\": {\n                                                \"maxLength\": 1024,\n                                                \"minLength\": 1,\n                                                \"type\": \"string\"\n                                            }\n                                        },\n                                        \"required\": [\n                                            \"kind\",\n                                            \"word\"\n                                        ],\n                                        \"type\": \"object\"\n                                    },\n                                    {\n                                        \"defaultProperties\": [\n                                        ],\n                                        \"properties\": {\n                                            \"drawingId\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"kind\": {\n                                                \"enum\": [\n                                                    \"drawing\"\n                                                ],\n                                                \"type\": \"string\"\n                                            }\n                                        },\n                                        \"required\": [\n                                            \"drawingId\",\n                                            \"kind\"\n                                        ],\n                                        \"type\": \"object\"\n                                    }\n                                ]\n                            }\n                        },\n                        \"required\": [\n                            \"playerId\",\n                            \"submission\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                }\n            },\n            \"required\": [\n                \"entries\"\n            ],\n            \"type\": \"object\"\n        },\n        \"ExportedSeriesEntry\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"playerId\": {\n                    \"type\": \"string\"\n                },\n                \"submission\": {\n                    \"anyOf\": [\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"word\"\n                                    ],\n                                    \"type\": \"string\"\n                                },\n                                \"word\": {\n                                    \"maxLength\": 1024,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"kind\",\n                                \"word\"\n                            ],\n                            \"type\": \"object\"\n                        },\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"drawingId\": {\n                                    \"type\": \"string\"\n                                },\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"drawing\"\n                                    ],\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"drawingId\",\n                                \"kind\"\n                            ],\n                            \"type\": \"object\"\n                        }\n                    ]\n                }\n            },\n            \"required\": [\n                \"playerId\",\n                \"submission\"\n            ],\n            \"type\": \"object\"\n        },\n        \"FinishedPlayerGame\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"players\": {\n                    \"items\": {\n                        \"$ref\": \"#/definitions/ExportedPlayer\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"series\": {\n                    \"items\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                            \"entries\": {\n                                \"items\": {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                        \"playerId\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"submission\": {\n                                            \"anyOf\": [\n                                                {\n                                                    \"defaultProperties\": [\n                                                    ],\n                                                    \"properties\": {\n                                                        \"kind\": {\n                                                            \"enum\": [\n                                                                \"word\"\n                                                            ],\n                                                            \"type\": \"string\"\n                                                        },\n                                                        \"word\": {\n                                                            \"maxLength\": 1024,\n                                                            \"minLength\": 1,\n                                                            \"type\": \"string\"\n                                                        }\n                                                    },\n                                                    \"required\": [\n                                                        \"kind\",\n                                                        \"word\"\n                                                    ],\n                                                    \"type\": \"object\"\n                                                },\n                                                {\n                                                    \"defaultProperties\": [\n                                                    ],\n                                                    \"properties\": {\n                                                        \"drawingId\": {\n                                                            \"type\": \"string\"\n                                                        },\n                                                        \"kind\": {\n                                                            \"enum\": [\n                                                                \"drawing\"\n                                                            ],\n                                                            \"type\": \"string\"\n                                                        }\n                                                    },\n                                                    \"required\": [\n                                                        \"drawingId\",\n                                                        \"kind\"\n                                                    ],\n                                                    \"type\": \"object\"\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    \"required\": [\n                                        \"playerId\",\n                                        \"submission\"\n                                    ],\n                                    \"type\": \"object\"\n                                },\n                                \"type\": \"array\"\n                            }\n                        },\n                        \"required\": [\n                            \"entries\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"state\": {\n                    \"enum\": [\n                        \"GAME_OVER\"\n                    ],\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"players\",\n                \"series\",\n                \"state\"\n            ],\n            \"type\": \"object\"\n        },\n        \"GameList\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"gameIds\": {\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                }\n            },\n            \"required\": [\n                \"gameIds\"\n            ],\n            \"type\": \"object\"\n        },\n        \"JoinGameAction\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"gameId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                },\n                \"kind\": {\n                    \"enum\": [\n                        \"join_game\"\n                    ],\n                    \"type\": \"string\"\n                },\n                \"playerDisplayName\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"type\": \"string\"\n                },\n                \"playerId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerDisplayName\",\n                \"playerId\"\n            ],\n            \"type\": \"object\"\n        },\n        \"MakeMoveAction\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"gameId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                },\n                \"kind\": {\n                    \"enum\": [\n                        \"make_move\"\n                    ],\n                    \"type\": \"string\"\n                },\n                \"playerId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                },\n                \"submission\": {\n                    \"anyOf\": [\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"word\"\n                                    ],\n                                    \"type\": \"string\"\n                                },\n                                \"word\": {\n                                    \"maxLength\": 1024,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"kind\",\n                                \"word\"\n                            ],\n                            \"type\": \"object\"\n                        },\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"drawingId\": {\n                                    \"type\": \"string\"\n                                },\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"drawing\"\n                                    ],\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"drawingId\",\n                                \"kind\"\n                            ],\n                            \"type\": \"object\"\n                        }\n                    ]\n                }\n            },\n            \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\",\n                \"submission\"\n            ],\n            \"type\": \"object\"\n        },\n        \"PlayerGame\": {\n            \"anyOf\": [\n                {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                        \"players\": {\n                            \"items\": {\n                                \"$ref\": \"#/definitions/ExportedPlayer\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"state\": {\n                            \"enum\": [\n                                \"FIRST_PROMPT\",\n                                \"UNSTARTED\",\n                                \"WAITING_FOR_PROMPT\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"players\",\n                        \"state\"\n                    ],\n                    \"type\": \"object\"\n                },\n                {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                        \"players\": {\n                            \"items\": {\n                                \"$ref\": \"#/definitions/ExportedPlayer\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"prompt\": {\n                            \"anyOf\": [\n                                {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                        \"kind\": {\n                                            \"enum\": [\n                                                \"word\"\n                                            ],\n                                            \"type\": \"string\"\n                                        },\n                                        \"word\": {\n                                            \"maxLength\": 1024,\n                                            \"minLength\": 1,\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"required\": [\n                                        \"kind\",\n                                        \"word\"\n                                    ],\n                                    \"type\": \"object\"\n                                },\n                                {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                        \"drawingId\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"kind\": {\n                                            \"enum\": [\n                                                \"drawing\"\n                                            ],\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"required\": [\n                                        \"drawingId\",\n                                        \"kind\"\n                                    ],\n                                    \"type\": \"object\"\n                                }\n                            ]\n                        },\n                        \"state\": {\n                            \"enum\": [\n                                \"RESPOND_TO_PROMPT\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"players\",\n                        \"prompt\",\n                        \"state\"\n                    ],\n                    \"type\": \"object\"\n                },\n                {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                        \"players\": {\n                            \"items\": {\n                                \"$ref\": \"#/definitions/ExportedPlayer\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"series\": {\n                            \"items\": {\n                                \"defaultProperties\": [\n                                ],\n                                \"properties\": {\n                                    \"entries\": {\n                                        \"items\": {\n                                            \"defaultProperties\": [\n                                            ],\n                                            \"properties\": {\n                                                \"playerId\": {\n                                                    \"type\": \"string\"\n                                                },\n                                                \"submission\": {\n                                                    \"anyOf\": [\n                                                        {\n                                                            \"defaultProperties\": [\n                                                            ],\n                                                            \"properties\": {\n                                                                \"kind\": {\n                                                                    \"enum\": [\n                                                                        \"word\"\n                                                                    ],\n                                                                    \"type\": \"string\"\n                                                                },\n                                                                \"word\": {\n                                                                    \"maxLength\": 1024,\n                                                                    \"minLength\": 1,\n                                                                    \"type\": \"string\"\n                                                                }\n                                                            },\n                                                            \"required\": [\n                                                                \"kind\",\n                                                                \"word\"\n                                                            ],\n                                                            \"type\": \"object\"\n                                                        },\n                                                        {\n                                                            \"defaultProperties\": [\n                                                            ],\n                                                            \"properties\": {\n                                                                \"drawingId\": {\n                                                                    \"type\": \"string\"\n                                                                },\n                                                                \"kind\": {\n                                                                    \"enum\": [\n                                                                        \"drawing\"\n                                                                    ],\n                                                                    \"type\": \"string\"\n                                                                }\n                                                            },\n                                                            \"required\": [\n                                                                \"drawingId\",\n                                                                \"kind\"\n                                                            ],\n                                                            \"type\": \"object\"\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            \"required\": [\n                                                \"playerId\",\n                                                \"submission\"\n                                            ],\n                                            \"type\": \"object\"\n                                        },\n                                        \"type\": \"array\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"entries\"\n                                ],\n                                \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"state\": {\n                            \"enum\": [\n                                \"GAME_OVER\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"players\",\n                        \"series\",\n                        \"state\"\n                    ],\n                    \"type\": \"object\"\n                }\n            ]\n        },\n        \"RespondToPromptPlayerGame\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"players\": {\n                    \"items\": {\n                        \"$ref\": \"#/definitions/ExportedPlayer\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"prompt\": {\n                    \"anyOf\": [\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"word\"\n                                    ],\n                                    \"type\": \"string\"\n                                },\n                                \"word\": {\n                                    \"maxLength\": 1024,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"kind\",\n                                \"word\"\n                            ],\n                            \"type\": \"object\"\n                        },\n                        {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                                \"drawingId\": {\n                                    \"type\": \"string\"\n                                },\n                                \"kind\": {\n                                    \"enum\": [\n                                        \"drawing\"\n                                    ],\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"drawingId\",\n                                \"kind\"\n                            ],\n                            \"type\": \"object\"\n                        }\n                    ]\n                },\n                \"state\": {\n                    \"enum\": [\n                        \"RESPOND_TO_PROMPT\"\n                    ],\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"players\",\n                \"prompt\",\n                \"state\"\n            ],\n            \"type\": \"object\"\n        },\n        \"StartGameAction\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n                \"gameId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                },\n                \"kind\": {\n                    \"enum\": [\n                        \"start_game\"\n                    ],\n                    \"type\": \"string\"\n                },\n                \"playerId\": {\n                    \"maxLength\": 1024,\n                    \"minLength\": 1,\n                    \"pattern\": \"^[a-zA-Z0-9_-]*$\",\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n            ],\n            \"type\": \"object\"\n        },\n        \"Submission\": {\n            \"else\": {\n                \"else\": {\n                    \"properties\": {\n                        \"kind\": {\n                            \"enum\": [\n                                \"word\",\n                                \"drawing\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"kind\"\n                    ]\n                },\n                \"if\": {\n                    \"properties\": {\n                        \"kind\": {\n                            \"enum\": [\n                                \"drawing\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"kind\"\n                    ]\n                },\n                \"then\": {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                        \"drawingId\": {\n                            \"type\": \"string\"\n                        },\n                        \"kind\": {\n                            \"enum\": [\n                                \"drawing\"\n                            ],\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"drawingId\",\n                        \"kind\"\n                    ],\n                    \"type\": \"object\"\n                }\n            },\n            \"if\": {\n                \"properties\": {\n                    \"kind\": {\n                        \"enum\": [\n                            \"word\"\n                        ],\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"kind\"\n                ]\n            },\n            \"then\": {\n                \"defaultProperties\": [\n                ],\n                \"properties\": {\n                    \"kind\": {\n                        \"enum\": [\n                            \"word\"\n                        ],\n                        \"type\": \"string\"\n                    },\n                    \"word\": {\n                        \"maxLength\": 1024,\n                        \"minLength\": 1,\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"kind\",\n                    \"word\"\n                ],\n                \"type\": \"object\"\n            }\n        }\n    }\n};\najv.addSchema(Schema, 'Schema')\nexport function validate(typeName: 'JoinGameAction'): (value: unknown) => JoinGameAction;\nexport function validate(typeName: 'StartGameAction'): (value: unknown) => StartGameAction;\nexport function validate(typeName: 'MakeMoveAction'): (value: unknown) => MakeMoveAction;\nexport function validate(typeName: 'Submission'): (value: unknown) => Submission;\nexport function validate(typeName: 'BoringPlayerGame'): (value: unknown) => BoringPlayerGame;\nexport function validate(typeName: 'RespondToPromptPlayerGame'): (value: unknown) => RespondToPromptPlayerGame;\nexport function validate(typeName: 'FinishedPlayerGame'): (value: unknown) => FinishedPlayerGame;\nexport function validate(typeName: 'ExportedSeries'): (value: unknown) => ExportedSeries;\nexport function validate(typeName: 'ExportedSeriesEntry'): (value: unknown) => ExportedSeriesEntry;\nexport function validate(typeName: 'ExportedPlayer'): (value: unknown) => ExportedPlayer;\nexport function validate(typeName: 'PlayerGame'): (value: unknown) => PlayerGame;\nexport function validate(typeName: 'GameList'): (value: unknown) => GameList;\nexport function validate(typeName: string): (value: unknown) => any {\n    const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);\n    return (value: unknown): any => {\n        if (!validator) {\n            throw new Error(`No validator defined for Schema#/definitions/${typeName}`)\n        }\n\n        const valid = validator(value);\n\n        if (!valid) {\n            throw new Error(\n                'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), { dataVar: typeName }),\n            );\n        }\n\n        return value as any;\n    };\n}\n","/**\n * @fileoverview gRPC-Web generated client stub for pictophone.v0_1\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\nimport * as grpcWeb from 'grpc-web';\n\nimport * as pictophone_v0_1_pb from '../pictophone/v0_1_pb';\n\n\nexport class PictophoneClient {\n  client_: grpcWeb.AbstractClientBase;\n  hostname_: string;\n  credentials_: null | { [index: string]: string; };\n  options_: null | { [index: string]: any; };\n\n  constructor (hostname: string,\n               credentials?: null | { [index: string]: string; },\n               options?: null | { [index: string]: any; }) {\n    if (!options) options = {};\n    if (!credentials) credentials = {};\n    options['format'] = 'text';\n\n    this.client_ = new grpcWeb.GrpcWebClientBase(options);\n    this.hostname_ = hostname;\n    this.credentials_ = credentials;\n    this.options_ = options;\n  }\n\n  methodInfoJoinGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.JoinGameResponse,\n    (request: pictophone_v0_1_pb.JoinGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.JoinGameResponse.deserializeBinary\n  );\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.JoinGameResponse>;\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.JoinGameResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.JoinGameResponse>;\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.JoinGameResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/JoinGame',\n        request,\n        metadata || {},\n        this.methodInfoJoinGame,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/JoinGame',\n    request,\n    metadata || {},\n    this.methodInfoJoinGame);\n  }\n\n  methodInfoStartGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.StartGameResponse,\n    (request: pictophone_v0_1_pb.StartGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.StartGameResponse.deserializeBinary\n  );\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.StartGameResponse>;\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.StartGameResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.StartGameResponse>;\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.StartGameResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/StartGame',\n        request,\n        metadata || {},\n        this.methodInfoStartGame,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/StartGame',\n    request,\n    metadata || {},\n    this.methodInfoStartGame);\n  }\n\n  methodInfoMakeMove = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.MakeMoveResponse,\n    (request: pictophone_v0_1_pb.MakeMoveRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.MakeMoveResponse.deserializeBinary\n  );\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.MakeMoveResponse>;\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.MakeMoveResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.MakeMoveResponse>;\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.MakeMoveResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/MakeMove',\n        request,\n        metadata || {},\n        this.methodInfoMakeMove,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/MakeMove',\n    request,\n    metadata || {},\n    this.methodInfoMakeMove);\n  }\n\n  methodInfoGetGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.GetGameResponse,\n    (request: pictophone_v0_1_pb.GetGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.GetGameResponse.deserializeBinary\n  );\n\n  getGame(\n    request: pictophone_v0_1_pb.GetGameRequest,\n    metadata?: grpcWeb.Metadata) {\n    return this.client_.serverStreaming(\n      this.hostname_ +\n        '/pictophone.v0_1.Pictophone/GetGame',\n      request,\n      metadata || {},\n      this.methodInfoGetGame);\n  }\n\n}\n\n","\nexport type Operator<A,B> = (a: A) => B;\nexport type WatchableOperator<A,B> = Operator<Watchable<A>, Watchable<B>>;\n\nexport interface Watchable<T> {\n    value: T,\n    next: Promise<Watchable<T>>\n}\n\nexport function fromConstant<T>(value: T):Watchable<T> {\n    return {\n        value,\n        next: Promise.race([]),\n    }\n}\n\nexport function fromIterable<T>(iter: AsyncIterable<T>, init: T): Watchable<T> {\n    return fromIterator(iter[Symbol.asyncIterator](), init);\n}\n\nexport function fromPromise<T>(promise: Promise<T>, init: T): Watchable<T> {\n    return {\n        value: init,\n        next: promise.then(fromConstant),\n    }\n}\n\n\nexport function fromIterator<T>(iter: AsyncIterator<T>, init: T): Watchable<T> {\n    return {\n        value: init,\n        next: (async (): Promise<Watchable<T>> => {\n            let next = await iter.next();\n            if (next.done) {\n                return { value: init, next: Promise.race([]) }\n            } else {\n                return fromIterator(iter, next.value);\n            }\n        })(),\n    }\n}\nexport function map<A, B>(fn: (a: A) => B): WatchableOperator<A,B> {\n    return outer => ({\n        value: fn(outer.value),\n        next: (async () => {\n            return map(fn)(await outer.next);\n        })(),\n    })\n}\n\n\nexport function switchMap<A, B>(fn: (a: A) => Watchable<B>): WatchableOperator<A,B> {\n    const helper = (outer: Watchable<A>, inner: Watchable<B>): Watchable<B> => ({\n        value: inner.value,\n        next: (async () => {\n            type LR = { side: 'outer', value: Watchable<A> } | { side: 'inner', value: Watchable<B> };\n\n            let next: LR = await Promise.race([\n                (async () => ({ side: 'outer', value: await outer.next } as LR))(),\n                (async () => ({ side: 'inner', value: await inner.next } as LR))()]);\n            if (next.side === 'outer') {\n                return helper(next.value, fn(next.value.value));\n            } else {\n                return helper(outer, next.value);\n            }\n\n        })()\n    });\n    return outer=>helper(outer, fn(outer.value));\n    // let inner = fn(outer.value);\n    // return {\n    //     value: inner.value,\n    //     next: (async()=>{\n    //         type LR = { side: 'outer', value: Watchable<A> } | { side: 'inner', value: Watchable<B> };\n\n    //         let next: LR = await Promise.race([\n    //             (async () => ({ side: 'outer', value: await outer.next } as LR))(),\n    //             (async () => ({ side: 'inner', value: await inner.next } as LR))()]);\n    //         if (next.side === 'outer') {\n    //             return switchMap(next.value, fn);\n    //         } else {\n\n    //         }\n\n    //     })()\n    // }\n\n    // type LR<L, R> = { side: 'left', value: L } | { side: 'right', value: R };\n    // type LRT = LR<IteratorResult<A>, IteratorResult<B>>;\n    // let outerIter = iter[Symbol.asyncIterator]();\n    // let innerIter: AsyncIterator<B> | null = null;\n    // let outerNext: Promise<IteratorResult<A>> = outerIter.next();\n    // let innerNext: Promise<IteratorResult<B>> = Promise.race([]);\n\n    // while (true) {\n    //     let next: LRT = await Promise.race([\n    //         (async () => ({ side: 'left', value: await outerNext } as LRT))(),\n    //         (async () => ({ side: 'right', value: await innerNext } as LRT))()]);\n    //     if (next.side === 'left') {\n    //         if (next.value.done) {\n    //             return;\n    //         } else {\n    //             outerNext = outerIter.next();\n    //             innerIter = fn(next.value.value)[Symbol.asyncIterator]();\n    //             innerNext = innerIter.next();\n    //         }\n    //     } else {\n    //         if (next.value.done) {\n    //             innerIter = null;\n    //             innerNext = Promise.race([]);\n    //         } else {\n    //             innerNext = innerIter!.next();\n    //             yield next.value.value;\n    //         }\n    //     }\n    // }\n}\n\n// export function scan<Acc, Val>(fn: (acc: Acc, val:Val) => Acc, seed: Acc): WatchableOperator<Val, Acc> {\n//     const helper = (values : Watchable<Val>, acc: Acc): Watchable<Acc> => {\n//         return  {\n//             value: acc,\n//             next: (async()=>{\n//                 let nextVal = await values.next;\n//                 return helper(nextVal, fn(acc, ))\n//             })(),\n//         }\n//     };\n\n//     return outer=>{\n//         return\n//     };\n// }","\nimport * as watch from './watch';\n// import {fromEvent} from 'ix/asynciterable/fromevent';\nimport * as ixa from 'ix/asynciterable';\nimport * as ixaop from 'ix/asynciterable/operators';\n\nexport type Location = Homepage | Game | Unknown\n\nexport interface Homepage {\n    page: 'home'\n}\n\nexport interface Game {\n    page: 'game'\n    gameId: string,\n    playerId: string,\n}\n\nexport interface Unknown {\n    page: 'unknown'\n}\n\nexport class Nav {\n    // public location : \n    // private current: Location = { page: 'home' };\n    private sink = new ixa.AsyncSink<Location>();\n\n    watch(): watch.Watchable<Location> {\n        // let iter = ixa.fromEvent<PopStateEvent>(window, 'popstate').pipe(\n        //     ixaop.map(e => ({\n        //     }))\n        // );\n        return watch.fromIterator(this.sink, parseLocation(window.location.pathname));\n    }\n\n    push(location: Location) {\n        // this.current = location;\n        window.history.pushState({}, '', serializeLocation(location))\n        this.sink.write(parseLocation(serializeLocation(location)));\n    }\n}\n\nfunction parseLocation(pathname : string): Location {\n    const segments = pathname.split('/');\n    console.log(segments)\n    if (segments.length === 2 && segments[1] === '') {\n        return {page: 'home'}\n    }\n    if (segments.length === 5 && segments[1] === 'games' && segments[3] === 'player') {\n        return {page: 'game', gameId: segments[2], playerId: segments[4]}\n    }\n    return {page: 'unknown'}\n}\n\nfunction serializeLocation(location : Location): string {\n    switch (location.page) {\n        case 'home':\n            return '/'\n        case 'game':\n            return `/games/${location.gameId}/player/${location.playerId}`\n        case 'unknown':\n            return '/404'\n    }\n}","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\nimport React, { useEffect, useState } from 'react'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\nimport { BrowserRouter as Router, Redirect, Route, Switch, useLocation, useParams } from \"react-router-dom\"\nimport './App.css'\nimport * as base from './base'\nimport Config from './config'\nimport GameView from './GameView'\nimport Home from './Home'\n// import { Action } from './model/1.1'\nimport * as model from './model/1.1'\nimport * as db from './db';\nimport { validate as validateModel } from './model/1.1.validator'\nimport { Drawing, Upload, UploadResponse } from './model/rpc'\nimport { validate as validateRpc } from './model/rpc.validator'\nimport { app } from './context';\nimport { useValue } from './db';\nimport * as tables from './tables';\nimport { sha256 } from 'js-sha256';\nimport { Channel } from 'queueable';\n\nimport * as pb from './gen/pictophone/v0_1_pb';\nimport * as pb2 from './gen/pictophone/V0_1ServiceClientPb';\n\nimport { Watchable, fromIterable } from './watch'\nimport * as watch from './watch'\nimport * as ixa from 'ix/asynciterable';\nimport * as ixaop from 'ix/asynciterable/operators';\nimport { pipeWith } from 'pipe-ts';\nimport { useForm } from \"react-hook-form\";\nimport { ClientReadableStream } from 'grpc-web'\nimport * as nav from './navigation';\n\n\nexport interface AppConfig {\n    server: pb2.PictophoneClient\n}\n\nexport type UserAction = {\n    kind: 'increment'\n};\n\n\ninterface WatchGlobals {\n    authInfo: Watchable<AuthInfo>\n    location: Watchable<nav.Location>\n}\n\ninterface Globals {\n    authInfo: AuthInfo\n    location: nav.Location\n}\n\nfunction flattenGlobals(input: Watchable<WatchGlobals>): Watchable<Globals> {\n    const f = (w: WatchGlobals): Watchable<Globals> => ({\n        value: {\n            authInfo: w.authInfo.value,\n            location: w.location.value,\n        },\n        next: Promise.race([w.authInfo.next.then(authInfo => f({\n            authInfo,\n            location: w.location\n        })),\n        w.location.next.then(location => f({\n            authInfo: w.authInfo,\n            location,\n        }))])\n    });\n\n    return pipeWith(input, watch.switchMap(input => f(input)));\n\n    // pipeWith(input.authInfo,\n    // watch.map(authInfo => ({ authInfo })))));\n}\n\nfunction getGame(client: pb2.PictophoneClient, gameId: string, playerId: string): Watchable<pb.GetGameResponse.AsObject | null> {\n    const req = new pb.GetGameRequest();\n    req.setGameId(gameId);\n    req.setPlayerId(playerId);\n    const resp = client.getGame(req) as ClientReadableStream<pb.GetGameResponse>;\n\n    const sink = new ixa.AsyncSink<pb.GetGameResponse.AsObject>();\n    resp.on(\"error\", e => console.log(\"TODO: handle this\", e));\n    resp.on(\"data\", d => {console.log(\"data\", d); sink.write(d.toObject())}\n    );\n    return watch.fromIterable(sink, null);\n}\n\n\nasync function doAction(client: pb2.PictophoneClient): Promise<void> {\n    const req = new pb.JoinGameRequest();\n    req.setGameId(\"asdf\");\n    const resp = await client.joinGame(req, null);\n    console.log(\"RESPONSE: \", resp);\n\n}\n\ntype Action = {\n    kind: \"navigate\",\n    location: nav.Location\n} | {\n    kind: \"join\",\n    gameId: string,\n    playerId: string,\n} | {\n    kind: \"start\",\n    gameId: string,\n    playerId: string,\n} | {\n    kind: 'play'\n    gameId: string,\n    playerId: string,\n    etag: number,\n};\n\n\n// export function App({}: AppConfig): Watchable<JSX.Element> {\n//     const channel = new Channel();\n//     return {\n//         wait:() => Promise.race([]),\n//         value:() => <div>Check It</div>\n//     };\n// }\nexport function App({ server }: AppConfig): Watchable<JSX.Element> {\n    // doAction(server).then(()=> console.log(\"DONE\"));\n\n    const navigation = new nav.Nav();\n\n    const authInfoPromise: Promise<AuthInfo> = new Promise((resolve, reject) => auth.onAuthStateChanged((user: firebase.User | null) => resolve({ ready: true, user })));;\n    const globals: Watchable<WatchGlobals> = watch.fromConstant({\n        authInfo: watch.fromPromise(authInfoPromise, { ready: false }),\n        location: navigation.watch(),\n    });\n\n    const channel = new Channel<nav.Location>();\n    const states: Watchable<ViewData> = pipeWith(globals, flattenGlobals, watch.switchMap(globals => {\n        if (!globals.authInfo.ready) {\n            return watch.fromConstant({ state: 'LOADING' })\n        }\n        if (globals.authInfo.user === null) {\n            return watch.fromConstant({ state: 'SIGNED_OUT' })\n        }\n\n        return flatten(integrate(server)(globals.location))\n        // pipeWith(globals, watch.mapintegrate(server))\n        // const user = globals.authInfo.user;\n        // const initState: nav.Location = { page: 'home' };\n        // const states = fromIterable(ixa.from(channel).pipe(\n        //     ixaop.scan({ callback: integrate(server), seed: initState }),\n        // ), initState);\n        // return pipeWith(states, watch.switchMap(s => flatten(user, globals.location)));\n    })\n    );\n\n    const dispatch = (a: Action):void => {\n        switch (a.kind) {\n            case 'navigate':\n                navigation.push(a.location);\n                break;\n                case 'join':{\n                    const req = new pb.JoinGameRequest();\n                    req.setGameId(a.gameId);\n                    req.setPlayerId(a.playerId);\n                    server.joinGame(req, null).then(\n                        resp=>\n                    console.log(\"RESPONSE: \", resp));\n                    break\n                }\n                case 'start':{\n                    const req = new pb.StartGameRequest();\n                    req.setGameId(a.gameId);\n                    req.setPlayerId(a.playerId);\n                    server.startGame(req, null).then(\n                        resp=>\n                    console.log(\"RESPONSE: \", resp));\n                    break\n                }\n                case 'play':{\n                    const req = new pb.MakeMoveRequest();\n                    req.setGameId(a.gameId);\n                    req.setPlayerId(a.playerId);\n                    req.setEtag(a.etag)\n                    server.makeMove(req, null).then(\n                        resp=>\n                    console.log(\"RESPONSE: \", resp));\n                    break\n                }\n        }\n    };\n\n    return pipeWith(states, watch.map(s => <View s={s} dispatch={dispatch} />));\n\n\n\n    // return switchMap(states, );\n    // yield ;\n    // return {\n    //     wait:() => Promise.race([]),\n    //     value:() => \n\n    // };\n}\n\n// type Intent = {\n//     kind: 'LIST_GAMES'\n// } | {\n//     kind: 'SHOW_GAME'\n//     gameId: string,\n\n// };\n\ntype State = {\n    kind: 'LIST_GAMES'\n} | {\n    kind: 'SHOW_GAME'\n    gameId: string,\n    playerId: string,\n    game: Watchable<pb.GetGameResponse.AsObject | null>,\n};\n\n// function integrate(server: pb2.PictophoneClient) {\n//     return function impl(state: State, action: Intent): State {\n//         switch (action.kind) {\n//             case 'LIST_GAMES':\n//                 return {\n//                     kind: 'LIST_GAMES'\n//                 }\n//             case 'SHOW_GAME':\n//                 return {\n//                     kind: 'SHOW_GAME',\n//                     gameId: action.gameId,\n//                     gameText: pipeWith(getGame(server, action.gameId),\n//                         watch.map(maybeResp => JSON.stringify(maybeResp))),\n//                 }\n//         }\n//     }\n\n// }\n\n\nfunction integrate(server: pb2.PictophoneClient) {\n    return function impl(location: nav.Location): State {\n        switch (location.page) {\n            case 'home':\n                return {\n                    kind: 'LIST_GAMES'\n                }\n            case 'game':\n                return {\n                    kind: 'SHOW_GAME',\n                    gameId: location.gameId,\n                    playerId: location.playerId,\n                    game: getGame(server, location.gameId, location.playerId),\n                }\n                case 'unknown':\n                    throw new Error(\"blah\")\n        }\n    }\n\n}\n\ntype ViewData = {\n    state: 'LOADING'\n} | {\n    state: 'SIGNED_OUT'\n} | {\n    state: 'LIST_GAMES'\n} | {\n    state: 'SHOW_GAME'\n    gameId: string\n    playerId: string\n    game: pb.GetGameResponse.AsObject | null\n};\n\nfunction flatten(gs: State): Watchable<ViewData> {\n    switch (gs.kind) {\n        case 'LIST_GAMES':\n            return watch.fromConstant({ state: 'LIST_GAMES' });\n        case 'SHOW_GAME':\n            return pipeWith(gs.game,\n                watch.map(game => ({ state: 'SHOW_GAME', gameId: gs.gameId, playerId: gs.playerId, game })));\n    }\n}\n\ninterface CommonProps {\n    dispatch: (action: Action) => void\n}\n\ninterface ViewProps {\n    s: ViewData\n    // navigate: (location: nav.Location) => void\n    dispatch: (action: Action) => void\n}\n\nconst View: React.FC<ViewProps> = ({ s, dispatch }) => {\n    switch (s.state) {\n        case 'LOADING': return <div>Loading...</div>;\n        case 'SIGNED_OUT': return <SignInPage />;\n        case 'LIST_GAMES': return <ListGames dispatch={dispatch}></ListGames>;\n        case 'SHOW_GAME': return <Game gameId={s.gameId} playerId={s.playerId} game={s.game} dispatch={dispatch}></Game>;\n    }\n};\n\n\nconst ListGames: React.FC<CommonProps> = ({ dispatch }) => {\n    type Inputs = {\n        gameId: string,\n        playerId: string,\n    };\n    const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n    const { register: joinRegister, handleSubmit: joinHandleSubmit } = useForm<Inputs>();\n    const onSubmit = (i: Inputs) =>\n        dispatch({kind: \"navigate\", location: { page: 'game', ...i }});\n    const onJoin = (i: Inputs) => {\n        dispatch({kind: \"join\", ...i });\n    };\n    return <React.Fragment>\n        <h1>Go to a game</h1>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <label>Game Id: <input name=\"gameId\" required ref={register} /></label>\n            <label>Player Id: <input name=\"playerId\" required ref={register} /></label>\n            <button>Submit</button>\n        </form>\n\n        <h1>Join a game</h1>\n        <form onSubmit={joinHandleSubmit(onJoin)}>\n            <label>Game Id: <input name=\"gameId\" required ref={joinRegister} /></label>\n            <label>Player Id: <input name=\"playerId\" required ref={joinRegister} /></label>\n            <button>Submit</button>\n        </form>\n\n    </React.Fragment>\n};\n\ninterface GameProps extends CommonProps {\n    gameId: string\n    playerId: string\n    game: pb.GetGameResponse.AsObject | null\n}\n\nconst Game: React.FC<GameProps> = ({ gameId, playerId, game, dispatch }) => {\n    // type Inputs = {\n    //     gameId: string\n    // };\n    // const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n    // const onSubmit = ({gameId}: Inputs) => \n    //     dispatch({kind: 'SHOW_GAME', gameId});\n    if (!game) {\n        return <React.Fragment>\n        <h1>Game {gameId}</h1>\n        <pre>Loading</pre>\n        </React.Fragment>\n\n    }\n\n    if (!game.game) {\n        console.log(game);\n        return <React.Fragment>\n        <h1>Game {gameId}</h1>\n        <pre>{JSON.stringify(game)}</pre>\n        </React.Fragment>\n    }\n\n    let g = game.game;\n    if (g.unstarted) {\n        return <React.Fragment>\n            <h1>Game {gameId}</h1>\n            <pre>\n                Players: {JSON.stringify(g.playerIdsList)}\n            </pre>\n            <button onClick={() => dispatch({kind: 'start', gameId, playerId})}>Start Game</button>\n        </React.Fragment>\n    } else if (g.started) {\n        let etag= g.started.etag;\n        return <React.Fragment>\n        <h1>Game {gameId}</h1>\n        <pre>Players: {JSON.stringify(g.playerIdsList)}</pre>\n            <pre>Mistakes: {g.started.numMistakes}</pre>\n            <pre>Round: {g.started.roundNum}</pre>\n            <pre>Already played: {JSON.stringify(g.started.numbersPlayedList)}</pre>\n            <pre>Your hand: {JSON.stringify(g.started.handList)}</pre>\n            <button onClick={() => dispatch({kind: 'play', gameId, playerId, etag})}>Play</button>\n        <pre>\n            All: {JSON.stringify(g)}\n        </pre>\n\n    </React.Fragment>\n    } else {\n\n        return <React.Fragment>\n        <h1>Game {gameId}</h1>\n        <pre>Error: {JSON.stringify(game)}</pre>\n        </React.Fragment>\n    }\n\n   \n};\n\n// const app = firebase.initializeApp(Config().firebase)\nconst auth = app.auth()\nconst storage = app.storage()\n\nconst uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n    }\n}\n\nconst SignInPage: React.FC = () => {\n    return <React.Fragment>\n        <h1>Hey it's Pictophone!</h1>\n        <p>Care to sign in?</p>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n    </React.Fragment>\n}\n\ntype GamePageProps = {\n    playerId: string\n    dispatch: base.Dispatch\n}\n\nasync function getPlayerGame(playerId: string, gameId: string): Promise<model.PlayerGame> {\n    const fetched = await fetch(`${Config().backendAddr}/1.1/players/${playerId}/games/${gameId}`, {\n        method: 'get',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',       // receive json\n        },\n    })\n    return validateModel('PlayerGame')(await fetched.json())\n}\n\nexport function usePlayerGame(playerId: string, gameId: string): db.Value<model.PlayerGame> {\n    const token = db.useConsistencyToken(`games/${gameId}`)\n\n    const [playerGame, setPlayerGame] = useState<db.Value<model.PlayerGame>>({ state: 'loading' });\n\n    useEffect(() => {\n        console.log(\"LOAD PG\")\n        getPlayerGame(playerId, gameId).then(gl => setPlayerGame({\n            state: 'ready',\n            value: gl\n        }))\n    }, [playerId, token])\n\n    return playerGame\n}\n\nconst GamePage: React.FC<GamePageProps> = ({ playerId, dispatch }) => {\n    const { gameId } = useParams()\n    const game = usePlayerGame(playerId, gameId)\n\n    const startGame = () => dispatch.action({\n        kind: \"start_game\",\n        playerId: playerId!,\n        gameId: gameId!\n    })\n\n    const submitWord = (word: string) => dispatch.action({\n        kind: \"make_move\",\n        playerId: playerId!,\n        gameId: gameId!,\n        submission: { kind: \"word\", word }\n    })\n\n    const submitDrawing = async (drawing: Drawing) => {\n        const resp = await dispatch.upload(drawing)\n        await dispatch.action({\n            kind: \"make_move\",\n            playerId: playerId!,\n            gameId: gameId!,\n            submission: { kind: \"drawing\", drawingId: resp.id }\n        })\n    }\n\n    switch (game.state) {\n        case 'loading':\n            return <span>Loading...</span>\n        case 'not_found':\n            return <span>Not found :(</span>\n        case 'ready':\n            return (<GameView\n                playerGame={game.value}\n                startGame={startGame}\n                submitWord={submitWord}\n                submitDrawing={submitDrawing}\n            />)\n    }\n}\n\nasync function postAction(body: Action): Promise<void> {\n    await fetch(Config().backendAddr + '/1.1/action', {\n        method: 'post',\n        body: JSON.stringify(body),\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',       // receive json\n        },\n    })\n}\n\nfunction postUpload(auth: AuthInfo): (u: Upload) => Promise<UploadResponse> {\n    return async (u: Upload): Promise<UploadResponse> => {\n        if (!auth.ready || auth.user === null) {\n            throw new Error(\"can't upload; not logged in.\")\n        }\n        const serialized = JSON.stringify(u);\n        const hash = sha256.hex(serialized);\n        const blob = new Blob([serialized], { type: 'application/json' });\n\n        const id = `users/${auth.user.uid}/drawings/sha256-${hash}`;\n        await storage.ref(id).put(blob);\n        return { id }\n        // const resp = await fetch(Config().backendAddr + '/upload', {\n        //     method: 'post',\n        //     body: JSON.stringify(u),\n        //     mode: 'cors',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //         'Accept': 'application/json',       // receive json\n        //     },\n        // })\n        // return validateRpc('UploadResponse')(await resp.json())\n    }\n}\n\ntype AuthInfo = { ready: false } | { ready: true, user: firebase.User | null }\n\nconst Content: React.FC = () => {\n\n    const onc = () => {\n        const x = new pb2.PictophoneClient(\"http://localhost:8080\")\n        const req = new pb.GetGameRequest();\n        req.setGameId(\"a\");\n        const y = x.getGame(req);\n        y.on(\"status\", (x: any) => console.log(\"STATUS: \", x));\n        y.on(\"data\", (x: unknown) => console.log(\"DaTA: \", x));\n    };\n\n\n    return <div><button onClick={onc}>BTN</button>Loading!</div>;\n    // const location = useLocation()\n    // const [authInfo, setAuthInfo] = useState<AuthInfo>({ ready: false })\n\n    // useEffect(() => {\n    //     return auth.onAuthStateChanged(user => setAuthInfo({ ready: true, user }))\n    // }, [])\n\n    // if (!authInfo.ready) {\n    //     return <div>Loading!</div>\n    // }\n\n    // (window as any)['signout'] = () => auth.signOut()\n\n    // if (!authInfo.user) {\n    //     if (location.pathname !== '/') {\n    //         return <Redirect to=\"/\" />\n    //     } else {\n    //         return <Landing />\n    //     }\n    // }\n\n    // const dispatch: base.Dispatch = {\n    //     action: postAction,\n    //     upload: postUpload(authInfo),\n    // }\n\n    // return <Switch>\n    //     <Route path=\"/\" exact>\n    //         {\n    //             authInfo.user\n    //                 ? <Home playerId={authInfo.user.uid}\n    //                     defaultDisplayName={authInfo.user.displayName || ''}\n    //                     dispatch={dispatch} />\n    //                 : <Landing />\n    //         }\n    //     </Route>\n\n    //     <Route path=\"/g/:gameId\" exact>\n    //         <GamePage playerId={authInfo.user.uid} dispatch={dispatch} />\n    //     </Route>\n    // </Switch>\n}\n\nconst AppOld: React.FC = () => {\n    return <Router>\n        <Content />\n    </Router>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { PictophoneClient } from './gen/pictophone/V0_1ServiceClientPb';\nimport * as nav from './navigation';\n\n// (async () => {\n//     const root = document.getElementById('root');\n//     const config = {};\n//     for await (const view of App(config)) {\n//         ReactDOM.render(view, root);        \n//     }\n// })();\n\n(async () => {\n    const root = document.getElementById('root');\n    const config = {\n       server: new PictophoneClient(\"https://grpcwebproxy-f2dxgbokta-ue.a.run.app\"),\n        // server: new PictophoneClient(\"http://localhost:8080\")\n    };\n\n    \n    let watchable = App(config);\n    while (true) {\n        ReactDOM.render(watchable.value, root);\n        watchable = await watchable.next;\n    }\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.pictophone.v0_1.ActionRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.ActionResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.EmptyHandError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game.Started', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game.Unstarted', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GameAlreadyStartedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GameNotStartedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GetGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GetGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.JoinGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.JoinGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MakeMoveRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MakeMoveResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MoveAbortedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.PlayerNotInGameError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.QueryRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.QueryResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.StartGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.StartGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.UnknownError', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.ActionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.ActionRequest.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.ActionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.ActionRequest.displayName = 'proto.pictophone.v0_1.ActionRequest';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.ActionRequest.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.ActionRequest.MethodCase = {\n  METHOD_NOT_SET: 0,\n  JOIN_GAME_REQUEST: 1,\n  START_GAME_REQUEST: 2,\n  MAKE_MOVE_REQUEST: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.ActionRequest.MethodCase}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.ActionRequest.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.ActionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.ActionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    joinGameRequest: (f = msg.getJoinGameRequest()) && proto.pictophone.v0_1.JoinGameRequest.toObject(includeInstance, f),\n    startGameRequest: (f = msg.getStartGameRequest()) && proto.pictophone.v0_1.StartGameRequest.toObject(includeInstance, f),\n    makeMoveRequest: (f = msg.getMakeMoveRequest()) && proto.pictophone.v0_1.MakeMoveRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.ActionRequest}\n */\nproto.pictophone.v0_1.ActionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.ActionRequest;\n  return proto.pictophone.v0_1.ActionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.ActionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.ActionRequest}\n */\nproto.pictophone.v0_1.ActionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.JoinGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader);\n      msg.setJoinGameRequest(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.StartGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader);\n      msg.setStartGameRequest(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.MakeMoveRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader);\n      msg.setMakeMoveRequest(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.ActionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.ActionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getJoinGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getStartGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getMakeMoveRequest();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional JoinGameRequest join_game_request = 1;\n * @return {?proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getJoinGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.JoinGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.JoinGameRequest, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.JoinGameRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setJoinGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearJoinGameRequest = function() {\n  this.setJoinGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasJoinGameRequest = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional StartGameRequest start_game_request = 2;\n * @return {?proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getStartGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.StartGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.StartGameRequest, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.StartGameRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setStartGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearStartGameRequest = function() {\n  this.setStartGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasStartGameRequest = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional MakeMoveRequest make_move_request = 3;\n * @return {?proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getMakeMoveRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.MakeMoveRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MakeMoveRequest, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MakeMoveRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setMakeMoveRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearMakeMoveRequest = function() {\n  this.setMakeMoveRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasMakeMoveRequest = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.ActionResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.ActionResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.ActionResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.ActionResponse.displayName = 'proto.pictophone.v0_1.ActionResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.ActionResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.ActionResponse.MethodCase = {\n  METHOD_NOT_SET: 0,\n  JOIN_GAME_RESPONSE: 1,\n  START_GAME_RESPONSE: 2,\n  MAKE_MOVE_RESPONSE: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.ActionResponse.MethodCase}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.ActionResponse.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.ActionResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.ActionResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    joinGameResponse: (f = msg.getJoinGameResponse()) && proto.pictophone.v0_1.JoinGameResponse.toObject(includeInstance, f),\n    startGameResponse: (f = msg.getStartGameResponse()) && proto.pictophone.v0_1.StartGameResponse.toObject(includeInstance, f),\n    makeMoveResponse: (f = msg.getMakeMoveResponse()) && proto.pictophone.v0_1.MakeMoveResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.ActionResponse}\n */\nproto.pictophone.v0_1.ActionResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.ActionResponse;\n  return proto.pictophone.v0_1.ActionResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.ActionResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.ActionResponse}\n */\nproto.pictophone.v0_1.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.JoinGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader);\n      msg.setJoinGameResponse(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.StartGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader);\n      msg.setStartGameResponse(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.MakeMoveResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader);\n      msg.setMakeMoveResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.ActionResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.ActionResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getJoinGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getStartGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getMakeMoveResponse();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional JoinGameResponse join_game_response = 1;\n * @return {?proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getJoinGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.JoinGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.JoinGameResponse, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.JoinGameResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setJoinGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearJoinGameResponse = function() {\n  this.setJoinGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasJoinGameResponse = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional StartGameResponse start_game_response = 2;\n * @return {?proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getStartGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.StartGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.StartGameResponse, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.StartGameResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setStartGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearStartGameResponse = function() {\n  this.setStartGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasStartGameResponse = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional MakeMoveResponse make_move_response = 3;\n * @return {?proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getMakeMoveResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.MakeMoveResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MakeMoveResponse, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MakeMoveResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setMakeMoveResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearMakeMoveResponse = function() {\n  this.setMakeMoveResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasMakeMoveResponse = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.QueryRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.QueryRequest.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.QueryRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.QueryRequest.displayName = 'proto.pictophone.v0_1.QueryRequest';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.QueryRequest.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.QueryRequest.MethodCase = {\n  METHOD_NOT_SET: 0,\n  GET_GAME_REQUEST: 1\n};\n\n/**\n * @return {proto.pictophone.v0_1.QueryRequest.MethodCase}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.QueryRequest.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.QueryRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.QueryRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.QueryRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    getGameRequest: (f = msg.getGetGameRequest()) && proto.pictophone.v0_1.GetGameRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.QueryRequest}\n */\nproto.pictophone.v0_1.QueryRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.QueryRequest;\n  return proto.pictophone.v0_1.QueryRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.QueryRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.QueryRequest}\n */\nproto.pictophone.v0_1.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.GetGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader);\n      msg.setGetGameRequest(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.QueryRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.QueryRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGetGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional GetGameRequest get_game_request = 1;\n * @return {?proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.getGetGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.GetGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GetGameRequest, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GetGameRequest|undefined} value */\nproto.pictophone.v0_1.QueryRequest.prototype.setGetGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.QueryRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.QueryRequest.prototype.clearGetGameRequest = function() {\n  this.setGetGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.hasGetGameRequest = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.QueryResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.QueryResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.QueryResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.QueryResponse.displayName = 'proto.pictophone.v0_1.QueryResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.QueryResponse.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.QueryResponse.MethodCase = {\n  METHOD_NOT_SET: 0,\n  GET_GAME_RESPONSE: 1\n};\n\n/**\n * @return {proto.pictophone.v0_1.QueryResponse.MethodCase}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.QueryResponse.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.QueryResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.QueryResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.QueryResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    getGameResponse: (f = msg.getGetGameResponse()) && proto.pictophone.v0_1.GetGameResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.QueryResponse}\n */\nproto.pictophone.v0_1.QueryResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.QueryResponse;\n  return proto.pictophone.v0_1.QueryResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.QueryResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.QueryResponse}\n */\nproto.pictophone.v0_1.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.GetGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader);\n      msg.setGetGameResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.QueryResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.QueryResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGetGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional GetGameResponse get_game_response = 1;\n * @return {?proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.getGetGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.GetGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GetGameResponse, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GetGameResponse|undefined} value */\nproto.pictophone.v0_1.QueryResponse.prototype.setGetGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.QueryResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.QueryResponse.prototype.clearGetGameResponse = function() {\n  this.setGetGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.hasGetGameResponse = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.JoinGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.JoinGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.JoinGameRequest.displayName = 'proto.pictophone.v0_1.JoinGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.JoinGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.JoinGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.JoinGameRequest;\n  return proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.JoinGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.JoinGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.JoinGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.JoinGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.JoinGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.JoinGameResponse.displayName = 'proto.pictophone.v0_1.JoinGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.JoinGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.JoinGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  GAME_ALREADY_STARTED_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.JoinGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.JoinGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.JoinGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    gameAlreadyStartedError: (f = msg.getGameAlreadyStartedError()) && proto.pictophone.v0_1.GameAlreadyStartedError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.JoinGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.JoinGameResponse;\n  return proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.GameAlreadyStartedError;\n      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader);\n      msg.setGameAlreadyStartedError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.JoinGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGameAlreadyStartedError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.JoinGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.JoinGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional GameAlreadyStartedError game_already_started_error = 2;\n * @return {?proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getGameAlreadyStartedError = function() {\n  return /** @type{?proto.pictophone.v0_1.GameAlreadyStartedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyStartedError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GameAlreadyStartedError|undefined} value */\nproto.pictophone.v0_1.JoinGameResponse.prototype.setGameAlreadyStartedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.JoinGameResponse.prototype.clearGameAlreadyStartedError = function() {\n  this.setGameAlreadyStartedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.hasGameAlreadyStartedError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.StartGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.StartGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.StartGameRequest.displayName = 'proto.pictophone.v0_1.StartGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.StartGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.StartGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    randomSeed: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.StartGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.StartGameRequest;\n  return proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.StartGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setRandomSeed(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.StartGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getRandomSeed();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint64 random_seed = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getRandomSeed = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setRandomSeed = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.StartGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.StartGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.StartGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.StartGameResponse.displayName = 'proto.pictophone.v0_1.StartGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.StartGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.StartGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  PLAYER_NOT_IN_GAME_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.StartGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.StartGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.StartGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.StartGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.StartGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.StartGameResponse;\n  return proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.StartGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.StartGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.StartGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.StartGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 2;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.StartGameResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.StartGameResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MakeMoveRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.MakeMoveRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MakeMoveRequest.displayName = 'proto.pictophone.v0_1.MakeMoveRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MakeMoveRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    etag: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.MakeMoveRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MakeMoveRequest;\n  return proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setEtag(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getEtag();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint64 etag = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getEtag = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setEtag = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MakeMoveResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.MakeMoveResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MakeMoveResponse.displayName = 'proto.pictophone.v0_1.MakeMoveResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.MakeMoveResponse.oneofGroups_ = [[1,2,3,4,5]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.MakeMoveResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  MOVE_ABORTED_ERROR: 2,\n  PLAYER_NOT_IN_GAME_ERROR: 3,\n  GAME_NOT_STARTED_ERROR: 4,\n  EMPTY_HAND_ERROR: 5\n};\n\n/**\n * @return {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MakeMoveResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    moveAbortedError: (f = msg.getMoveAbortedError()) && proto.pictophone.v0_1.MoveAbortedError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),\n    gameNotStartedError: (f = msg.getGameNotStartedError()) && proto.pictophone.v0_1.GameNotStartedError.toObject(includeInstance, f),\n    emptyHandError: (f = msg.getEmptyHandError()) && proto.pictophone.v0_1.EmptyHandError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.MakeMoveResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MakeMoveResponse;\n  return proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.MoveAbortedError;\n      reader.readMessage(value,proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader);\n      msg.setMoveAbortedError(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    case 4:\n      var value = new proto.pictophone.v0_1.GameNotStartedError;\n      reader.readMessage(value,proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader);\n      msg.setGameNotStartedError(value);\n      break;\n    case 5:\n      var value = new proto.pictophone.v0_1.EmptyHandError;\n      reader.readMessage(value,proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader);\n      msg.setEmptyHandError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getMoveAbortedError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGameNotStartedError();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter\n    );\n  }\n  f = message.getEmptyHandError();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional MoveAbortedError move_aborted_error = 2;\n * @return {?proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getMoveAbortedError = function() {\n  return /** @type{?proto.pictophone.v0_1.MoveAbortedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MoveAbortedError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MoveAbortedError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setMoveAbortedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearMoveAbortedError = function() {\n  this.setMoveAbortedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasMoveAbortedError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 3;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional GameNotStartedError game_not_started_error = 4;\n * @return {?proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getGameNotStartedError = function() {\n  return /** @type{?proto.pictophone.v0_1.GameNotStartedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameNotStartedError, 4));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GameNotStartedError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setGameNotStartedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 4, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearGameNotStartedError = function() {\n  this.setGameNotStartedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasGameNotStartedError = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional EmptyHandError empty_hand_error = 5;\n * @return {?proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getEmptyHandError = function() {\n  return /** @type{?proto.pictophone.v0_1.EmptyHandError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.EmptyHandError, 5));\n};\n\n\n/** @param {?proto.pictophone.v0_1.EmptyHandError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setEmptyHandError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 5, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearEmptyHandError = function() {\n  this.setEmptyHandError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasEmptyHandError = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GetGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GetGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GetGameRequest.displayName = 'proto.pictophone.v0_1.GetGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GetGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GetGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.GetGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GetGameRequest;\n  return proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GetGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GetGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.GetGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.GetGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GetGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.GetGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.GetGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GetGameResponse.displayName = 'proto.pictophone.v0_1.GetGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.GetGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.GetGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  PLAYER_NOT_IN_GAME_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.GetGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.GetGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GetGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GetGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),\n    game: (f = msg.getGame()) && proto.pictophone.v0_1.Game.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.GetGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GetGameResponse;\n  return proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GetGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.Game;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.deserializeBinaryFromReader);\n      msg.setGame(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GetGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGame();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.Game.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 2;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Game game = 3;\n * @return {?proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getGame = function() {\n  return /** @type{?proto.pictophone.v0_1.Game} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setGame = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearGame = function() {\n  this.setGame(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasGame = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.repeatedFields_, proto.pictophone.v0_1.Game.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.Game, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.displayName = 'proto.pictophone.v0_1.Game';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pictophone.v0_1.Game.repeatedFields_ = [1];\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.Game.oneofGroups_ = [[2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.Game.StateCase = {\n  STATE_NOT_SET: 0,\n  UNSTARTED: 2,\n  STARTED: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.Game.StateCase}\n */\nproto.pictophone.v0_1.Game.prototype.getStateCase = function() {\n  return /** @type {proto.pictophone.v0_1.Game.StateCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.Game.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    playerIdsList: jspb.Message.getRepeatedField(msg, 1),\n    unstarted: (f = msg.getUnstarted()) && proto.pictophone.v0_1.Game.Unstarted.toObject(includeInstance, f),\n    started: (f = msg.getStarted()) && proto.pictophone.v0_1.Game.Started.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.Game.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game;\n  return proto.pictophone.v0_1.Game.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.Game.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addPlayerIds(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.Game.Unstarted;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader);\n      msg.setUnstarted(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.Game.Started;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader);\n      msg.setStarted(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPlayerIdsList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n  f = message.getUnstarted();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter\n    );\n  }\n  f = message.getStarted();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.Game.Started.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game.Unstarted = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.Game.Unstarted, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.Unstarted.displayName = 'proto.pictophone.v0_1.Game.Unstarted';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.Unstarted.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.Unstarted.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Unstarted.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.Unstarted.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game.Unstarted;\n  return proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.Unstarted.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game.Unstarted} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game.Started = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.Started.repeatedFields_, null);\n};\ngoog.inherits(proto.pictophone.v0_1.Game.Started, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.Started.displayName = 'proto.pictophone.v0_1.Game.Started';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pictophone.v0_1.Game.Started.repeatedFields_ = [4,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.Started.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.Started.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game.Started} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Started.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    etag: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    numMistakes: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    roundNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    numbersPlayedList: jspb.Message.getRepeatedField(msg, 4),\n    handList: jspb.Message.getRepeatedField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.Started.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game.Started;\n  return proto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game.Started} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setEtag(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumMistakes(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setRoundNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());\n      msg.setNumbersPlayedList(value);\n      break;\n    case 5:\n      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());\n      msg.setHandList(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.Started.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.Started.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game.Started} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Started.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEtag();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getNumMistakes();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getRoundNum();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getNumbersPlayedList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      4,\n      f\n    );\n  }\n  f = message.getHandList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 etag = 1;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getEtag = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setEtag = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 num_mistakes = 2;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getNumMistakes = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setNumMistakes = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 round_num = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getRoundNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setRoundNum = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * repeated uint32 numbers_played = 4;\n * @return {!Array<number>}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getNumbersPlayedList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/** @param {!Array<number>} value */\nproto.pictophone.v0_1.Game.Started.prototype.setNumbersPlayedList = function(value) {\n  jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.Started.prototype.addNumbersPlayed = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.Started.prototype.clearNumbersPlayedList = function() {\n  this.setNumbersPlayedList([]);\n};\n\n\n/**\n * repeated uint32 hand = 5;\n * @return {!Array<number>}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getHandList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/** @param {!Array<number>} value */\nproto.pictophone.v0_1.Game.Started.prototype.setHandList = function(value) {\n  jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.Started.prototype.addHand = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.Started.prototype.clearHandList = function() {\n  this.setHandList([]);\n};\n\n\n/**\n * repeated string player_ids = 1;\n * @return {!Array<string>}\n */\nproto.pictophone.v0_1.Game.prototype.getPlayerIdsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {!Array<string>} value */\nproto.pictophone.v0_1.Game.prototype.setPlayerIdsList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.prototype.addPlayerIds = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearPlayerIdsList = function() {\n  this.setPlayerIdsList([]);\n};\n\n\n/**\n * optional Unstarted unstarted = 2;\n * @return {?proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.prototype.getUnstarted = function() {\n  return /** @type{?proto.pictophone.v0_1.Game.Unstarted} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.Unstarted, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game.Unstarted|undefined} value */\nproto.pictophone.v0_1.Game.prototype.setUnstarted = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.Game.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearUnstarted = function() {\n  this.setUnstarted(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.Game.prototype.hasUnstarted = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Started started = 3;\n * @return {?proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.prototype.getStarted = function() {\n  return /** @type{?proto.pictophone.v0_1.Game.Started} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.Started, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game.Started|undefined} value */\nproto.pictophone.v0_1.Game.prototype.setStarted = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.Game.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearStarted = function() {\n  this.setStarted(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.Game.prototype.hasStarted = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.UnknownError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.UnknownError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.UnknownError.displayName = 'proto.pictophone.v0_1.UnknownError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.UnknownError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.UnknownError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.UnknownError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.UnknownError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    error: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.UnknownError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.UnknownError;\n  return proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.UnknownError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.UnknownError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.UnknownError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.UnknownError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getError();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string error = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.UnknownError.prototype.getError = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.UnknownError.prototype.setError = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GameAlreadyStartedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GameAlreadyStartedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GameAlreadyStartedError.displayName = 'proto.pictophone.v0_1.GameAlreadyStartedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GameAlreadyStartedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GameAlreadyStartedError;\n  return proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GameNotStartedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GameNotStartedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GameNotStartedError.displayName = 'proto.pictophone.v0_1.GameNotStartedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GameNotStartedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GameNotStartedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameNotStartedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.GameNotStartedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GameNotStartedError;\n  return proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GameNotStartedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GameNotStartedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.PlayerNotInGameError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.PlayerNotInGameError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.PlayerNotInGameError.displayName = 'proto.pictophone.v0_1.PlayerNotInGameError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.PlayerNotInGameError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.PlayerNotInGameError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.PlayerNotInGameError;\n  return proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MoveAbortedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.MoveAbortedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MoveAbortedError.displayName = 'proto.pictophone.v0_1.MoveAbortedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MoveAbortedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MoveAbortedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MoveAbortedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MoveAbortedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MoveAbortedError;\n  return proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MoveAbortedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MoveAbortedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.EmptyHandError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.EmptyHandError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.EmptyHandError.displayName = 'proto.pictophone.v0_1.EmptyHandError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.EmptyHandError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.EmptyHandError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.EmptyHandError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.EmptyHandError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.EmptyHandError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.EmptyHandError;\n  return proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.EmptyHandError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.EmptyHandError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.EmptyHandError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.pictophone.v0_1);\n"],"sourceRoot":""}