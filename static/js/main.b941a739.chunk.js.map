{"version":3,"sources":["types.validator.ts","Drawing.tsx","Canvas.tsx","GameView.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ajv","Ajv","addMetaSchema","require","validate","typeName","validator","getSchema","value","Error","errorsText","errors","filter","e","keyword","dataVar","addSchema","renderPath","p","points","length","x","y","res","slice","Drawing","drawing","width","height","svgRef","useRef","useEffect","current","style","scaled","paths","map","pt","ref","idx","key","d","stroke","strokeWidth","fill","Canvas","draft","onChange","divRef","pointerStart","pointers","produce","ptId","inProgress","rect","getBoundingClientRect","left","top","push","pointerMove","touchesToPointers","touches","touch","item","identifier","clientX","clientY","mouseToPointers","mouse","className","onTouchStart","preventDefault","changedTouches","onTouchMove","onMouseDown","buttons","onMouseMove","touchAction","ActiveGame","playerGame","submitWord","submitDrawing","initDraftDrawing","useState","textSub","setTextSub","draftDrawing","setDraftDrawing","window","innerWidth","innerHeight","dims","setDims","addEventListener","doTextSub","doDrawingSub","firstPrompt","playerIds","id","onSubmit","target","waitForPrompt","canvasWidth1","canvasWidth","Math","min","canvasHeight","state","prompt","kind","word","onClick","respond","Series","serieses","series","seriesIdx","entries","eIdx","entry","Entry","container","offsetWidth","offsetHeight","submission","widthFromHeight","widthForBox","DownloadDrawing","downloaded","setDownloaded","a","fetch","json","i","GameView","startGame","playerList","JoinGame","join","gid","setGid","type","Home","playerId","dispatch","gameId","action","path","render","isLoading","data","r","to","firebase","initializeApp","projectId","firestore","SignIn","setId","history","useHistory","GamePage","useParams","uploads","pg","postit","body","Config","method","JSON","stringify","mode","headers","Content","URLSearchParams","useLocation","search","get","exact","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b941a739.chunk.js","sourcesContent":["/* tslint:disable */\n// generated by typescript-json-validator\nimport Ajv from 'ajv';\nimport {ActionRequest, Action, JoinGame, StartGame, MakeMove, Point, Path, Upload, Ref, Submission, Drawing, CompressedDrawing, PlayerGame, UnstartedGame, FirstPromptGame, WaitingForPromptGame, RespondToPromptGame, FinishedGame, Series, SeriesEntry, GameLog, GameLogEntry} from './types';\nexport const ajv = new Ajv({\"allErrors\":true,\"coerceTypes\":false,\"format\":\"fast\",\"nullable\":true,\"unicode\":true,\"uniqueItems\":true,\"useDefaults\":true});\n\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n\nexport const Schema = {\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"definitions\": {\n    \"Action\": {\n      \"else\": {\n        \"else\": {\n          \"else\": {\n            \"properties\": {\n              \"kind\": {\n                \"enum\": [\n                  \"join_game\",\n                  \"start_game\",\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"kind\"\n            ]\n          },\n          \"if\": {\n            \"properties\": {\n              \"kind\": {\n                \"enum\": [\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"kind\"\n            ]\n          },\n          \"then\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"gameId\": {\n                \"type\": \"string\"\n              },\n              \"kind\": {\n                \"enum\": [\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              },\n              \"playerId\": {\n                \"type\": \"string\"\n              },\n              \"submission\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"kind\": {\n                        \"enum\": [\n                          \"word\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"word\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"kind\",\n                      \"word\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"drawing\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"id\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"drawing\"\n                        ],\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"drawing\",\n                      \"kind\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            },\n            \"required\": [\n              \"gameId\",\n              \"kind\",\n              \"playerId\",\n              \"submission\"\n            ],\n            \"type\": \"object\"\n          }\n        },\n        \"if\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"start_game\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"then\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"gameId\": {\n              \"type\": \"string\"\n            },\n            \"kind\": {\n              \"enum\": [\n                \"start_game\"\n              ],\n              \"type\": \"string\"\n            },\n            \"playerId\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"gameId\",\n            \"kind\",\n            \"playerId\"\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"if\": {\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"join_game\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\"\n        ]\n      },\n      \"then\": {\n        \"defaultProperties\": [\n        ],\n        \"properties\": {\n          \"gameId\": {\n            \"type\": \"string\"\n          },\n          \"kind\": {\n            \"enum\": [\n              \"join_game\"\n            ],\n            \"type\": \"string\"\n          },\n          \"playerId\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"gameId\",\n          \"kind\",\n          \"playerId\"\n        ],\n        \"type\": \"object\"\n      }\n    },\n    \"ActionRequest\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"action\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"join_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"start_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"make_move\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                },\n                \"submission\": {\n                  \"anyOf\": [\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"kind\": {\n                          \"enum\": [\n                            \"word\"\n                          ],\n                          \"type\": \"string\"\n                        },\n                        \"word\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"kind\",\n                        \"word\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"drawing\": {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"id\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        \"kind\": {\n                          \"enum\": [\n                            \"drawing\"\n                          ],\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"drawing\",\n                        \"kind\"\n                      ],\n                      \"type\": \"object\"\n                    }\n                  ]\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\",\n                \"submission\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        },\n        \"uploads\": {\n          \"additionalProperties\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"drawing\": {\n                \"defaultProperties\": [\n                ],\n                \"properties\": {\n                  \"paths\": {\n                    \"items\": {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"points\": {\n                          \"items\": {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"x\": {\n                                \"type\": \"number\"\n                              },\n                              \"y\": {\n                                \"type\": \"number\"\n                              }\n                            },\n                            \"required\": [\n                              \"x\",\n                              \"y\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        }\n                      },\n                      \"required\": [\n                        \"points\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"paths\"\n                ],\n                \"type\": \"object\"\n              },\n              \"kind\": {\n                \"enum\": [\n                  \"drawing\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"drawing\",\n              \"kind\"\n            ],\n            \"type\": \"object\"\n          },\n          \"defaultProperties\": [\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"action\"\n      ],\n      \"type\": \"object\"\n    },\n    \"CompressedDrawing\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"paths\": {\n          \"items\": {\n            \"items\": {\n              \"type\": \"number\"\n            },\n            \"type\": \"array\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"paths\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Drawing\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"paths\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"points\": {\n                \"items\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"x\": {\n                      \"type\": \"number\"\n                    },\n                    \"y\": {\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"required\": [\n                    \"x\",\n                    \"y\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"points\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"paths\"\n      ],\n      \"type\": \"object\"\n    },\n    \"FinishedGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"series\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"entries\": {\n                \"items\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"playerId\": {\n                      \"type\": \"string\"\n                    },\n                    \"submission\": {\n                      \"anyOf\": [\n                        {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"kind\": {\n                              \"enum\": [\n                                \"word\"\n                              ],\n                              \"type\": \"string\"\n                            },\n                            \"word\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"kind\",\n                            \"word\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"drawing\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"id\": {\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"required\": [\n                                \"id\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"kind\": {\n                              \"enum\": [\n                                \"drawing\"\n                              ],\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"drawing\",\n                            \"kind\"\n                          ],\n                          \"type\": \"object\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"playerId\",\n                    \"submission\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"entries\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"GAME_OVER\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"series\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"FirstPromptGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"FIRST_PROMPT\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"GameLog\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"entries\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"action\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"join_game\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"start_game\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"make_move\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      },\n                      \"submission\": {\n                        \"anyOf\": [\n                          {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"kind\": {\n                                \"enum\": [\n                                  \"word\"\n                                ],\n                                \"type\": \"string\"\n                              },\n                              \"word\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"kind\",\n                              \"word\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"drawing\": {\n                                \"defaultProperties\": [\n                                ],\n                                \"properties\": {\n                                  \"id\": {\n                                    \"type\": \"string\"\n                                  }\n                                },\n                                \"required\": [\n                                  \"id\"\n                                ],\n                                \"type\": \"object\"\n                              },\n                              \"kind\": {\n                                \"enum\": [\n                                  \"drawing\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"drawing\",\n                              \"kind\"\n                            ],\n                            \"type\": \"object\"\n                          }\n                        ]\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\",\n                      \"submission\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              },\n              \"timestamp\": {\n              }\n            },\n            \"required\": [\n              \"action\",\n              \"timestamp\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        \"lastTimestamp\": {\n        }\n      },\n      \"required\": [\n        \"entries\",\n        \"lastTimestamp\"\n      ],\n      \"type\": \"object\"\n    },\n    \"GameLogEntry\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"action\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"join_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"start_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"make_move\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                },\n                \"submission\": {\n                  \"anyOf\": [\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"kind\": {\n                          \"enum\": [\n                            \"word\"\n                          ],\n                          \"type\": \"string\"\n                        },\n                        \"word\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"kind\",\n                        \"word\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"drawing\": {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"id\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        \"kind\": {\n                          \"enum\": [\n                            \"drawing\"\n                          ],\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"drawing\",\n                        \"kind\"\n                      ],\n                      \"type\": \"object\"\n                    }\n                  ]\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\",\n                \"submission\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        },\n        \"timestamp\": {\n        }\n      },\n      \"required\": [\n        \"action\",\n        \"timestamp\"\n      ],\n      \"type\": \"object\"\n    },\n    \"JoinGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"join_game\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\"\n      ],\n      \"type\": \"object\"\n    },\n    \"MakeMove\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"make_move\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        },\n        \"submission\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"id\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\",\n        \"submission\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Path\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"points\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"x\": {\n                \"type\": \"number\"\n              },\n              \"y\": {\n                \"type\": \"number\"\n              }\n            },\n            \"required\": [\n              \"x\",\n              \"y\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"points\"\n      ],\n      \"type\": \"object\"\n    },\n    \"PlayerGame\": {\n      \"else\": {\n        \"else\": {\n          \"else\": {\n            \"else\": {\n              \"else\": {\n                \"properties\": {\n                  \"state\": {\n                    \"enum\": [\n                      \"UNSTARTED\",\n                      \"FIRST_PROMPT\",\n                      \"WAITING_FOR_PROMPT\",\n                      \"RESPOND_TO_PROMPT\",\n                      \"GAME_OVER\"\n                    ],\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"state\"\n                ]\n              },\n              \"if\": {\n                \"properties\": {\n                  \"state\": {\n                    \"enum\": [\n                      \"GAME_OVER\"\n                    ],\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"state\"\n                ]\n              },\n              \"then\": {\n                \"defaultProperties\": [\n                ],\n                \"properties\": {\n                  \"playerIds\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"series\": {\n                    \"items\": {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"entries\": {\n                          \"items\": {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"playerId\": {\n                                \"type\": \"string\"\n                              },\n                              \"submission\": {\n                                \"anyOf\": [\n                                  {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                      \"kind\": {\n                                        \"enum\": [\n                                          \"word\"\n                                        ],\n                                        \"type\": \"string\"\n                                      },\n                                      \"word\": {\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"required\": [\n                                      \"kind\",\n                                      \"word\"\n                                    ],\n                                    \"type\": \"object\"\n                                  },\n                                  {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                      \"drawing\": {\n                                        \"defaultProperties\": [\n                                        ],\n                                        \"properties\": {\n                                          \"id\": {\n                                            \"type\": \"string\"\n                                          }\n                                        },\n                                        \"required\": [\n                                          \"id\"\n                                        ],\n                                        \"type\": \"object\"\n                                      },\n                                      \"kind\": {\n                                        \"enum\": [\n                                          \"drawing\"\n                                        ],\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"required\": [\n                                      \"drawing\",\n                                      \"kind\"\n                                    ],\n                                    \"type\": \"object\"\n                                  }\n                                ]\n                              }\n                            },\n                            \"required\": [\n                              \"playerId\",\n                              \"submission\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        }\n                      },\n                      \"required\": [\n                        \"entries\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"state\": {\n                    \"enum\": [\n                      \"GAME_OVER\"\n                    ],\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"playerIds\",\n                  \"series\",\n                  \"state\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"if\": {\n              \"properties\": {\n                \"state\": {\n                  \"enum\": [\n                    \"RESPOND_TO_PROMPT\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"state\"\n              ]\n            },\n            \"then\": {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"playerIds\": {\n                  \"items\": {\n                    \"type\": \"string\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"prompt\": {\n                  \"anyOf\": [\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"kind\": {\n                          \"enum\": [\n                            \"word\"\n                          ],\n                          \"type\": \"string\"\n                        },\n                        \"word\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"kind\",\n                        \"word\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"drawing\": {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"id\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        \"kind\": {\n                          \"enum\": [\n                            \"drawing\"\n                          ],\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"drawing\",\n                        \"kind\"\n                      ],\n                      \"type\": \"object\"\n                    }\n                  ]\n                },\n                \"state\": {\n                  \"enum\": [\n                    \"RESPOND_TO_PROMPT\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"playerIds\",\n                \"prompt\",\n                \"state\"\n              ],\n              \"type\": \"object\"\n            }\n          },\n          \"if\": {\n            \"properties\": {\n              \"state\": {\n                \"enum\": [\n                  \"WAITING_FOR_PROMPT\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"state\"\n            ]\n          },\n          \"then\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"playerIds\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              },\n              \"state\": {\n                \"enum\": [\n                  \"WAITING_FOR_PROMPT\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"playerIds\",\n              \"state\"\n            ],\n            \"type\": \"object\"\n          }\n        },\n        \"if\": {\n          \"properties\": {\n            \"state\": {\n              \"enum\": [\n                \"FIRST_PROMPT\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"state\"\n          ]\n        },\n        \"then\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"playerIds\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"state\": {\n              \"enum\": [\n                \"FIRST_PROMPT\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"playerIds\",\n            \"state\"\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"if\": {\n        \"properties\": {\n          \"state\": {\n            \"enum\": [\n              \"UNSTARTED\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"state\"\n        ]\n      },\n      \"then\": {\n        \"defaultProperties\": [\n        ],\n        \"properties\": {\n          \"playerIds\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"state\": {\n            \"enum\": [\n              \"UNSTARTED\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"playerIds\",\n          \"state\"\n        ],\n        \"type\": \"object\"\n      }\n    },\n    \"Point\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"x\": {\n          \"type\": \"number\"\n        },\n        \"y\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"x\",\n        \"y\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Ref\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"type\": \"object\"\n    },\n    \"RespondToPromptGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"prompt\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"id\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        },\n        \"state\": {\n          \"enum\": [\n            \"RESPOND_TO_PROMPT\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"prompt\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"entries\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"playerId\": {\n                \"type\": \"string\"\n              },\n              \"submission\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"kind\": {\n                        \"enum\": [\n                          \"word\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"word\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"kind\",\n                      \"word\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"drawing\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"id\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"drawing\"\n                        ],\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"drawing\",\n                      \"kind\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            },\n            \"required\": [\n              \"playerId\",\n              \"submission\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"entries\"\n      ],\n      \"type\": \"object\"\n    },\n    \"SeriesEntry\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerId\": {\n          \"type\": \"string\"\n        },\n        \"submission\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"id\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"playerId\",\n        \"submission\"\n      ],\n      \"type\": \"object\"\n    },\n    \"StartGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"start_game\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Submission\": {\n      \"else\": {\n        \"else\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"word\",\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"if\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"then\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"drawing\": {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"kind\": {\n              \"enum\": [\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"drawing\",\n            \"kind\"\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"if\": {\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"word\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\"\n        ]\n      },\n      \"then\": {\n        \"defaultProperties\": [\n        ],\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"word\"\n            ],\n            \"type\": \"string\"\n          },\n          \"word\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\",\n          \"word\"\n        ],\n        \"type\": \"object\"\n      }\n    },\n    \"UnstartedGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"UNSTARTED\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Upload\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"drawing\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"paths\": {\n              \"items\": {\n                \"defaultProperties\": [\n                ],\n                \"properties\": {\n                  \"points\": {\n                    \"items\": {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"x\": {\n                          \"type\": \"number\"\n                        },\n                        \"y\": {\n                          \"type\": \"number\"\n                        }\n                      },\n                      \"required\": [\n                        \"x\",\n                        \"y\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"points\"\n                ],\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            }\n          },\n          \"required\": [\n            \"paths\"\n          ],\n          \"type\": \"object\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"drawing\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"drawing\",\n        \"kind\"\n      ],\n      \"type\": \"object\"\n    },\n    \"WaitingForPromptGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"WAITING_FOR_PROMPT\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    }\n  }\n};\najv.addSchema(Schema, 'Schema')\nexport function validate(typeName: 'ActionRequest'): (value: unknown) => ActionRequest;\nexport function validate(typeName: 'Action'): (value: unknown) => Action;\nexport function validate(typeName: 'JoinGame'): (value: unknown) => JoinGame;\nexport function validate(typeName: 'StartGame'): (value: unknown) => StartGame;\nexport function validate(typeName: 'MakeMove'): (value: unknown) => MakeMove;\nexport function validate(typeName: 'Point'): (value: unknown) => Point;\nexport function validate(typeName: 'Path'): (value: unknown) => Path;\nexport function validate(typeName: 'Upload'): (value: unknown) => Upload;\nexport function validate(typeName: 'Ref'): (value: unknown) => Ref;\nexport function validate(typeName: 'Submission'): (value: unknown) => Submission;\nexport function validate(typeName: 'Drawing'): (value: unknown) => Drawing;\nexport function validate(typeName: 'CompressedDrawing'): (value: unknown) => CompressedDrawing;\nexport function validate(typeName: 'PlayerGame'): (value: unknown) => PlayerGame;\nexport function validate(typeName: 'UnstartedGame'): (value: unknown) => UnstartedGame;\nexport function validate(typeName: 'FirstPromptGame'): (value: unknown) => FirstPromptGame;\nexport function validate(typeName: 'WaitingForPromptGame'): (value: unknown) => WaitingForPromptGame;\nexport function validate(typeName: 'RespondToPromptGame'): (value: unknown) => RespondToPromptGame;\nexport function validate(typeName: 'FinishedGame'): (value: unknown) => FinishedGame;\nexport function validate(typeName: 'Series'): (value: unknown) => Series;\nexport function validate(typeName: 'SeriesEntry'): (value: unknown) => SeriesEntry;\nexport function validate(typeName: 'GameLog'): (value: unknown) => GameLog;\nexport function validate(typeName: 'GameLogEntry'): (value: unknown) => GameLogEntry;\nexport function validate(typeName: string): (value: unknown) => any {\n  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);\n  return (value: unknown): any => {\n    if (!validator) {\n      throw new Error(`No validator defined for Schema#/definitions/${typeName}`)\n    }\n  \n    const valid = validator(value);\n\n    if (!valid) {\n      throw new Error(\n        'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: typeName}),\n      );\n    }\n\n    return value as any;\n  };\n}","import React, { useRef, useEffect } from 'react'\nimport * as types from './types'\n\ntype DrawingProps = {\n    drawing: types.Drawing\n    width: number\n    height: number\n}\n\nexport const Drawing: React.FC<DrawingProps> = ({ drawing, width, height }) => {\n    const svgRef = useRef<SVGSVGElement>(null)\n\n    useEffect(() => {\n        const e: SVGSVGElement = svgRef.current!\n\n        e.style.width = width + 'px'\n        e.style.height = height + 'px'\n    })\n\n    const scaled: types.Drawing = {\n        paths: drawing.paths.map(p => ({\n            points: p.points.map(pt => ({ x: pt.x * width, y: pt.y * height }))\n        }))\n    }\n\n    return (\n        <svg ref={svgRef}>\n            {\n                scaled.paths.map((p, idx) =>\n                    <path key={idx}\n                        d={renderPath(p)}\n                        stroke=\"black\"\n                        strokeWidth=\"2\"\n                        fill=\"transparent\" />\n                )\n            }\n        </svg>\n    )\n}\n\nfunction renderPath(p: types.Path): string {\n    if (p.points.length == 0) {\n        return \"\"\n    }\n    if (p.points.length == 1) {\n        const { x, y } = p.points[0]\n        return `M ${x} ${y} L ${x + 1} ${y}`\n    }\n    let res = `M ${p.points[0].x} ${p.points[0].y}`\n    for (const { x, y } of p.points.slice(1)) {\n        res += `L ${x} ${y}`\n    }\n    return res\n}\n\nexport default Drawing","import React, { useState, useRef, useEffect } from 'react'\nimport * as types from './types'\nimport produce from 'immer'\nimport Drawing from './Drawing'\n\nexport type DraftDrawing = {\n    drawing: types.Drawing\n    inProgress: { [touchId: string]: number }\n}\n\ntype CanvasProps = {\n    draft: DraftDrawing\n    onChange: (d: DraftDrawing) => void\n    width: number\n    height: number\n}\n\ntype PointerMap = { [touchId: string]: types.Point }\n\nexport const Canvas: React.FC<CanvasProps> = ({ draft, onChange, width, height }) => {\n    const divRef = useRef<HTMLDivElement>(null)\n\n    function pointerStart(pointers: PointerMap) {\n        onChange(produce(draft, (draft) => {\n            for (const ptId in pointers) {\n                draft.inProgress[ptId] = draft.drawing.paths.length\n                const rect = divRef.current!.getBoundingClientRect()\n                const pt = {\n                    x: (pointers[ptId].x - rect.left) / width,\n                    y: (pointers[ptId].y - rect.top) / height,\n                }\n                draft.drawing.paths.push({ points: [pt] })\n            }\n        }))\n    }\n\n    function pointerMove(pointers: PointerMap) {\n        onChange(produce(draft, (draft) => {\n            for (const ptId in pointers) {\n                const rect = divRef.current!.getBoundingClientRect()\n                const pt = {\n                    x: (pointers[ptId].x - rect.left) / width,\n                    y: (pointers[ptId].y - rect.top) / height,\n                }\n                draft.drawing.paths[draft.inProgress[ptId]].points.push(pt)\n            }\n        }))\n    }\n\n    function touchesToPointers(touches: React.TouchList): PointerMap {\n        const res: PointerMap = {}\n        for (let idx = 0; idx < touches.length; idx++) {\n            const touch = touches.item(idx)\n            res[touch.identifier] = {\n                x: touch.clientX,\n                y: touch.clientY,\n            }\n        }\n        return res\n    }\n\n    function mouseToPointers(e: React.MouseEvent<HTMLDivElement>): PointerMap {\n        return {\n            mouse: { x: e.clientX, y: e.clientY }\n        }\n    }\n\n    function touchStart(e: React.TouchEvent<HTMLDivElement>) {\n        e.preventDefault()\n        pointerStart(touchesToPointers(e.changedTouches))\n    }\n\n    function touchMove(e: React.TouchEvent<HTMLDivElement>) {\n        e.preventDefault()\n        pointerMove(touchesToPointers(e.changedTouches))\n    }\n\n    function mouseStart(e: React.MouseEvent<HTMLDivElement>) {\n        if (e.buttons === 1) { pointerStart(mouseToPointers(e)) }\n    }\n\n    function mouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        if (e.buttons === 1) { pointerMove(mouseToPointers(e)) }\n    }\n\n    return (\n        <div\n            ref={divRef}\n            className=\"canvas\"\n            onTouchStart={touchStart}\n            onTouchMove={touchMove}\n            onMouseDown={mouseStart}\n            onMouseMove={mouseMove}\n            style={{ touchAction: 'none' }}>\n            <Drawing drawing={draft.drawing}\n                width={width} height={height} />\n        </div>)\n}\n\nexport default Canvas","\nimport React, { useState, useEffect, useRef } from 'react';\n\nimport * as types from './types'\nimport Canvas, { DraftDrawing } from './Canvas'\nimport Drawing from './Drawing'\nimport { validate } from './types.validator'\n\ntype GameViewProps = {\n    playerGame: types.PlayerGame\n    startGame: () => void\n    submitWord: (word: string) => void\n    submitDrawing: (s: types.Drawing) => void\n}\n\nconst GameView: React.FC<GameViewProps> = ({ playerGame, startGame, submitWord, submitDrawing }) => {\n\n    const playerList = <div>\n        Players: {playerGame.playerIds.map((p, idx) => <div key={idx}>{p}</div>)}\n    </div>\n\n\n    switch (playerGame.state) {\n        case \"UNSTARTED\":\n            return <div>\n                {playerList}\n                Waiting to start game.\n            <button onClick={startGame}>Start Game</button>\n            </div>\n        case \"FIRST_PROMPT\":\n        case \"WAITING_FOR_PROMPT\":\n        case \"RESPOND_TO_PROMPT\":\n            return <ActiveGame playerGame={playerGame} submitWord={submitWord} submitDrawing={submitDrawing} />\n\n        case \"GAME_OVER\":\n            return <Series serieses={playerGame.series} />\n    }\n}\n\ntype ActiveGameProps = {\n    playerGame: types.FirstPromptGame | types.WaitingForPromptGame | types.RespondToPromptGame\n    submitWord: (word: string) => void\n    submitDrawing: (s: types.Drawing) => void\n}\n\nconst ActiveGame: React.FC<ActiveGameProps> = ({ playerGame, submitWord, submitDrawing }) => {\n    const initText = ''\n    const initDraftDrawing = {\n        drawing: {\n            paths: []\n        },\n        inProgress: {},\n    }\n\n    const [textSub, setTextSub] = useState(\"\")\n    const [draftDrawing, setDraftDrawing] = useState<DraftDrawing>(initDraftDrawing)\n\n    const [dims, setDims] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    useEffect(() => {\n        return window.addEventListener('resize', () => setDims({\n            width: window.innerWidth,\n            height: window.innerHeight\n        }));\n    }, [])\n\n    const doTextSub = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        submitWord(textSub)\n        setTextSub(initText)\n    }\n\n    const doDrawingSub = () => {\n        submitDrawing(draftDrawing.drawing)\n        setDraftDrawing(initDraftDrawing)\n    }\n\n    const playerList = <div>\n        Players: {playerGame.playerIds.map((p, idx) => <div key={idx}>{p}</div>)}\n    </div>\n\n    const firstPrompt = <main id=\"game\">\n        <header>Pictophone!</header>\n        <div className=\"instructions\">Come up with a thing!</div>\n        <form onSubmit={doTextSub}>\n            <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </main>\n\n    const waitForPrompt = <main id=\"game\">\n        <header>Pictophone!</header>\n        <div className=\"instructions\">\n            Chill out for a sec while everyone else finishes.\n        </div>\n    </main>\n\n    const canvasHeight1 = dims.height * 0.7\n    const canvasWidth1 = canvasHeight1 * 3 / 4\n    const canvasWidth = Math.min(canvasWidth1, dims.width * 0.95)\n    const canvasHeight = canvasWidth * 4 / 3\n\n    const respond = (playerGame: types.RespondToPromptGame) =>\n        playerGame.prompt.kind === 'word'\n            ? <main id=\"game\">\n                <div className=\"word-prompt\" >\n                    {playerGame.prompt.word}\n                </div>\n                <Canvas draft={draftDrawing} onChange={setDraftDrawing}\n                    width={canvasWidth} height={canvasHeight} />\n                <button onClick={doDrawingSub}>Submit</button>\n            </main>\n            : <main id=\"game\">\n                <DownloadDrawing drawing={playerGame.prompt.drawing}\n                    width={canvasWidth} height={canvasHeight} />\n                <form onSubmit={doTextSub}>\n                    <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n                    <button>Submit</button>\n                </form>\n            </main>\n\n    switch (playerGame.state) {\n        case \"FIRST_PROMPT\":\n            return firstPrompt\n        case \"WAITING_FOR_PROMPT\":\n            return waitForPrompt\n        case \"RESPOND_TO_PROMPT\":\n            return respond(playerGame)\n    }\n}\n\ntype SeriesProps = {\n    serieses: types.Series[]\n}\n\nconst Series: React.FC<SeriesProps> = ({ serieses }) => {\n    return <main id=\"sharing\">\n        <div className=\"series\">\n            Scroll this way ->\n        </div>\n        {\n            serieses.map((series, seriesIdx) => <div key={seriesIdx} className=\"series\">\n                {\n                    series.entries.map((e, eIdx) => <Entry key={eIdx} entry={e} />)\n                }\n            </div>)\n        }\n    </main>\n}\n\nconst Entry: React.FC<{ entry: types.SeriesEntry }> = ({ entry }) => {\n    const container = useRef<HTMLDivElement>(null)\n    const [dims, setDims] = useState({ width: 0, height: 0 })\n\n    useEffect(() => {\n        setDims({\n            width: container.current!.offsetWidth,\n            height: container.current!.offsetHeight,\n        });\n    }, [])\n\n    if (entry.submission.kind === 'word') {\n        return <div ref={container}\n            className=\"words\">{entry.submission.word}</div>\n    } else {\n        const width = widthForBox(dims.width, dims.height)\n        return <div ref={container} className=\"drawing\">\n            <DownloadDrawing drawing={entry.submission.drawing}\n                width={width} height={4 * width / 3} />\n        </div>\n    }\n}\n\nfunction widthForBox(width: number, height: number): number {\n    let widthFromHeight = height * 0.75\n    return Math.min(width, widthFromHeight)\n}\n\ntype DownloadDrawingProps = {\n    drawing: types.Ref\n    width: number\n    height: number\n}\n\nfunction decompressDrawing(compressed: types.CompressedDrawing): types.Drawing {\n    return {\n        paths: compressed.paths.map(p => {\n            const res: types.Path = { points: [] }\n            for (let i = 0; i < p.length; i += 2) {\n                res.points.push({ x: p[i], y: p[i + 1] })\n            }\n            return res\n        })\n    }\n}\n\n\nconst DownloadDrawing: React.FC<DownloadDrawingProps> = ({ drawing, width, height }) => {\n    const [downloaded, setDownloaded] = useState<types.Drawing | null>(null)\n    useEffect(() => {\n        (async () => {\n            const res = await fetch(\n                `https://storage.googleapis.com/pictophone-app-drawings/${drawing.id}`, {\n\n            })\n            const d = validate('CompressedDrawing')(await res.json())\n            setDownloaded(decompressDrawing(d))\n        })()\n    }, [drawing])\n\n    if (downloaded === null) {\n        return <div>Loading...</div>\n    }\n\n    return <Drawing drawing={downloaded} width={width} height={height} />\n\n}\nexport default GameView","import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom'\nimport { FirestoreProvider, FirestoreCollection, FirestoreDocument } from 'react-firestore';\n\nimport * as types from './types'\n\ntype HomeProps = {\n    playerId: string\n    dispatch: (a: types.ActionRequest) => void\n}\n\nconst Home: React.FC<HomeProps> = ({ playerId, dispatch }) => {\n    const joinGame = (gameId: string) => dispatch({\n        action: {\n            kind: \"join_game\",\n            playerId,\n            gameId,\n        }\n    })\n\n    return <div>\n        <h1>User page for {playerId}</h1>\n        <JoinGame join={joinGame} />\n        <h2>Existing Games</h2>\n        <FirestoreCollection\n            path={`versions/0/players/${playerId}/games`}\n            render={({ isLoading, data }: { isLoading: boolean, data: any[] }) => (\n                <div>\n                    {\n                        isLoading\n                            ? <span>Loading...</span>\n                            : <div>\n                                {data.map((r) => (\n                                    <div key={r.id}>\n                                        <Link to={`/g/${r.id}?u=${playerId}`}>{r.id}</Link></div>))}\n                            </div>\n                    }\n                </div>\n            )} />\n    </div>\n}\n\nconst JoinGame = ({ join }: {\n    join: (gid: string) => void\n}) => {\n    const [gid, setGid] = useState(\"\")\n    return <div>\n        <h2>Join A Game</h2>\n        <form onSubmit={(e) => { e.preventDefault(); join(gid) }}>\n            <input\n                type=\"text\"\n                value={gid} onChange={e => setGid(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </div>\n}\n\nexport default Home","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport firebase from '@firebase/app';\nimport '@firebase/firestore';\nimport { FirestoreProvider, FirestoreCollection, FirestoreDocument } from 'react-firestore';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    useParams, useHistory, useLocation,\n    Route, Link, match, RouteComponentProps\n} from \"react-router-dom\";\nimport * as types from './types';\nimport { validate } from './types.validator'\n\nimport GameView from './GameView'\nimport Home from './Home'\nimport Config from './config'\n\nconst config = {\n    projectId: 'pictophone-app',\n};\n\nconst app = firebase.initializeApp(config);\nconst db = app.firestore!();\n\nconst SignIn: React.FC = () => {\n    const [id, setId] = useState<string>('')\n    const history = useHistory()\n\n    return <div>\n        <h1>Sign In</h1>\n\n        <form onSubmit={() => history.push('?u=' + id)}>\n            <input\n                type=\"text\" value={id} onChange={e => setId(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </div>\n}\n\ntype GamePageParams = {\n    playerId: string\n    dispatch: (a: types.ActionRequest) => void\n}\n\nconst GamePage: React.FC<GamePageParams> = ({ playerId, dispatch }) => {\n    const { gameId } = useParams()\n\n    const startGame = () => dispatch({\n        action: {\n            kind: \"start_game\",\n            playerId: playerId!,\n            gameId: gameId!\n        }\n    })\n\n    const submitWord = (word: string) => dispatch({\n        action: {\n            kind: \"make_move\",\n            playerId: playerId!,\n            gameId: gameId!,\n            submission: {kind: \"word\", word}\n        }\n    })\n\n     const submitDrawing = (drawing: types.Drawing) => dispatch({\n        action: {\n            kind: \"make_move\",\n            playerId: playerId!,\n            gameId: gameId!,\n            submission: {kind: \"drawing\", drawing: {id: 'request/0'}}\n        },\n        uploads: {\n            'request/0': {kind: \"drawing\", drawing}\n        }\n    })\n\n    return <FirestoreDocument\n        path={`versions/0/players/${playerId}/games/${gameId}`}\n        render={({ isLoading, data }: { isLoading: boolean, data: any }) => {\n            if (isLoading) {\n                return <span>Loading...</span>;\n            }\n            const pg: types.PlayerGame = validate('PlayerGame')(data);\n            return <GameView\n                playerGame={pg}\n                startGame={startGame}\n                submitWord={submitWord}\n                submitDrawing={submitDrawing}\n            />\n        }}\n    />\n}\n\n\n\n\nasync function postit(body: types.ActionRequest): Promise<void> {\n    const res = await fetch(Config().backendAddr + '/action', {\n        method: 'post',\n        body: JSON.stringify(body),\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',       // receive json\n        },\n    });\n}\n\nconst Content: React.FC = () => {\n    const urlParams = new URLSearchParams(useLocation().search);\n    const playerId = urlParams.get('u');\n\n    if (playerId === null) {\n        return <SignIn />\n    }\n\n    const dispatch = async (a: types.ActionRequest): Promise<void> => {\n        await postit(a)\n    }\n\n    return <Switch>\n        <Route path=\"/\" exact>\n            <Home playerId={playerId} dispatch={dispatch} />\n        </Route>\n\n        <Route path=\"/g/:gameId\" exact>\n            <GamePage playerId={playerId} dispatch={dispatch} />\n        </Route>\n    </Switch>\n}\n\nconst App: React.FC = () => {\n    return <FirestoreProvider firebase={firebase}>\n        <Router>\n            <Content />\n        </Router>\n    </FirestoreProvider>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}