{"version":3,"sources":["watch.ts","navigation.ts","App.tsx","serviceWorker.ts","gen/pictophone/V0_1ServiceClientPb.ts","index.tsx","gen/pictophone/v0_1_pb.js"],"names":["fromConstant","value","next","Promise","race","fromIterator","iter","init","a","done","parseLocation","pathname","segments","split","console","log","length","page","gameId","playerId","serializeLocation","location","stateFromLocation","backend","state","game","getGame","client","req","pb","setGameId","setPlayerId","resp","sink","ixa","on","e","d","toObject","write","Symbol","asyncIterator","Link","dispatch","children","href","nav","onClick","preventDefault","window","history","pushState","kind","View","s","ListGames","useForm","register","handleSubmit","watch","errors","joinRegister","joinHandleSubmit","Fragment","onSubmit","i","name","required","ref","Game","JSON","stringify","g","unstarted","playerIdsList","started","etag","numMistakes","roundNum","numbersPlayedList","handList","className","App","server","fromState2","flat","flat2","flatten","then","popState","resolve","addEventListener","once","document","nextAction","uiFromState","ui","source","action","ns","joinGame","Error","setEtag","makeMove","startGame","foldState","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","PictophoneClient","credentials","options","client_","hostname_","credentials_","options_","methodInfoJoinGame","grpcWeb","MethodInfo","pictophone_v0_1_pb","request","serializeBinary","deserializeBinary","methodInfoStartGame","methodInfoMakeMove","methodInfoGetGame","this","metadata","callback","undefined","rpcCall","unaryCall","serverStreaming","root","getElementById","watchable","ReactDOM","render","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","jspb","require","goog","global","Function","exportSymbol","proto","pictophone","v0_1","ActionRequest","opt_data","Message","initialize","oneofGroups_","inherits","DEBUG","COMPILED","displayName","MethodCase","METHOD_NOT_SET","JOIN_GAME_REQUEST","START_GAME_REQUEST","MAKE_MOVE_REQUEST","prototype","getMethodCase","computeOneofCase","GENERATE_TO_OBJECT","opt_includeInstance","includeInstance","msg","f","obj","joinGameRequest","getJoinGameRequest","JoinGameRequest","startGameRequest","getStartGameRequest","StartGameRequest","makeMoveRequest","getMakeMoveRequest","MakeMoveRequest","$jspbMessageInstance","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readMessage","setJoinGameRequest","setStartGameRequest","setMakeMoveRequest","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","writeMessage","getWrapperField","setOneofWrapperField","clearJoinGameRequest","hasJoinGameRequest","getField","clearStartGameRequest","hasStartGameRequest","clearMakeMoveRequest","hasMakeMoveRequest","ActionResponse","JOIN_GAME_RESPONSE","START_GAME_RESPONSE","MAKE_MOVE_RESPONSE","joinGameResponse","getJoinGameResponse","JoinGameResponse","startGameResponse","getStartGameResponse","StartGameResponse","makeMoveResponse","getMakeMoveResponse","MakeMoveResponse","setJoinGameResponse","setStartGameResponse","setMakeMoveResponse","clearJoinGameResponse","hasJoinGameResponse","clearStartGameResponse","hasStartGameResponse","clearMakeMoveResponse","hasMakeMoveResponse","QueryRequest","GET_GAME_REQUEST","getGameRequest","getGetGameRequest","GetGameRequest","setGetGameRequest","clearGetGameRequest","hasGetGameRequest","QueryResponse","GET_GAME_RESPONSE","getGameResponse","getGetGameResponse","GetGameResponse","setGetGameResponse","clearGetGameResponse","hasGetGameResponse","getFieldWithDefault","readString","getGameId","writeString","getPlayerId","setProto3StringField","ErrorCase","ERROR_NOT_SET","UNKNOWN_ERROR","GAME_ALREADY_STARTED_ERROR","getErrorCase","unknownError","getUnknownError","UnknownError","gameAlreadyStartedError","getGameAlreadyStartedError","GameAlreadyStartedError","setUnknownError","setGameAlreadyStartedError","clearUnknownError","hasUnknownError","clearGameAlreadyStartedError","hasGameAlreadyStartedError","randomSeed","readUint64","setRandomSeed","getRandomSeed","writeUint64","setProto3IntField","PLAYER_NOT_IN_GAME_ERROR","playerNotInGameError","getPlayerNotInGameError","PlayerNotInGameError","setPlayerNotInGameError","clearPlayerNotInGameError","hasPlayerNotInGameError","getEtag","MOVE_ABORTED_ERROR","GAME_NOT_STARTED_ERROR","EMPTY_HAND_ERROR","moveAbortedError","getMoveAbortedError","MoveAbortedError","gameNotStartedError","getGameNotStartedError","GameNotStartedError","emptyHandError","getEmptyHandError","EmptyHandError","setMoveAbortedError","setGameNotStartedError","setEmptyHandError","clearMoveAbortedError","hasMoveAbortedError","clearGameNotStartedError","hasGameNotStartedError","clearEmptyHandError","hasEmptyHandError","setGame","setWrapperField","clearGame","hasGame","repeatedFields_","StateCase","STATE_NOT_SET","UNSTARTED","STARTED","getStateCase","getRepeatedField","getUnstarted","Unstarted","getStarted","Started","addPlayerIds","setUnstarted","setStarted","getPlayerIdsList","writeRepeatedString","readUint32","setNumMistakes","setRoundNum","readPackedUint32","setNumbersPlayedList","setHandList","getNumMistakes","writeUint32","getRoundNum","getNumbersPlayedList","writePackedUint32","getHandList","setField","addNumbersPlayed","opt_index","addToRepeatedField","clearNumbersPlayedList","addHand","clearHandList","setPlayerIdsList","clearPlayerIdsList","clearUnstarted","hasUnstarted","clearStarted","hasStarted","setError","getError","object","extend","exports"],"mappings":"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","file":"static/js/main.f15d76ee.chunk.js","sourcesContent":["\nexport type Operator<A,B> = (a: A) => B;\nexport type WatchableOperator<A,B> = Operator<Watchable<A>, Watchable<B>>;\n\nexport interface Watchable<T> {\n    value: T,\n    next: Promise<Watchable<T>>\n}\n\nexport function fromConstant<T>(value: T):Watchable<T> {\n    return {\n        value,\n        next: Promise.race([]),\n    }\n}\n\nexport function fromIterable<T>(iter: AsyncIterable<T>, init: T): Watchable<T> {\n    return fromIterator(iter[Symbol.asyncIterator](), init);\n}\n\nexport function fromPromise<T>(promise: Promise<T>, init: T): Watchable<T> {\n    return {\n        value: init,\n        next: promise.then(fromConstant),\n    }\n}\n\n\nexport function fromIterator<T>(iter: AsyncIterator<T>, init: T): Watchable<T> {\n    return {\n        value: init,\n        next: (async (): Promise<Watchable<T>> => {\n            let next = await iter.next();\n            if (next.done) {\n                return { value: init, next: Promise.race([]) }\n            } else {\n                return fromIterator(iter, next.value);\n            }\n        })(),\n    }\n}\nexport function map<A, B>(fn: (a: A) => B): WatchableOperator<A,B> {\n    return outer => ({\n        value: fn(outer.value),\n        next: (async () => {\n            return map(fn)(await outer.next);\n        })(),\n    })\n}\n\n\nexport function switchMap<A, B>(fn: (a: A) => Watchable<B>): WatchableOperator<A,B> {\n    const helper = (outer: Watchable<A>, inner: Watchable<B>): Watchable<B> => ({\n        value: inner.value,\n        next: (async () => {\n            type LR = { side: 'outer', value: Watchable<A> } | { side: 'inner', value: Watchable<B> };\n\n            let next: LR = await Promise.race([\n                (async () => ({ side: 'outer', value: await outer.next } as LR))(),\n                (async () => ({ side: 'inner', value: await inner.next } as LR))()]);\n            if (next.side === 'outer') {\n                return helper(next.value, fn(next.value.value));\n            } else {\n                return helper(outer, next.value);\n            }\n\n        })()\n    });\n    return outer=>helper(outer, fn(outer.value));\n    // let inner = fn(outer.value);\n    // return {\n    //     value: inner.value,\n    //     next: (async()=>{\n    //         type LR = { side: 'outer', value: Watchable<A> } | { side: 'inner', value: Watchable<B> };\n\n    //         let next: LR = await Promise.race([\n    //             (async () => ({ side: 'outer', value: await outer.next } as LR))(),\n    //             (async () => ({ side: 'inner', value: await inner.next } as LR))()]);\n    //         if (next.side === 'outer') {\n    //             return switchMap(next.value, fn);\n    //         } else {\n\n    //         }\n\n    //     })()\n    // }\n\n    // type LR<L, R> = { side: 'left', value: L } | { side: 'right', value: R };\n    // type LRT = LR<IteratorResult<A>, IteratorResult<B>>;\n    // let outerIter = iter[Symbol.asyncIterator]();\n    // let innerIter: AsyncIterator<B> | null = null;\n    // let outerNext: Promise<IteratorResult<A>> = outerIter.next();\n    // let innerNext: Promise<IteratorResult<B>> = Promise.race([]);\n\n    // while (true) {\n    //     let next: LRT = await Promise.race([\n    //         (async () => ({ side: 'left', value: await outerNext } as LRT))(),\n    //         (async () => ({ side: 'right', value: await innerNext } as LRT))()]);\n    //     if (next.side === 'left') {\n    //         if (next.value.done) {\n    //             return;\n    //         } else {\n    //             outerNext = outerIter.next();\n    //             innerIter = fn(next.value.value)[Symbol.asyncIterator]();\n    //             innerNext = innerIter.next();\n    //         }\n    //     } else {\n    //         if (next.value.done) {\n    //             innerIter = null;\n    //             innerNext = Promise.race([]);\n    //         } else {\n    //             innerNext = innerIter!.next();\n    //             yield next.value.value;\n    //         }\n    //     }\n    // }\n}\n\n// export function scan<Acc, Val>(fn: (acc: Acc, val:Val) => Acc, seed: Acc): WatchableOperator<Val, Acc> {\n//     const helper = (values : Watchable<Val>, acc: Acc): Watchable<Acc> => {\n//         return  {\n//             value: acc,\n//             next: (async()=>{\n//                 let nextVal = await values.next;\n//                 return helper(nextVal, fn(acc, ))\n//             })(),\n//         }\n//     };\n\n//     return outer=>{\n//         return\n//     };\n// }","\nimport * as watch from './watch';\nimport * as ixa from 'ix/asynciterable';\nimport * as ixaop from 'ix/asynciterable/operators';\n\nexport type Location = Homepage | Game | Unknown\n\nexport interface Homepage {\n    page: 'home'\n}\n\nexport interface Game {\n    page: 'game'\n    gameId: string,\n    playerId: string,\n}\n\nexport interface Unknown {\n    page: 'unknown'\n}\n\nexport class Nav {\n    // public location : \n    // private current: Location = { page: 'home' };\n    private sink = new ixa.AsyncSink<Location>();\n\n    watch(): watch.Watchable<Location> {\n        // let iter = ixa.fromEvent<PopStateEvent>(window, 'popstate').pipe(\n        //     ixaop.map(e => ({\n        //     }))\n        // );\n        return watch.fromIterator(this.sink, parseLocation(window.location.pathname));\n    }\n\n    push(location: Location) {\n        // this.current = location;\n        window.history.pushState({}, '', serializeLocation(location))\n        this.sink.write(parseLocation(serializeLocation(location)));\n    }\n}\n\nexport function parseLocation(pathname : string): Location {\n    const segments = pathname.split('/');\n    console.log(segments)\n    if (segments.length === 2 && segments[1] === '') {\n        return {page: 'home'}\n    }\n    if (segments.length === 5 && segments[1] === 'games' && segments[3] === 'player') {\n        return {page: 'game', gameId: segments[2], playerId: segments[4]}\n    }\n    return {page: 'unknown'}\n}\n\nexport function serializeLocation(location : Location): string {\n    switch (location.page) {\n        case 'home':\n            return '/'\n        case 'game':\n            return `/games/${location.gameId}/player/${location.playerId}`\n        case 'unknown':\n            return '/404'\n    }\n}","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\nimport React, { useEffect, useState } from 'react'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\nimport { BrowserRouter as Router, Redirect, Route, Switch, useLocation, useParams } from \"react-router-dom\"\nimport './App.css'\nimport * as base from './base'\nimport Config from './config'\nimport GameView from './GameView'\nimport Home from './Home'\n// import { Action } from './model/1.1'\nimport * as model from './model/1.1'\nimport * as db from './db';\nimport { validate as validateModel } from './model/1.1.validator'\nimport { Drawing, Upload, UploadResponse } from './model/rpc'\nimport { validate as validateRpc } from './model/rpc.validator'\nimport { app } from './context';\nimport { useValue } from './db';\nimport * as tables from './tables';\nimport { sha256 } from 'js-sha256';\nimport { Channel } from 'queueable';\n\nimport * as pb from './gen/pictophone/v0_1_pb';\nimport * as pb2 from './gen/pictophone/V0_1ServiceClientPb';\n\nimport { Watchable, fromIterable } from './watch'\nimport * as watch from './watch'\nimport * as ixa from 'ix/asynciterable';\nimport * as ixaop from 'ix/asynciterable/operators';\nimport { pipeWith } from 'pipe-ts';\nimport { useForm } from \"react-hook-form\";\nimport { ClientReadableStream } from 'grpc-web'\nimport * as nav from './navigation';\n\n\nexport interface AppConfig {\n    server: pb2.PictophoneClient\n}\n\n// type AuthInfo = { ready: false } | { ready: true, user: firebase.User | null }\n\n// interface Intent {\n//     // authInfo: AuthInfo\n//     location: nav.Location\n// }\n\n\ntype State = {\n    //     state: 'LOADING'\n    // } | {\n    //     state: 'SIGNED_OUT'\n    // } | {\n    state: 'LIST_GAMES'\n} | {\n    state: 'SHOW_GAME'\n    gameId: string\n    playerId: string\n    game: Watchable<pb.GetGameResponse.AsObject | null>\n} | {\n    state: '404'\n};\n\nfunction foldState(backend: pb2.PictophoneClient, state: State, action: Action): State {\n    // if (!intent.authInfo.ready) {\n    //     return { state: 'LOADING' }\n    // }\n    // if (intent.authInfo.user === null) {\n    //     return { state: 'SIGNED_OUT' }\n    // }\n\n    switch (action.kind) {\n        case 'navigate': {\n            // window.history.pushState(action.location, '', nav.serializeLocation(action.location))\n            return stateFromLocation(backend, action.location)\n        }\n        case 'join': {\n            const req = new pb.JoinGameRequest();\n            req.setGameId(action.gameId);\n            req.setPlayerId(action.playerId);\n            backend.joinGame(req, null).then(\n                resp => console.log(\"JOIN RESPONSE: \", resp.toObject()));\n            return state;\n        } case 'play': {\n            if (state.state !== 'SHOW_GAME' || state.game.value === null || !state.game.value.game || !state.game.value.game.started) {\n                throw new Error(\"invalid state for starting game.\")\n            }\n            const req = new pb.MakeMoveRequest();\n            req.setGameId(state.gameId);\n            req.setPlayerId(state.playerId);\n            req.setEtag(state.game.value.game.started.etag);\n            backend.makeMove(req, null).then(\n                resp => console.log(\"PLAY RESPONSE: \", resp.toObject()));\n            return state;\n        }\n        case 'start': {\n            if (state.state !== 'SHOW_GAME') {\n                throw new Error(\"invalid state for starting game.\")\n            }\n            const req = new pb.StartGameRequest();\n            req.setGameId(state.gameId);\n            req.setPlayerId(state.playerId);\n            backend.startGame(req, null).then(\n                resp => console.log(\"START RESPONSE: \", resp.toObject()));\n            return state;\n        }\n\n    }\n}\nfunction stateFromLocation(backend: pb2.PictophoneClient, location: nav.Location): State {\n    switch (location.page) {\n        case 'home':\n            return {\n                state: 'LIST_GAMES'\n            }\n        case 'game':\n            return {\n                state: 'SHOW_GAME',\n                gameId: location.gameId,\n                playerId: location.playerId,\n                game: getGame(backend, location.gameId, location.playerId),\n            }\n        case 'unknown':\n            return { state: '404' };\n    }\n}\n\n\n\n// function flatten(gs: State): Watchable<ViewData> {\n//     switch (gs.kind) {\n//         case 'LIST_GAMES':\n//             return watch.fromConstant({ state: 'LIST_GAMES' });\n//         case 'SHOW_GAME':\n//             return pipeWith(gs.game,\n//                 watch.map(game => ({ state: 'SHOW_GAME', gameId: gs.gameId, playerId: gs.playerId, game })));\n//     }\n// }\n\n// function render(data: ViewData): [JSX.Element, AsyncIterable<Action>] {\n//     let sink = new ixa.AsyncSink<Action>();\n//     return [<View s={data} dispatch={a=>sink.write(a)} />, sink];\n\n// }\n\n// interface Globals {\n//     authInfo: Watchable<AuthInfo>\n//     location: Watchable<nav.Location>\n// }\n\n\ntype Flatten<T> = T extends Watchable<infer U> ? U : T extends Object ? { [K in keyof T]: Flatten<T[K]> } : T;\ntype Flattened<T> = Watchable<Flatten<T>>;\n\n// interface Globals {\n//     authInfo: AuthInfo\n//     location: nav.Location\n// }\n\n// function flattenGlobals(input: Watchable<Globals>): Watchable<Flatten<Globals>> {\n//     const f = (w: Globals): Watchable<Flatten<Globals>> => ({\n//         value: {\n//             authInfo: w.authInfo.value,\n//             location: w.location.value,\n//         },\n//         next: Promise.race([w.authInfo.next.then(authInfo => f({\n//             authInfo,\n//             location: w.location\n//         })),\n//         w.location.next.then(location => f({\n//             authInfo: w.authInfo,\n//             location,\n//         }))])\n//     });\n\n//     return pipeWith(input, watch.switchMap(input => f(input)));\n// }\n\nfunction getGame(client: pb2.PictophoneClient, gameId: string, playerId: string): Watchable<pb.GetGameResponse.AsObject | null> {\n    const req = new pb.GetGameRequest();\n    req.setGameId(gameId);\n    req.setPlayerId(playerId);\n    const resp = client.getGame(req) as ClientReadableStream<pb.GetGameResponse>;\n\n    const sink = new ixa.AsyncSink<pb.GetGameResponse.AsObject>();\n    resp.on(\"error\", e => console.log(\"TODO: handle this\", e));\n    resp.on(\"data\", d => { console.log(\"GAME: \", d.toObject()); sink.write(d.toObject()) });\n    return watch.fromIterable(sink, null);\n}\n\ntype Action = {\n    kind: \"navigate\",\n    location: nav.Location\n} | {\n    kind: \"join\",\n    gameId: string,\n    playerId: string,\n} | {\n    kind: \"start\",\n} | {\n    kind: 'play'\n};\n\nconst Link: React.FC<React.PropsWithChildren<{ location: nav.Location, dispatch: (a: Action) => void }>> = ({ location, dispatch, children }) => {\n    return <a href={nav.serializeLocation(location)} onClick={e => {\n        e.preventDefault();\n        window.history.pushState({}, '', nav.serializeLocation(location));\n        dispatch({ kind: 'navigate', location });\n    }\n    }>\n        {children}\n    </a>;\n};\n\nexport function App({ server }: AppConfig): Watchable<JSX.Element> {\n    const initial = stateFromLocation(server, nav.parseLocation(window.location.pathname));\n\n    const uiFromState = (state: Flatten<State>): [JSX.Element, Promise<Action>] => {\n        let popState: Promise<Action> = new Promise((resolve) => {\n            window.addEventListener('popstate', resolve, { once: true });\n        }).then((): Action => ({ kind: 'navigate', location: nav.parseLocation(document.location.pathname) }));\n        const sink = new ixa.AsyncSink<Action>();\n        const nextAction = ixa.first(sink).then(a => a!);\n\n        return [<View s={state} dispatch={a => sink.write(a)} />,\n        Promise.race([nextAction, popState])];\n    };\n\n    const fromState2 = (state: Watchable<State>): Watchable<JSX.Element> => {\n        let flat = ((): Flatten<State> => {\n            switch (state.value.state) {\n                case '404':\n                case 'LIST_GAMES':\n                    return state.value;\n                case 'SHOW_GAME':\n                    return { ...state.value, game: state.value.game.value };\n            }\n        })();\n        let flat2 = ((): Watchable<State> => {\n            function flatten(state: Watchable<State>): Watchable<State> {\n                switch (state.value.state) {\n                    case '404':\n                    case 'LIST_GAMES':\n                        return state;\n                    case 'SHOW_GAME':\n                        return {\n                            value: state.value,\n                            next: Promise.race([\n                                state.next,\n                                state.value.game.next.then(game => flatten(watch.fromConstant({ ...state.value, game }))),\n                            ])\n                        };\n                }\n            }\n            return flatten(state)\n        })();\n\n        let [ui, nextAction] = uiFromState(flat);\n        type NextState = { source: 'state', state: Watchable<State> } | { source: 'action', action: Action };\n        const nextState: Promise<NextState> = Promise.race([\n            flat2.next.then((state: Watchable<State>): NextState => ({ source: 'state', state })),\n            nextAction.then((action: Action): NextState => ({ source: 'action', action })),\n        ]);\n        return {\n            value: ui,\n            next: nextState.then(ns => {\n                if (ns.source === 'state') {\n                    return fromState2(ns.state);\n                } else {\n                    return fromState2(watch.fromConstant(foldState(server, state.value, ns.action)));\n                }\n            })\n        }\n    };\n    return fromState2(watch.fromConstant(initial));\n\n    // const navigation = new nav.Nav();\n\n    // const authInfoPromise: Promise<AuthInfo> = new Promise((resolve, reject) => auth.onAuthStateChanged((user: firebase.User | null) => resolve({ ready: true, user })));;\n    // const globals: Watchable<Globals> = watch.fromConstant({\n    //     authInfo: watch.fromPromise(authInfoPromise, { ready: false }),\n    //     location: watch.fromConstant(nav.parseLocation(window.location.pathname)),\n    // });\n\n\n\n    // const channel = new Channel<nav.Location>();\n    // const states: Watchable<ViewData> = pipeWith(globals, flattenGlobals, watch.switchMap(globals => {\n    //     if (!globals.authInfo.ready) {\n    //         return watch.fromConstant({ state: 'LOADING' })\n    //     }\n    //     if (globals.authInfo.user === null) {\n    //         return watch.fromConstant({ state: 'SIGNED_OUT' })\n    //     }\n\n\n    //     return flatten(integrate(server, globals.location));\n    // }));\n\n    // const integrate = (a: Action): void => {\n    //     switch (a.kind) {\n    //         case 'navigate':\n    //             navigation.push(a.location);\n    //             break;\n    //         case 'join': {\n    //             const req = new pb.JoinGameRequest();\n    //             req.setGameId(a.gameId);\n    //             req.setPlayerId(a.playerId);\n    //             server.joinGame(req, null).then(\n    //                 resp =>\n    //                     console.log(\"JOIN RESPONSE: \", resp.toObject()));\n    //             break\n    //         }\n    //         case 'start': {\n    //             const req = new pb.StartGameRequest();\n    //             req.setGameId(a.gameId);\n    //             req.setPlayerId(a.playerId);\n    //             server.startGame(req, null).then(\n    //                 resp =>\n    //                     console.log(\"START RESPONSE: \", resp.toObject()));\n    //             break\n    //         }\n    //         case 'play': {\n    //             const req = new pb.MakeMoveRequest();\n    //             req.setGameId(a.gameId);\n    //             req.setPlayerId(a.playerId);\n    //             req.setEtag(a.etag)\n    //             server.makeMove(req, null).then(\n    //                 resp =>\n    //                     console.log(\"PLAY RESPONSE: \", resp.toObject()));\n    //             break\n    //         }\n    //     }\n    // };\n\n    // const elemAndActions = pipeWith(states, watch.map(data => [data, render(data)]));\n\n    // const f = (eAndA: Watchable<[ViewData, [JSX.Element, AsyncIterable<Action>]]>): Watchable<JSX.Element> => ({\n    //     value: eAndA.value[1][0],\n    //     next: Promise.race([\n    //         eAndA.next.then(f),\n    //         ixa.first(eAndA.value[1][1]).then(action=> ),\n    //     ])\n    // });\n\n    // // return {\n    // //     value: elem_and_actions.value[0],\n    // //     next: Promise.race(elem_and_actions.next.then()\n    // // }\n    // return f(elemAndActions)\n}\n\n\n\ninterface ViewProps {\n    s: Flatten<State>\n    dispatch: (action: Action) => void\n}\n\nconst View: React.FC<ViewProps> = ({ s, dispatch }) => {\n    switch (s.state) {\n        case 'LIST_GAMES': return <ListGames dispatch={dispatch}></ListGames>;\n        case 'SHOW_GAME': return <Game gameId={s.gameId} playerId={s.playerId} game={s.game} dispatch={dispatch}></Game>;\n        case '404': return <div>404</div>;\n    }\n};\n\ninterface ListGamesProps {\n    dispatch: (a: Action) => void\n}\n\nconst ListGames: React.FC<ListGamesProps> = ({ dispatch }) => {\n    type Inputs = {\n        gameId: string,\n        playerId: string,\n    };\n    const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n    const { register: joinRegister, handleSubmit: joinHandleSubmit } = useForm<Inputs>();\n    const onSubmit = (i: Inputs) => {\n        const location: nav.Location = { page: 'game', ...i };\n        window.history.pushState({}, '', nav.serializeLocation(location));\n        dispatch({ kind: \"navigate\", location });\n    }\n    const onJoin = (i: Inputs) => {\n        dispatch({ kind: \"join\", ...i });\n    };\n    return <React.Fragment>\n        <h1>Go to a game</h1>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <label>Game Id: <input name=\"gameId\" required ref={register} /></label>\n            <label>Player Id: <input name=\"playerId\" required ref={register} /></label>\n            <button>Submit</button>\n        </form>\n\n        <h1>Join a game</h1>\n        <form onSubmit={joinHandleSubmit(onJoin)}>\n            <label>Game Id: <input name=\"gameId\" required ref={joinRegister} /></label>\n            <label>Player Id: <input name=\"playerId\" required ref={joinRegister} /></label>\n            <button>Submit</button>\n        </form>\n\n    </React.Fragment>\n};\n\ninterface GameProps {\n    gameId: string\n    playerId: string\n    game: pb.GetGameResponse.AsObject | null\n    dispatch: (a: Action) => void\n}\n\nconst Game: React.FC<GameProps> = ({ gameId, playerId, game, dispatch }) => {\n    if (!game) {\n        return <React.Fragment>\n            <Link location={{ page: 'home' }} dispatch={dispatch}>Get back</Link>\n            <h1>Game {gameId}</h1>\n            <pre>Loading</pre>\n        </React.Fragment>\n\n    }\n\n    if (!game.game) {\n        return <React.Fragment>\n            <Link location={{ page: 'home' }} dispatch={dispatch}>Get back</Link>\n            <h1>Game {gameId}</h1>\n            <pre>{JSON.stringify(game)}</pre>\n        </React.Fragment>\n    }\n\n    let g = game.game;\n    if (g.unstarted) {\n        return <React.Fragment>\n            <Link location={{ page: 'home' }} dispatch={dispatch}>Get back</Link>\n            <h1>Game {gameId}</h1>\n            <pre>\n                Players: {JSON.stringify(g.playerIdsList)}\n            </pre>\n            <button onClick={() => dispatch({ kind: 'start' })}>Start Game</button>\n        </React.Fragment>\n\n    } else if (g.started) {\n        let etag = g.started.etag;\n        return <React.Fragment>\n            <Link location={{ page: 'home' }} dispatch={dispatch}>Get back</Link>\n            <h1>Game {gameId}</h1>\n            <pre>Players: {JSON.stringify(g.playerIdsList)}</pre>\n            <pre>Mistakes: {g.started.numMistakes}</pre>\n            <pre>Round: {g.started.roundNum}</pre>\n            <pre>Already played: {JSON.stringify(g.started.numbersPlayedList)}</pre>\n            <pre>Your hand: {JSON.stringify(g.started.handList)}</pre>\n            <button className=\"play\" onClick={() => dispatch({ kind: 'play' })}>Play</button>\n            <pre>\n                All: {JSON.stringify(g, null, 2)}\n            </pre>\n\n        </React.Fragment>\n    } else {\n        return <React.Fragment>\n            <Link location={{ page: 'home' }} dispatch={dispatch}>Get back</Link>\n            <h1>Game {gameId}</h1>\n            <pre>Error: {JSON.stringify(game)}</pre>\n        </React.Fragment>\n    }\n};\n\n// // const app = firebase.initializeApp(Config().firebase)\n// const auth = app.auth()\n// const storage = app.storage()\n\n// const uiConfig = {\n//     // Popup signin flow rather than redirect flow.\n//     signInFlow: 'popup',\n//     signInOptions: [\n//         firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n//         firebase.auth.EmailAuthProvider.PROVIDER_ID,\n//     ],\n//     callbacks: {\n//         // Avoid redirects after sign-in.\n//         signInSuccessWithAuthResult: () => false\n//     }\n// }\n\n// const SignInPage: React.FC = () => {\n//     return <React.Fragment>\n//         <h1>Hey it's Pictophone!</h1>\n//         <p>Care to sign in?</p>\n//         <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n//     </React.Fragment>\n// }\n\n// type GamePageProps = {\n//     playerId: string\n//     dispatch: base.Dispatch\n// }\n\n// async function getPlayerGame(playerId: string, gameId: string): Promise<model.PlayerGame> {\n//     const fetched = await fetch(`${Config().backendAddr}/1.1/players/${playerId}/games/${gameId}`, {\n//         method: 'get',\n//         mode: 'cors',\n//         headers: {\n//             'Content-Type': 'application/json',\n//             'Accept': 'application/json',       // receive json\n//         },\n//     })\n//     return validateModel('PlayerGame')(await fetched.json())\n// }\n\n// export function usePlayerGame(playerId: string, gameId: string): db.Value<model.PlayerGame> {\n//     const token = db.useConsistencyToken(`games/${gameId}`)\n\n//     const [playerGame, setPlayerGame] = useState<db.Value<model.PlayerGame>>({ state: 'loading' });\n\n//     useEffect(() => {\n//         console.log(\"LOAD PG\")\n//         getPlayerGame(playerId, gameId).then(gl => setPlayerGame({\n//             state: 'ready',\n//             value: gl\n//         }))\n//     }, [playerId, token])\n\n//     return playerGame\n// }\n\n// const GamePage: React.FC<GamePageProps> = ({ playerId, dispatch }) => {\n//     const { gameId } = useParams()\n//     const game = usePlayerGame(playerId, gameId)\n\n//     const startGame = () => dispatch.action({\n//         kind: \"start_game\",\n//         playerId: playerId!,\n//         gameId: gameId!\n//     })\n\n//     const submitWord = (word: string) => dispatch.action({\n//         kind: \"make_move\",\n//         playerId: playerId!,\n//         gameId: gameId!,\n//         submission: { kind: \"word\", word }\n//     })\n\n//     const submitDrawing = async (drawing: Drawing) => {\n//         const resp = await dispatch.upload(drawing)\n//         await dispatch.action({\n//             kind: \"make_move\",\n//             playerId: playerId!,\n//             gameId: gameId!,\n//             submission: { kind: \"drawing\", drawingId: resp.id }\n//         })\n//     }\n\n//     switch (game.state) {\n//         case 'loading':\n//             return <span>Loading...</span>\n//         case 'not_found':\n//             return <span>Not found :(</span>\n//         case 'ready':\n//             return (<GameView\n//                 playerGame={game.value}\n//                 startGame={startGame}\n//                 submitWord={submitWord}\n//                 submitDrawing={submitDrawing}\n//             />)\n//     }\n// }\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","/**\n * @fileoverview gRPC-Web generated client stub for pictophone.v0_1\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\nimport * as grpcWeb from 'grpc-web';\n\nimport * as pictophone_v0_1_pb from '../pictophone/v0_1_pb';\n\n\nexport class PictophoneClient {\n  client_: grpcWeb.AbstractClientBase;\n  hostname_: string;\n  credentials_: null | { [index: string]: string; };\n  options_: null | { [index: string]: any; };\n\n  constructor (hostname: string,\n               credentials?: null | { [index: string]: string; },\n               options?: null | { [index: string]: any; }) {\n    if (!options) options = {};\n    if (!credentials) credentials = {};\n    options['format'] = 'text';\n\n    this.client_ = new grpcWeb.GrpcWebClientBase(options);\n    this.hostname_ = hostname;\n    this.credentials_ = credentials;\n    this.options_ = options;\n  }\n\n  methodInfoJoinGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.JoinGameResponse,\n    (request: pictophone_v0_1_pb.JoinGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.JoinGameResponse.deserializeBinary\n  );\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.JoinGameResponse>;\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.JoinGameResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.JoinGameResponse>;\n\n  joinGame(\n    request: pictophone_v0_1_pb.JoinGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.JoinGameResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/JoinGame',\n        request,\n        metadata || {},\n        this.methodInfoJoinGame,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/JoinGame',\n    request,\n    metadata || {},\n    this.methodInfoJoinGame);\n  }\n\n  methodInfoStartGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.StartGameResponse,\n    (request: pictophone_v0_1_pb.StartGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.StartGameResponse.deserializeBinary\n  );\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.StartGameResponse>;\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.StartGameResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.StartGameResponse>;\n\n  startGame(\n    request: pictophone_v0_1_pb.StartGameRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.StartGameResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/StartGame',\n        request,\n        metadata || {},\n        this.methodInfoStartGame,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/StartGame',\n    request,\n    metadata || {},\n    this.methodInfoStartGame);\n  }\n\n  methodInfoMakeMove = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.MakeMoveResponse,\n    (request: pictophone_v0_1_pb.MakeMoveRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.MakeMoveResponse.deserializeBinary\n  );\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null): Promise<pictophone_v0_1_pb.MakeMoveResponse>;\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.MakeMoveResponse) => void): grpcWeb.ClientReadableStream<pictophone_v0_1_pb.MakeMoveResponse>;\n\n  makeMove(\n    request: pictophone_v0_1_pb.MakeMoveRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.Error,\n               response: pictophone_v0_1_pb.MakeMoveResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/pictophone.v0_1.Pictophone/MakeMove',\n        request,\n        metadata || {},\n        this.methodInfoMakeMove,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/pictophone.v0_1.Pictophone/MakeMove',\n    request,\n    metadata || {},\n    this.methodInfoMakeMove);\n  }\n\n  methodInfoGetGame = new grpcWeb.AbstractClientBase.MethodInfo(\n    pictophone_v0_1_pb.GetGameResponse,\n    (request: pictophone_v0_1_pb.GetGameRequest) => {\n      return request.serializeBinary();\n    },\n    pictophone_v0_1_pb.GetGameResponse.deserializeBinary\n  );\n\n  getGame(\n    request: pictophone_v0_1_pb.GetGameRequest,\n    metadata?: grpcWeb.Metadata) {\n    return this.client_.serverStreaming(\n      this.hostname_ +\n        '/pictophone.v0_1.Pictophone/GetGame',\n      request,\n      metadata || {},\n      this.methodInfoGetGame);\n  }\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { PictophoneClient } from './gen/pictophone/V0_1ServiceClientPb';\nimport * as nav from './navigation';\n\n// (async () => {\n//     const root = document.getElementById('root');\n//     const config = {};\n//     for await (const view of App(config)) {\n//         ReactDOM.render(view, root);        \n//     }\n// })();\n\n(async () => {\n    const root = document.getElementById('root');\n    const config = {\n        server: new PictophoneClient(\"https://envoy-f2dxgbokta-uc.a.run.app\"),\n        // server: new PictophoneClient(\"http://localhost:8080\")\n    };\n\n    \n    let watchable = App(config);\n    while (true) {\n        ReactDOM.render(watchable.value, root);\n        watchable = await watchable.next;\n    }\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.pictophone.v0_1.ActionRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.ActionResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.EmptyHandError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game.Started', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.Game.Unstarted', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GameAlreadyStartedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GameNotStartedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GetGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.GetGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.JoinGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.JoinGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MakeMoveRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MakeMoveResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.MoveAbortedError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.PlayerNotInGameError', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.QueryRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.QueryResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.StartGameRequest', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.StartGameResponse', null, global);\ngoog.exportSymbol('proto.pictophone.v0_1.UnknownError', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.ActionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.ActionRequest.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.ActionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.ActionRequest.displayName = 'proto.pictophone.v0_1.ActionRequest';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.ActionRequest.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.ActionRequest.MethodCase = {\n  METHOD_NOT_SET: 0,\n  JOIN_GAME_REQUEST: 1,\n  START_GAME_REQUEST: 2,\n  MAKE_MOVE_REQUEST: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.ActionRequest.MethodCase}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.ActionRequest.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.ActionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.ActionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    joinGameRequest: (f = msg.getJoinGameRequest()) && proto.pictophone.v0_1.JoinGameRequest.toObject(includeInstance, f),\n    startGameRequest: (f = msg.getStartGameRequest()) && proto.pictophone.v0_1.StartGameRequest.toObject(includeInstance, f),\n    makeMoveRequest: (f = msg.getMakeMoveRequest()) && proto.pictophone.v0_1.MakeMoveRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.ActionRequest}\n */\nproto.pictophone.v0_1.ActionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.ActionRequest;\n  return proto.pictophone.v0_1.ActionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.ActionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.ActionRequest}\n */\nproto.pictophone.v0_1.ActionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.JoinGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader);\n      msg.setJoinGameRequest(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.StartGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader);\n      msg.setStartGameRequest(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.MakeMoveRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader);\n      msg.setMakeMoveRequest(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.ActionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.ActionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getJoinGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getStartGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getMakeMoveRequest();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional JoinGameRequest join_game_request = 1;\n * @return {?proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getJoinGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.JoinGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.JoinGameRequest, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.JoinGameRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setJoinGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearJoinGameRequest = function() {\n  this.setJoinGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasJoinGameRequest = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional StartGameRequest start_game_request = 2;\n * @return {?proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getStartGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.StartGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.StartGameRequest, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.StartGameRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setStartGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearStartGameRequest = function() {\n  this.setStartGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasStartGameRequest = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional MakeMoveRequest make_move_request = 3;\n * @return {?proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.getMakeMoveRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.MakeMoveRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MakeMoveRequest, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MakeMoveRequest|undefined} value */\nproto.pictophone.v0_1.ActionRequest.prototype.setMakeMoveRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.ActionRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionRequest.prototype.clearMakeMoveRequest = function() {\n  this.setMakeMoveRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionRequest.prototype.hasMakeMoveRequest = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.ActionResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.ActionResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.ActionResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.ActionResponse.displayName = 'proto.pictophone.v0_1.ActionResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.ActionResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.ActionResponse.MethodCase = {\n  METHOD_NOT_SET: 0,\n  JOIN_GAME_RESPONSE: 1,\n  START_GAME_RESPONSE: 2,\n  MAKE_MOVE_RESPONSE: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.ActionResponse.MethodCase}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.ActionResponse.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.ActionResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.ActionResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    joinGameResponse: (f = msg.getJoinGameResponse()) && proto.pictophone.v0_1.JoinGameResponse.toObject(includeInstance, f),\n    startGameResponse: (f = msg.getStartGameResponse()) && proto.pictophone.v0_1.StartGameResponse.toObject(includeInstance, f),\n    makeMoveResponse: (f = msg.getMakeMoveResponse()) && proto.pictophone.v0_1.MakeMoveResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.ActionResponse}\n */\nproto.pictophone.v0_1.ActionResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.ActionResponse;\n  return proto.pictophone.v0_1.ActionResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.ActionResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.ActionResponse}\n */\nproto.pictophone.v0_1.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.JoinGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader);\n      msg.setJoinGameResponse(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.StartGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader);\n      msg.setStartGameResponse(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.MakeMoveResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader);\n      msg.setMakeMoveResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.ActionResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.ActionResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.ActionResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getJoinGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getStartGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getMakeMoveResponse();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional JoinGameResponse join_game_response = 1;\n * @return {?proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getJoinGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.JoinGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.JoinGameResponse, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.JoinGameResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setJoinGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearJoinGameResponse = function() {\n  this.setJoinGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasJoinGameResponse = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional StartGameResponse start_game_response = 2;\n * @return {?proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getStartGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.StartGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.StartGameResponse, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.StartGameResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setStartGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearStartGameResponse = function() {\n  this.setStartGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasStartGameResponse = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional MakeMoveResponse make_move_response = 3;\n * @return {?proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.getMakeMoveResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.MakeMoveResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MakeMoveResponse, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MakeMoveResponse|undefined} value */\nproto.pictophone.v0_1.ActionResponse.prototype.setMakeMoveResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.ActionResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.ActionResponse.prototype.clearMakeMoveResponse = function() {\n  this.setMakeMoveResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.ActionResponse.prototype.hasMakeMoveResponse = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.QueryRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.QueryRequest.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.QueryRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.QueryRequest.displayName = 'proto.pictophone.v0_1.QueryRequest';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.QueryRequest.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.QueryRequest.MethodCase = {\n  METHOD_NOT_SET: 0,\n  GET_GAME_REQUEST: 1\n};\n\n/**\n * @return {proto.pictophone.v0_1.QueryRequest.MethodCase}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.QueryRequest.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.QueryRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.QueryRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.QueryRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    getGameRequest: (f = msg.getGetGameRequest()) && proto.pictophone.v0_1.GetGameRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.QueryRequest}\n */\nproto.pictophone.v0_1.QueryRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.QueryRequest;\n  return proto.pictophone.v0_1.QueryRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.QueryRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.QueryRequest}\n */\nproto.pictophone.v0_1.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.GetGameRequest;\n      reader.readMessage(value,proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader);\n      msg.setGetGameRequest(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.QueryRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.QueryRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGetGameRequest();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional GetGameRequest get_game_request = 1;\n * @return {?proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.getGetGameRequest = function() {\n  return /** @type{?proto.pictophone.v0_1.GetGameRequest} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GetGameRequest, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GetGameRequest|undefined} value */\nproto.pictophone.v0_1.QueryRequest.prototype.setGetGameRequest = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.QueryRequest.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.QueryRequest.prototype.clearGetGameRequest = function() {\n  this.setGetGameRequest(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.QueryRequest.prototype.hasGetGameRequest = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.QueryResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.QueryResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.QueryResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.QueryResponse.displayName = 'proto.pictophone.v0_1.QueryResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.QueryResponse.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.QueryResponse.MethodCase = {\n  METHOD_NOT_SET: 0,\n  GET_GAME_RESPONSE: 1\n};\n\n/**\n * @return {proto.pictophone.v0_1.QueryResponse.MethodCase}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.getMethodCase = function() {\n  return /** @type {proto.pictophone.v0_1.QueryResponse.MethodCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.QueryResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.QueryResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.QueryResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    getGameResponse: (f = msg.getGetGameResponse()) && proto.pictophone.v0_1.GetGameResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.QueryResponse}\n */\nproto.pictophone.v0_1.QueryResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.QueryResponse;\n  return proto.pictophone.v0_1.QueryResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.QueryResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.QueryResponse}\n */\nproto.pictophone.v0_1.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.GetGameResponse;\n      reader.readMessage(value,proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader);\n      msg.setGetGameResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.QueryResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.QueryResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.QueryResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGetGameResponse();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional GetGameResponse get_game_response = 1;\n * @return {?proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.getGetGameResponse = function() {\n  return /** @type{?proto.pictophone.v0_1.GetGameResponse} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GetGameResponse, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GetGameResponse|undefined} value */\nproto.pictophone.v0_1.QueryResponse.prototype.setGetGameResponse = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.QueryResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.QueryResponse.prototype.clearGetGameResponse = function() {\n  this.setGetGameResponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.QueryResponse.prototype.hasGetGameResponse = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.JoinGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.JoinGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.JoinGameRequest.displayName = 'proto.pictophone.v0_1.JoinGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.JoinGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.JoinGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.JoinGameRequest;\n  return proto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.JoinGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.JoinGameRequest}\n */\nproto.pictophone.v0_1.JoinGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.JoinGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.JoinGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.JoinGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.JoinGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.JoinGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.JoinGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.JoinGameResponse.displayName = 'proto.pictophone.v0_1.JoinGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.JoinGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.JoinGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  GAME_ALREADY_STARTED_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.JoinGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.JoinGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.JoinGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    gameAlreadyStartedError: (f = msg.getGameAlreadyStartedError()) && proto.pictophone.v0_1.GameAlreadyStartedError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.JoinGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.JoinGameResponse;\n  return proto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.JoinGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.JoinGameResponse}\n */\nproto.pictophone.v0_1.JoinGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.GameAlreadyStartedError;\n      reader.readMessage(value,proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader);\n      msg.setGameAlreadyStartedError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.JoinGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.JoinGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGameAlreadyStartedError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.JoinGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.JoinGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional GameAlreadyStartedError game_already_started_error = 2;\n * @return {?proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.getGameAlreadyStartedError = function() {\n  return /** @type{?proto.pictophone.v0_1.GameAlreadyStartedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameAlreadyStartedError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GameAlreadyStartedError|undefined} value */\nproto.pictophone.v0_1.JoinGameResponse.prototype.setGameAlreadyStartedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.JoinGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.JoinGameResponse.prototype.clearGameAlreadyStartedError = function() {\n  this.setGameAlreadyStartedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.JoinGameResponse.prototype.hasGameAlreadyStartedError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.StartGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.StartGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.StartGameRequest.displayName = 'proto.pictophone.v0_1.StartGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.StartGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.StartGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    randomSeed: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.StartGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.StartGameRequest;\n  return proto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.StartGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.StartGameRequest}\n */\nproto.pictophone.v0_1.StartGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setRandomSeed(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.StartGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getRandomSeed();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint64 random_seed = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.StartGameRequest.prototype.getRandomSeed = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.StartGameRequest.prototype.setRandomSeed = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.StartGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.StartGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.StartGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.StartGameResponse.displayName = 'proto.pictophone.v0_1.StartGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.StartGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.StartGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  PLAYER_NOT_IN_GAME_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.StartGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.StartGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.StartGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.StartGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.StartGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.StartGameResponse;\n  return proto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.StartGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.StartGameResponse}\n */\nproto.pictophone.v0_1.StartGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.StartGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.StartGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.StartGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.StartGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 2;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.StartGameResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.StartGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.StartGameResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.StartGameResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MakeMoveRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.MakeMoveRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MakeMoveRequest.displayName = 'proto.pictophone.v0_1.MakeMoveRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MakeMoveRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    etag: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.MakeMoveRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MakeMoveRequest;\n  return proto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MakeMoveRequest}\n */\nproto.pictophone.v0_1.MakeMoveRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setEtag(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MakeMoveRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getEtag();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional uint64 etag = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.getEtag = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.MakeMoveRequest.prototype.setEtag = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MakeMoveResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.MakeMoveResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MakeMoveResponse.displayName = 'proto.pictophone.v0_1.MakeMoveResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.MakeMoveResponse.oneofGroups_ = [[1,2,3,4,5]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.MakeMoveResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  MOVE_ABORTED_ERROR: 2,\n  PLAYER_NOT_IN_GAME_ERROR: 3,\n  GAME_NOT_STARTED_ERROR: 4,\n  EMPTY_HAND_ERROR: 5\n};\n\n/**\n * @return {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.MakeMoveResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MakeMoveResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    moveAbortedError: (f = msg.getMoveAbortedError()) && proto.pictophone.v0_1.MoveAbortedError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),\n    gameNotStartedError: (f = msg.getGameNotStartedError()) && proto.pictophone.v0_1.GameNotStartedError.toObject(includeInstance, f),\n    emptyHandError: (f = msg.getEmptyHandError()) && proto.pictophone.v0_1.EmptyHandError.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.MakeMoveResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MakeMoveResponse;\n  return proto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MakeMoveResponse}\n */\nproto.pictophone.v0_1.MakeMoveResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.MoveAbortedError;\n      reader.readMessage(value,proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader);\n      msg.setMoveAbortedError(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    case 4:\n      var value = new proto.pictophone.v0_1.GameNotStartedError;\n      reader.readMessage(value,proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader);\n      msg.setGameNotStartedError(value);\n      break;\n    case 5:\n      var value = new proto.pictophone.v0_1.EmptyHandError;\n      reader.readMessage(value,proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader);\n      msg.setEmptyHandError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MakeMoveResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MakeMoveResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getMoveAbortedError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGameNotStartedError();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter\n    );\n  }\n  f = message.getEmptyHandError();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional MoveAbortedError move_aborted_error = 2;\n * @return {?proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getMoveAbortedError = function() {\n  return /** @type{?proto.pictophone.v0_1.MoveAbortedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.MoveAbortedError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.MoveAbortedError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setMoveAbortedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearMoveAbortedError = function() {\n  this.setMoveAbortedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasMoveAbortedError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 3;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional GameNotStartedError game_not_started_error = 4;\n * @return {?proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getGameNotStartedError = function() {\n  return /** @type{?proto.pictophone.v0_1.GameNotStartedError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.GameNotStartedError, 4));\n};\n\n\n/** @param {?proto.pictophone.v0_1.GameNotStartedError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setGameNotStartedError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 4, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearGameNotStartedError = function() {\n  this.setGameNotStartedError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasGameNotStartedError = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional EmptyHandError empty_hand_error = 5;\n * @return {?proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.getEmptyHandError = function() {\n  return /** @type{?proto.pictophone.v0_1.EmptyHandError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.EmptyHandError, 5));\n};\n\n\n/** @param {?proto.pictophone.v0_1.EmptyHandError|undefined} value */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.setEmptyHandError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 5, proto.pictophone.v0_1.MakeMoveResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.MakeMoveResponse.prototype.clearEmptyHandError = function() {\n  this.setEmptyHandError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.MakeMoveResponse.prototype.hasEmptyHandError = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GetGameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GetGameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GetGameRequest.displayName = 'proto.pictophone.v0_1.GetGameRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GetGameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GetGameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    gameId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    playerId: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.GetGameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GetGameRequest;\n  return proto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GetGameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GetGameRequest}\n */\nproto.pictophone.v0_1.GetGameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGameId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPlayerId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GetGameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getGameId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPlayerId();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string game_id = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.getGameId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.GetGameRequest.prototype.setGameId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string player_id = 2;\n * @return {string}\n */\nproto.pictophone.v0_1.GetGameRequest.prototype.getPlayerId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.GetGameRequest.prototype.setPlayerId = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GetGameResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pictophone.v0_1.GetGameResponse.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.GetGameResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GetGameResponse.displayName = 'proto.pictophone.v0_1.GetGameResponse';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.GetGameResponse.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.GetGameResponse.ErrorCase = {\n  ERROR_NOT_SET: 0,\n  UNKNOWN_ERROR: 1,\n  PLAYER_NOT_IN_GAME_ERROR: 2\n};\n\n/**\n * @return {proto.pictophone.v0_1.GetGameResponse.ErrorCase}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getErrorCase = function() {\n  return /** @type {proto.pictophone.v0_1.GetGameResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GetGameResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GetGameResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    unknownError: (f = msg.getUnknownError()) && proto.pictophone.v0_1.UnknownError.toObject(includeInstance, f),\n    playerNotInGameError: (f = msg.getPlayerNotInGameError()) && proto.pictophone.v0_1.PlayerNotInGameError.toObject(includeInstance, f),\n    game: (f = msg.getGame()) && proto.pictophone.v0_1.Game.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.GetGameResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GetGameResponse;\n  return proto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GetGameResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GetGameResponse}\n */\nproto.pictophone.v0_1.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.pictophone.v0_1.UnknownError;\n      reader.readMessage(value,proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader);\n      msg.setUnknownError(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.PlayerNotInGameError;\n      reader.readMessage(value,proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader);\n      msg.setPlayerNotInGameError(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.Game;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.deserializeBinaryFromReader);\n      msg.setGame(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GetGameResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GetGameResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getUnknownError();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter\n    );\n  }\n  f = message.getPlayerNotInGameError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter\n    );\n  }\n  f = message.getGame();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.Game.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional UnknownError unknown_error = 1;\n * @return {?proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getUnknownError = function() {\n  return /** @type{?proto.pictophone.v0_1.UnknownError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.UnknownError, 1));\n};\n\n\n/** @param {?proto.pictophone.v0_1.UnknownError|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setUnknownError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearUnknownError = function() {\n  this.setUnknownError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasUnknownError = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PlayerNotInGameError player_not_in_game_error = 2;\n * @return {?proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getPlayerNotInGameError = function() {\n  return /** @type{?proto.pictophone.v0_1.PlayerNotInGameError} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.PlayerNotInGameError, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.PlayerNotInGameError|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setPlayerNotInGameError = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.GetGameResponse.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearPlayerNotInGameError = function() {\n  this.setPlayerNotInGameError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasPlayerNotInGameError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Game game = 3;\n * @return {?proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.getGame = function() {\n  return /** @type{?proto.pictophone.v0_1.Game} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game|undefined} value */\nproto.pictophone.v0_1.GetGameResponse.prototype.setGame = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.pictophone.v0_1.GetGameResponse.prototype.clearGame = function() {\n  this.setGame(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.GetGameResponse.prototype.hasGame = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.repeatedFields_, proto.pictophone.v0_1.Game.oneofGroups_);\n};\ngoog.inherits(proto.pictophone.v0_1.Game, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.displayName = 'proto.pictophone.v0_1.Game';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pictophone.v0_1.Game.repeatedFields_ = [1];\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.pictophone.v0_1.Game.oneofGroups_ = [[2,3]];\n\n/**\n * @enum {number}\n */\nproto.pictophone.v0_1.Game.StateCase = {\n  STATE_NOT_SET: 0,\n  UNSTARTED: 2,\n  STARTED: 3\n};\n\n/**\n * @return {proto.pictophone.v0_1.Game.StateCase}\n */\nproto.pictophone.v0_1.Game.prototype.getStateCase = function() {\n  return /** @type {proto.pictophone.v0_1.Game.StateCase} */(jspb.Message.computeOneofCase(this, proto.pictophone.v0_1.Game.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    playerIdsList: jspb.Message.getRepeatedField(msg, 1),\n    unstarted: (f = msg.getUnstarted()) && proto.pictophone.v0_1.Game.Unstarted.toObject(includeInstance, f),\n    started: (f = msg.getStarted()) && proto.pictophone.v0_1.Game.Started.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.Game.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game;\n  return proto.pictophone.v0_1.Game.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game}\n */\nproto.pictophone.v0_1.Game.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addPlayerIds(value);\n      break;\n    case 2:\n      var value = new proto.pictophone.v0_1.Game.Unstarted;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader);\n      msg.setUnstarted(value);\n      break;\n    case 3:\n      var value = new proto.pictophone.v0_1.Game.Started;\n      reader.readMessage(value,proto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader);\n      msg.setStarted(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPlayerIdsList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n  f = message.getUnstarted();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter\n    );\n  }\n  f = message.getStarted();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.pictophone.v0_1.Game.Started.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game.Unstarted = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.Game.Unstarted, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.Unstarted.displayName = 'proto.pictophone.v0_1.Game.Unstarted';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.Unstarted.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.Unstarted.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Unstarted.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.Unstarted.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game.Unstarted;\n  return proto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game.Unstarted} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.Unstarted.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.Unstarted.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game.Unstarted} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Unstarted.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.Game.Started = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pictophone.v0_1.Game.Started.repeatedFields_, null);\n};\ngoog.inherits(proto.pictophone.v0_1.Game.Started, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.Game.Started.displayName = 'proto.pictophone.v0_1.Game.Started';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.pictophone.v0_1.Game.Started.repeatedFields_ = [4,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.Game.Started.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.Game.Started.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.Game.Started} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Started.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    etag: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    numMistakes: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    roundNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    numbersPlayedList: jspb.Message.getRepeatedField(msg, 4),\n    handList: jspb.Message.getRepeatedField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.Started.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.Game.Started;\n  return proto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.Game.Started} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.Started.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setEtag(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumMistakes(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setRoundNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());\n      msg.setNumbersPlayedList(value);\n      break;\n    case 5:\n      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());\n      msg.setHandList(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.Game.Started.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.Game.Started.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.Game.Started} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.Game.Started.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEtag();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getNumMistakes();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getRoundNum();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getNumbersPlayedList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      4,\n      f\n    );\n  }\n  f = message.getHandList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 etag = 1;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getEtag = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setEtag = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 num_mistakes = 2;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getNumMistakes = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setNumMistakes = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 round_num = 3;\n * @return {number}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getRoundNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.pictophone.v0_1.Game.Started.prototype.setRoundNum = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * repeated uint32 numbers_played = 4;\n * @return {!Array<number>}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getNumbersPlayedList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/** @param {!Array<number>} value */\nproto.pictophone.v0_1.Game.Started.prototype.setNumbersPlayedList = function(value) {\n  jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.Started.prototype.addNumbersPlayed = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.Started.prototype.clearNumbersPlayedList = function() {\n  this.setNumbersPlayedList([]);\n};\n\n\n/**\n * repeated uint32 hand = 5;\n * @return {!Array<number>}\n */\nproto.pictophone.v0_1.Game.Started.prototype.getHandList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/** @param {!Array<number>} value */\nproto.pictophone.v0_1.Game.Started.prototype.setHandList = function(value) {\n  jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.Started.prototype.addHand = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.Started.prototype.clearHandList = function() {\n  this.setHandList([]);\n};\n\n\n/**\n * repeated string player_ids = 1;\n * @return {!Array<string>}\n */\nproto.pictophone.v0_1.Game.prototype.getPlayerIdsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {!Array<string>} value */\nproto.pictophone.v0_1.Game.prototype.setPlayerIdsList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\nproto.pictophone.v0_1.Game.prototype.addPlayerIds = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearPlayerIdsList = function() {\n  this.setPlayerIdsList([]);\n};\n\n\n/**\n * optional Unstarted unstarted = 2;\n * @return {?proto.pictophone.v0_1.Game.Unstarted}\n */\nproto.pictophone.v0_1.Game.prototype.getUnstarted = function() {\n  return /** @type{?proto.pictophone.v0_1.Game.Unstarted} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.Unstarted, 2));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game.Unstarted|undefined} value */\nproto.pictophone.v0_1.Game.prototype.setUnstarted = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.pictophone.v0_1.Game.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearUnstarted = function() {\n  this.setUnstarted(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.Game.prototype.hasUnstarted = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Started started = 3;\n * @return {?proto.pictophone.v0_1.Game.Started}\n */\nproto.pictophone.v0_1.Game.prototype.getStarted = function() {\n  return /** @type{?proto.pictophone.v0_1.Game.Started} */ (\n    jspb.Message.getWrapperField(this, proto.pictophone.v0_1.Game.Started, 3));\n};\n\n\n/** @param {?proto.pictophone.v0_1.Game.Started|undefined} value */\nproto.pictophone.v0_1.Game.prototype.setStarted = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.pictophone.v0_1.Game.oneofGroups_[0], value);\n};\n\n\nproto.pictophone.v0_1.Game.prototype.clearStarted = function() {\n  this.setStarted(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.pictophone.v0_1.Game.prototype.hasStarted = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.UnknownError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.UnknownError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.UnknownError.displayName = 'proto.pictophone.v0_1.UnknownError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.UnknownError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.UnknownError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.UnknownError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.UnknownError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    error: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.UnknownError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.UnknownError;\n  return proto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.UnknownError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.UnknownError}\n */\nproto.pictophone.v0_1.UnknownError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setError(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.UnknownError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.UnknownError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.UnknownError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.UnknownError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getError();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string error = 1;\n * @return {string}\n */\nproto.pictophone.v0_1.UnknownError.prototype.getError = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.pictophone.v0_1.UnknownError.prototype.setError = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GameAlreadyStartedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GameAlreadyStartedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GameAlreadyStartedError.displayName = 'proto.pictophone.v0_1.GameAlreadyStartedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GameAlreadyStartedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GameAlreadyStartedError;\n  return proto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GameAlreadyStartedError}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GameAlreadyStartedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameAlreadyStartedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.GameNotStartedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.GameNotStartedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.GameNotStartedError.displayName = 'proto.pictophone.v0_1.GameNotStartedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.GameNotStartedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.GameNotStartedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameNotStartedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.GameNotStartedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.GameNotStartedError;\n  return proto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.GameNotStartedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.GameNotStartedError}\n */\nproto.pictophone.v0_1.GameNotStartedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.GameNotStartedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.GameNotStartedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.GameNotStartedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.PlayerNotInGameError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.PlayerNotInGameError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.PlayerNotInGameError.displayName = 'proto.pictophone.v0_1.PlayerNotInGameError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.PlayerNotInGameError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.PlayerNotInGameError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.PlayerNotInGameError;\n  return proto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.PlayerNotInGameError}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.PlayerNotInGameError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.PlayerNotInGameError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.PlayerNotInGameError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.MoveAbortedError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.MoveAbortedError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.MoveAbortedError.displayName = 'proto.pictophone.v0_1.MoveAbortedError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.MoveAbortedError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.MoveAbortedError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MoveAbortedError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MoveAbortedError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.MoveAbortedError;\n  return proto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.MoveAbortedError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.MoveAbortedError}\n */\nproto.pictophone.v0_1.MoveAbortedError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.MoveAbortedError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.MoveAbortedError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.MoveAbortedError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.pictophone.v0_1.EmptyHandError = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.pictophone.v0_1.EmptyHandError, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.pictophone.v0_1.EmptyHandError.displayName = 'proto.pictophone.v0_1.EmptyHandError';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.pictophone.v0_1.EmptyHandError.prototype.toObject = function(opt_includeInstance) {\n  return proto.pictophone.v0_1.EmptyHandError.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.pictophone.v0_1.EmptyHandError} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.EmptyHandError.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.EmptyHandError.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pictophone.v0_1.EmptyHandError;\n  return proto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pictophone.v0_1.EmptyHandError} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pictophone.v0_1.EmptyHandError}\n */\nproto.pictophone.v0_1.EmptyHandError.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.pictophone.v0_1.EmptyHandError.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pictophone.v0_1.EmptyHandError} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.pictophone.v0_1.EmptyHandError.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.pictophone.v0_1);\n"],"sourceRoot":""}