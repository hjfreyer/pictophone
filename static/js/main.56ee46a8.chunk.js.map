{"version":3,"sources":["types.validator.ts","Drawing.tsx","Canvas.tsx","GameView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ajv","Ajv","addMetaSchema","require","addSchema","renderPath","p","points","length","x","y","res","slice","Drawing","drawing","width","height","svgRef","useRef","useEffect","e","current","style","ref","touchAction","paths","map","idx","key","d","stroke","fill","Canvas","draft","onChange","onTouchStart","preventDefault","console","log","produce","changedTouches","touch","item","inProgress","identifier","rect","target","getBoundingClientRect","pt","clientX","left","clientY","top","push","onTouchMove","Series","series","seriesIdx","entries","eIdx","entry","Entry","submission","kind","playerId","word","GameView","playerGame","startGame","submit","useState","textSub","setTextSub","draftDrawing","setDraftDrawing","playerList","playerIds","doTextSub","state","onClick","onSubmit","value","prompt","s","db","firebase","initializeApp","projectId","firestore","window","Home","id","setId","history","useHistory","type","PlayerPage","dispatch","useParams","Player","join","gameId","path","render","isLoading","data","r","to","JoinGame","gid","setGid","GamePage","pg","typeName","validator","getSchema","Error","errorsText","errors","filter","keyword","dataVar","validate","postit","body","a","fetch","method","JSON","stringify","mode","headers","App","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56ee46a8.chunk.js","sourcesContent":["/* tslint:disable */\n// generated by typescript-json-validator\nimport Ajv from 'ajv';\nimport {GameLog, GameLogEntry, Action, JoinGame, StartGame, MakeMove, Point, Path, Drawing, Submission, PlayerGame, SimpleGame, PromptGame, FinishedGame, Series, SeriesEntry} from './types';\nexport const ajv = new Ajv({\"allErrors\":true,\"coerceTypes\":false,\"format\":\"fast\",\"nullable\":true,\"unicode\":true,\"uniqueItems\":true,\"useDefaults\":true});\n\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n\nexport const Schema = {\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"definitions\": {\n    \"Action\": {\n      \"else\": {\n        \"else\": {\n          \"else\": {\n            \"properties\": {\n              \"kind\": {\n                \"enum\": [\n                  \"join_game\",\n                  \"start_game\",\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"kind\"\n            ]\n          },\n          \"if\": {\n            \"properties\": {\n              \"kind\": {\n                \"enum\": [\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"kind\"\n            ]\n          },\n          \"then\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"gameId\": {\n                \"type\": \"string\"\n              },\n              \"kind\": {\n                \"enum\": [\n                  \"make_move\"\n                ],\n                \"type\": \"string\"\n              },\n              \"playerId\": {\n                \"type\": \"string\"\n              },\n              \"submission\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"kind\": {\n                        \"enum\": [\n                          \"word\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"word\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"kind\",\n                      \"word\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"drawing\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"paths\": {\n                            \"items\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"points\": {\n                                  \"items\": {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                      \"x\": {\n                                        \"type\": \"number\"\n                                      },\n                                      \"y\": {\n                                        \"type\": \"number\"\n                                      }\n                                    },\n                                    \"required\": [\n                                      \"x\",\n                                      \"y\"\n                                    ],\n                                    \"type\": \"object\"\n                                  },\n                                  \"type\": \"array\"\n                                }\n                              },\n                              \"required\": [\n                                \"points\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"required\": [\n                          \"paths\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"drawing\"\n                        ],\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"drawing\",\n                      \"kind\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            },\n            \"required\": [\n              \"gameId\",\n              \"kind\",\n              \"playerId\",\n              \"submission\"\n            ],\n            \"type\": \"object\"\n          }\n        },\n        \"if\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"start_game\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"then\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"gameId\": {\n              \"type\": \"string\"\n            },\n            \"kind\": {\n              \"enum\": [\n                \"start_game\"\n              ],\n              \"type\": \"string\"\n            },\n            \"playerId\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"gameId\",\n            \"kind\",\n            \"playerId\"\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"if\": {\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"join_game\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\"\n        ]\n      },\n      \"then\": {\n        \"defaultProperties\": [\n        ],\n        \"properties\": {\n          \"gameId\": {\n            \"type\": \"string\"\n          },\n          \"kind\": {\n            \"enum\": [\n              \"join_game\"\n            ],\n            \"type\": \"string\"\n          },\n          \"playerId\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"gameId\",\n          \"kind\",\n          \"playerId\"\n        ],\n        \"type\": \"object\"\n      }\n    },\n    \"Drawing\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"paths\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"points\": {\n                \"items\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"x\": {\n                      \"type\": \"number\"\n                    },\n                    \"y\": {\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"required\": [\n                    \"x\",\n                    \"y\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"points\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"paths\"\n      ],\n      \"type\": \"object\"\n    },\n    \"FinishedGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"series\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"entries\": {\n                \"items\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"playerId\": {\n                      \"type\": \"string\"\n                    },\n                    \"submission\": {\n                      \"anyOf\": [\n                        {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"kind\": {\n                              \"enum\": [\n                                \"word\"\n                              ],\n                              \"type\": \"string\"\n                            },\n                            \"word\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"kind\",\n                            \"word\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"drawing\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"paths\": {\n                                  \"items\": {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                      \"points\": {\n                                        \"items\": {\n                                          \"defaultProperties\": [\n                                          ],\n                                          \"properties\": {\n                                            \"x\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"y\": {\n                                              \"type\": \"number\"\n                                            }\n                                          },\n                                          \"required\": [\n                                            \"x\",\n                                            \"y\"\n                                          ],\n                                          \"type\": \"object\"\n                                        },\n                                        \"type\": \"array\"\n                                      }\n                                    },\n                                    \"required\": [\n                                      \"points\"\n                                    ],\n                                    \"type\": \"object\"\n                                  },\n                                  \"type\": \"array\"\n                                }\n                              },\n                              \"required\": [\n                                \"paths\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"kind\": {\n                              \"enum\": [\n                                \"drawing\"\n                              ],\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"drawing\",\n                            \"kind\"\n                          ],\n                          \"type\": \"object\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"playerId\",\n                    \"submission\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"entries\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"GAME_OVER\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"series\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"GameLog\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"entries\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"action\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"join_game\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"start_game\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"gameId\": {\n                        \"type\": \"string\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"make_move\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"playerId\": {\n                        \"type\": \"string\"\n                      },\n                      \"submission\": {\n                        \"anyOf\": [\n                          {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"kind\": {\n                                \"enum\": [\n                                  \"word\"\n                                ],\n                                \"type\": \"string\"\n                              },\n                              \"word\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"kind\",\n                              \"word\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"drawing\": {\n                                \"defaultProperties\": [\n                                ],\n                                \"properties\": {\n                                  \"paths\": {\n                                    \"items\": {\n                                      \"defaultProperties\": [\n                                      ],\n                                      \"properties\": {\n                                        \"points\": {\n                                          \"items\": {\n                                            \"defaultProperties\": [\n                                            ],\n                                            \"properties\": {\n                                              \"x\": {\n                                                \"type\": \"number\"\n                                              },\n                                              \"y\": {\n                                                \"type\": \"number\"\n                                              }\n                                            },\n                                            \"required\": [\n                                              \"x\",\n                                              \"y\"\n                                            ],\n                                            \"type\": \"object\"\n                                          },\n                                          \"type\": \"array\"\n                                        }\n                                      },\n                                      \"required\": [\n                                        \"points\"\n                                      ],\n                                      \"type\": \"object\"\n                                    },\n                                    \"type\": \"array\"\n                                  }\n                                },\n                                \"required\": [\n                                  \"paths\"\n                                ],\n                                \"type\": \"object\"\n                              },\n                              \"kind\": {\n                                \"enum\": [\n                                  \"drawing\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"drawing\",\n                              \"kind\"\n                            ],\n                            \"type\": \"object\"\n                          }\n                        ]\n                      }\n                    },\n                    \"required\": [\n                      \"gameId\",\n                      \"kind\",\n                      \"playerId\",\n                      \"submission\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              },\n              \"timestamp\": {\n              }\n            },\n            \"required\": [\n              \"action\",\n              \"timestamp\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        \"lastTimestamp\": {\n        }\n      },\n      \"required\": [\n        \"entries\",\n        \"lastTimestamp\"\n      ],\n      \"type\": \"object\"\n    },\n    \"GameLogEntry\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"action\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"join_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"start_game\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"gameId\": {\n                  \"type\": \"string\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"make_move\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"playerId\": {\n                  \"type\": \"string\"\n                },\n                \"submission\": {\n                  \"anyOf\": [\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"kind\": {\n                          \"enum\": [\n                            \"word\"\n                          ],\n                          \"type\": \"string\"\n                        },\n                        \"word\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"kind\",\n                        \"word\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"drawing\": {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"paths\": {\n                              \"items\": {\n                                \"defaultProperties\": [\n                                ],\n                                \"properties\": {\n                                  \"points\": {\n                                    \"items\": {\n                                      \"defaultProperties\": [\n                                      ],\n                                      \"properties\": {\n                                        \"x\": {\n                                          \"type\": \"number\"\n                                        },\n                                        \"y\": {\n                                          \"type\": \"number\"\n                                        }\n                                      },\n                                      \"required\": [\n                                        \"x\",\n                                        \"y\"\n                                      ],\n                                      \"type\": \"object\"\n                                    },\n                                    \"type\": \"array\"\n                                  }\n                                },\n                                \"required\": [\n                                  \"points\"\n                                ],\n                                \"type\": \"object\"\n                              },\n                              \"type\": \"array\"\n                            }\n                          },\n                          \"required\": [\n                            \"paths\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        \"kind\": {\n                          \"enum\": [\n                            \"drawing\"\n                          ],\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"drawing\",\n                        \"kind\"\n                      ],\n                      \"type\": \"object\"\n                    }\n                  ]\n                }\n              },\n              \"required\": [\n                \"gameId\",\n                \"kind\",\n                \"playerId\",\n                \"submission\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        },\n        \"timestamp\": {\n        }\n      },\n      \"required\": [\n        \"action\",\n        \"timestamp\"\n      ],\n      \"type\": \"object\"\n    },\n    \"JoinGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"join_game\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\"\n      ],\n      \"type\": \"object\"\n    },\n    \"MakeMove\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"make_move\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        },\n        \"submission\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"paths\": {\n                      \"items\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"points\": {\n                            \"items\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"x\": {\n                                  \"type\": \"number\"\n                                },\n                                \"y\": {\n                                  \"type\": \"number\"\n                                }\n                              },\n                              \"required\": [\n                                \"x\",\n                                \"y\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"required\": [\n                          \"points\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"required\": [\n                    \"paths\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\",\n        \"submission\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Path\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"points\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"x\": {\n                \"type\": \"number\"\n              },\n              \"y\": {\n                \"type\": \"number\"\n              }\n            },\n            \"required\": [\n              \"x\",\n              \"y\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"points\"\n      ],\n      \"type\": \"object\"\n    },\n    \"PlayerGame\": {\n      \"anyOf\": [\n        {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"playerIds\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"state\": {\n              \"enum\": [\n                \"FIRST_PROMPT\",\n                \"UNSTARTED\",\n                \"WAITING_FOR_PROMPT\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"playerIds\",\n            \"state\"\n          ],\n          \"type\": \"object\"\n        },\n        {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"playerIds\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"prompt\": {\n              \"anyOf\": [\n                {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"kind\": {\n                      \"enum\": [\n                        \"word\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"word\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"kind\",\n                    \"word\"\n                  ],\n                  \"type\": \"object\"\n                },\n                {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"drawing\": {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"paths\": {\n                          \"items\": {\n                            \"defaultProperties\": [\n                            ],\n                            \"properties\": {\n                              \"points\": {\n                                \"items\": {\n                                  \"defaultProperties\": [\n                                  ],\n                                  \"properties\": {\n                                    \"x\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"y\": {\n                                      \"type\": \"number\"\n                                    }\n                                  },\n                                  \"required\": [\n                                    \"x\",\n                                    \"y\"\n                                  ],\n                                  \"type\": \"object\"\n                                },\n                                \"type\": \"array\"\n                              }\n                            },\n                            \"required\": [\n                              \"points\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        }\n                      },\n                      \"required\": [\n                        \"paths\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"kind\": {\n                      \"enum\": [\n                        \"drawing\"\n                      ],\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"drawing\",\n                    \"kind\"\n                  ],\n                  \"type\": \"object\"\n                }\n              ]\n            },\n            \"state\": {\n              \"enum\": [\n                \"RESPOND_TO_PROMPT\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"playerIds\",\n            \"prompt\",\n            \"state\"\n          ],\n          \"type\": \"object\"\n        },\n        {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"playerIds\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"series\": {\n              \"items\": {\n                \"defaultProperties\": [\n                ],\n                \"properties\": {\n                  \"entries\": {\n                    \"items\": {\n                      \"defaultProperties\": [\n                      ],\n                      \"properties\": {\n                        \"playerId\": {\n                          \"type\": \"string\"\n                        },\n                        \"submission\": {\n                          \"anyOf\": [\n                            {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"kind\": {\n                                  \"enum\": [\n                                    \"word\"\n                                  ],\n                                  \"type\": \"string\"\n                                },\n                                \"word\": {\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"required\": [\n                                \"kind\",\n                                \"word\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"drawing\": {\n                                  \"defaultProperties\": [\n                                  ],\n                                  \"properties\": {\n                                    \"paths\": {\n                                      \"items\": {\n                                        \"defaultProperties\": [\n                                        ],\n                                        \"properties\": {\n                                          \"points\": {\n                                            \"items\": {\n                                              \"defaultProperties\": [\n                                              ],\n                                              \"properties\": {\n                                                \"x\": {\n                                                  \"type\": \"number\"\n                                                },\n                                                \"y\": {\n                                                  \"type\": \"number\"\n                                                }\n                                              },\n                                              \"required\": [\n                                                \"x\",\n                                                \"y\"\n                                              ],\n                                              \"type\": \"object\"\n                                            },\n                                            \"type\": \"array\"\n                                          }\n                                        },\n                                        \"required\": [\n                                          \"points\"\n                                        ],\n                                        \"type\": \"object\"\n                                      },\n                                      \"type\": \"array\"\n                                    }\n                                  },\n                                  \"required\": [\n                                    \"paths\"\n                                  ],\n                                  \"type\": \"object\"\n                                },\n                                \"kind\": {\n                                  \"enum\": [\n                                    \"drawing\"\n                                  ],\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"required\": [\n                                \"drawing\",\n                                \"kind\"\n                              ],\n                              \"type\": \"object\"\n                            }\n                          ]\n                        }\n                      },\n                      \"required\": [\n                        \"playerId\",\n                        \"submission\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"entries\"\n                ],\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            \"state\": {\n              \"enum\": [\n                \"GAME_OVER\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"playerIds\",\n            \"series\",\n            \"state\"\n          ],\n          \"type\": \"object\"\n        }\n      ]\n    },\n    \"Point\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"x\": {\n          \"type\": \"number\"\n        },\n        \"y\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"x\",\n        \"y\"\n      ],\n      \"type\": \"object\"\n    },\n    \"PromptGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"prompt\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"paths\": {\n                      \"items\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"points\": {\n                            \"items\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"x\": {\n                                  \"type\": \"number\"\n                                },\n                                \"y\": {\n                                  \"type\": \"number\"\n                                }\n                              },\n                              \"required\": [\n                                \"x\",\n                                \"y\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"required\": [\n                          \"points\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"required\": [\n                    \"paths\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        },\n        \"state\": {\n          \"enum\": [\n            \"RESPOND_TO_PROMPT\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"prompt\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"entries\": {\n          \"items\": {\n            \"defaultProperties\": [\n            ],\n            \"properties\": {\n              \"playerId\": {\n                \"type\": \"string\"\n              },\n              \"submission\": {\n                \"anyOf\": [\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"kind\": {\n                        \"enum\": [\n                          \"word\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"word\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"kind\",\n                      \"word\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"drawing\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"paths\": {\n                            \"items\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"points\": {\n                                  \"items\": {\n                                    \"defaultProperties\": [\n                                    ],\n                                    \"properties\": {\n                                      \"x\": {\n                                        \"type\": \"number\"\n                                      },\n                                      \"y\": {\n                                        \"type\": \"number\"\n                                      }\n                                    },\n                                    \"required\": [\n                                      \"x\",\n                                      \"y\"\n                                    ],\n                                    \"type\": \"object\"\n                                  },\n                                  \"type\": \"array\"\n                                }\n                              },\n                              \"required\": [\n                                \"points\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"required\": [\n                          \"paths\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"kind\": {\n                        \"enum\": [\n                          \"drawing\"\n                        ],\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"drawing\",\n                      \"kind\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            },\n            \"required\": [\n              \"playerId\",\n              \"submission\"\n            ],\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"entries\"\n      ],\n      \"type\": \"object\"\n    },\n    \"SeriesEntry\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerId\": {\n          \"type\": \"string\"\n        },\n        \"submission\": {\n          \"anyOf\": [\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"kind\": {\n                  \"enum\": [\n                    \"word\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"word\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"kind\",\n                \"word\"\n              ],\n              \"type\": \"object\"\n            },\n            {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"drawing\": {\n                  \"defaultProperties\": [\n                  ],\n                  \"properties\": {\n                    \"paths\": {\n                      \"items\": {\n                        \"defaultProperties\": [\n                        ],\n                        \"properties\": {\n                          \"points\": {\n                            \"items\": {\n                              \"defaultProperties\": [\n                              ],\n                              \"properties\": {\n                                \"x\": {\n                                  \"type\": \"number\"\n                                },\n                                \"y\": {\n                                  \"type\": \"number\"\n                                }\n                              },\n                              \"required\": [\n                                \"x\",\n                                \"y\"\n                              ],\n                              \"type\": \"object\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"required\": [\n                          \"points\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"required\": [\n                    \"paths\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"kind\": {\n                  \"enum\": [\n                    \"drawing\"\n                  ],\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"drawing\",\n                \"kind\"\n              ],\n              \"type\": \"object\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"playerId\",\n        \"submission\"\n      ],\n      \"type\": \"object\"\n    },\n    \"SimpleGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"playerIds\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"state\": {\n          \"enum\": [\n            \"FIRST_PROMPT\",\n            \"UNSTARTED\",\n            \"WAITING_FOR_PROMPT\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"playerIds\",\n        \"state\"\n      ],\n      \"type\": \"object\"\n    },\n    \"StartGame\": {\n      \"defaultProperties\": [\n      ],\n      \"properties\": {\n        \"gameId\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"enum\": [\n            \"start_game\"\n          ],\n          \"type\": \"string\"\n        },\n        \"playerId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"gameId\",\n        \"kind\",\n        \"playerId\"\n      ],\n      \"type\": \"object\"\n    },\n    \"Submission\": {\n      \"else\": {\n        \"else\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"word\",\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"if\": {\n          \"properties\": {\n            \"kind\": {\n              \"enum\": [\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"kind\"\n          ]\n        },\n        \"then\": {\n          \"defaultProperties\": [\n          ],\n          \"properties\": {\n            \"drawing\": {\n              \"defaultProperties\": [\n              ],\n              \"properties\": {\n                \"paths\": {\n                  \"items\": {\n                    \"defaultProperties\": [\n                    ],\n                    \"properties\": {\n                      \"points\": {\n                        \"items\": {\n                          \"defaultProperties\": [\n                          ],\n                          \"properties\": {\n                            \"x\": {\n                              \"type\": \"number\"\n                            },\n                            \"y\": {\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"required\": [\n                            \"x\",\n                            \"y\"\n                          ],\n                          \"type\": \"object\"\n                        },\n                        \"type\": \"array\"\n                      }\n                    },\n                    \"required\": [\n                      \"points\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                }\n              },\n              \"required\": [\n                \"paths\"\n              ],\n              \"type\": \"object\"\n            },\n            \"kind\": {\n              \"enum\": [\n                \"drawing\"\n              ],\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"drawing\",\n            \"kind\"\n          ],\n          \"type\": \"object\"\n        }\n      },\n      \"if\": {\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"word\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\"\n        ]\n      },\n      \"then\": {\n        \"defaultProperties\": [\n        ],\n        \"properties\": {\n          \"kind\": {\n            \"enum\": [\n              \"word\"\n            ],\n            \"type\": \"string\"\n          },\n          \"word\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"kind\",\n          \"word\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  }\n};\najv.addSchema(Schema, 'Schema')\nexport function validate(typeName: 'GameLog'): (value: unknown) => GameLog;\nexport function validate(typeName: 'GameLogEntry'): (value: unknown) => GameLogEntry;\nexport function validate(typeName: 'Action'): (value: unknown) => Action;\nexport function validate(typeName: 'JoinGame'): (value: unknown) => JoinGame;\nexport function validate(typeName: 'StartGame'): (value: unknown) => StartGame;\nexport function validate(typeName: 'MakeMove'): (value: unknown) => MakeMove;\nexport function validate(typeName: 'Point'): (value: unknown) => Point;\nexport function validate(typeName: 'Path'): (value: unknown) => Path;\nexport function validate(typeName: 'Drawing'): (value: unknown) => Drawing;\nexport function validate(typeName: 'Submission'): (value: unknown) => Submission;\nexport function validate(typeName: 'PlayerGame'): (value: unknown) => PlayerGame;\nexport function validate(typeName: 'SimpleGame'): (value: unknown) => SimpleGame;\nexport function validate(typeName: 'PromptGame'): (value: unknown) => PromptGame;\nexport function validate(typeName: 'FinishedGame'): (value: unknown) => FinishedGame;\nexport function validate(typeName: 'Series'): (value: unknown) => Series;\nexport function validate(typeName: 'SeriesEntry'): (value: unknown) => SeriesEntry;\nexport function validate(typeName: string): (value: unknown) => any {\n  const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);\n  return (value: unknown): any => {\n    if (!validator) {\n      throw new Error(`No validator defined for Schema#/definitions/${typeName}`)\n    }\n  \n    const valid = validator(value);\n\n    if (!valid) {\n      throw new Error(\n        'Invalid ' + typeName + ': ' + ajv.errorsText(validator.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: typeName}),\n      );\n    }\n\n    return value as any;\n  };\n}","import React, { useRef, useEffect } from 'react'\nimport * as types from './types'\n\ntype DrawingProps = {\n    drawing: types.Drawing\n    width: number\n    height: number\n}\n\nexport const Drawing: React.FC<DrawingProps> = ({ drawing, width, height }) => {\n    const svgRef = useRef<SVGSVGElement>(null)\n\n    useEffect(() => {\n        const e: SVGSVGElement = svgRef.current!\n\n        e.style.width = width + 'px'\n        e.style.height = height + 'px'\n    })\n\n    return (\n        <svg\n            ref={svgRef}\n            style={{ touchAction: 'none' }}>\n            {\n                drawing.paths.map((p, idx) =>\n                    <path key={idx}\n                        d={renderPath(p)}\n                        stroke=\"black\"\n                        fill=\"transparent\" />\n                )\n            }\n        </svg>\n    )\n}\n\nfunction renderPath(p: types.Path): string {\n    if (p.points.length == 0) {\n        return \"\"\n    }\n    if (p.points.length == 1) {\n        const { x, y } = p.points[0]\n        return `M ${x} ${y} L ${x + 1} ${y}`\n    }\n    let res = `M ${p.points[0].x} ${p.points[0].y}`\n    for (const { x, y } of p.points.slice(1)) {\n        res += `L ${x} ${y}`\n    }\n    return res\n}\n\nexport default Drawing","import React, { useState, useRef, useEffect } from 'react'\nimport * as types from './types'\nimport produce from 'immer'\nimport Drawing from './Drawing'\n\nexport type DraftDrawing = {\n    drawing: types.Drawing\n    inProgress: { [touchId: string]: number }\n}\n\ntype CanvasProps = {\n    draft: DraftDrawing\n    onChange: (d: DraftDrawing) => void\n}\n\nexport const Canvas: React.FC<CanvasProps> = ({ draft, onChange }) => {\n    function touchStart(e: React.TouchEvent<HTMLDivElement>) {\n        e.preventDefault()\n        console.log('touchstart')\n        onChange(produce(draft, (draft) => {\n            for (let idx = 0; idx < e.changedTouches.length; idx++) {\n                const touch = e.changedTouches.item(idx)\n                draft.inProgress[touch.identifier] = draft.drawing.paths.length\n\n                const rect = (e.target as HTMLDivElement).getBoundingClientRect()\n                const pt = {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top,\n                }\n                draft.drawing.paths.push({ points: [pt] })\n            }\n        }))\n    }\n\n    function touchMove(e: React.TouchEvent<HTMLDivElement>) {\n        e.preventDefault()\n        console.log('touchmove')\n        onChange(produce(draft, (draft) => {\n            for (let idx = 0; idx < e.changedTouches.length; idx++) {\n                const touch = e.changedTouches.item(idx);\n                const rect = (e.target as SVGSVGElement).getBoundingClientRect()\n                const pt = {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top,\n                }\n                draft.drawing.paths[draft.inProgress[touch.identifier]]\n                    .points.push(pt)\n            }\n        }))\n    }\n\n    return (\n        <div\n            onTouchStart={touchStart}\n            onTouchMove={touchMove}\n            style={{ touchAction: 'none' }}>\n            <Drawing drawing={draft.drawing} width={500} height={500} />\n        </div>)\n}\n\n\nfunction resize(ref: React.RefObject<SVGSVGElement>) {\n    const c: SVGSVGElement = ref.current!\n\n    c.style.width = 500 + 'px'\n    c.style.height = 500 + 'px'\n    // c.style.width = window.innerWidth + \"px\";\n    // c.style.height = window.innerHeight + \"px\";\n}\n\nfunction renderPath(p: types.Path): string {\n    if (p.points.length == 0) {\n        return \"\"\n    }\n    if (p.points.length == 1) {\n        const { x, y } = p.points[0]\n        return `M ${x} ${y} L ${x + 1} ${y}`\n    }\n    let res = `M ${p.points[0].x} ${p.points[0].y}`\n    for (const { x, y } of p.points.slice(1)) {\n        res += `L ${x} ${y}`\n    }\n    return res\n}\n\nexport default Canvas","\nimport React, { useState } from 'react';\nimport * as types from './types'\nimport Canvas, { DraftDrawing } from './Canvas'\nimport Drawing from './Drawing'\n\ntype GameViewProps = {\n    playerGame: types.PlayerGame\n    startGame: () => void\n    submit: (s: types.Submission) => void\n}\n\nconst GameView: React.FC<GameViewProps> = ({ playerGame, startGame, submit }) => {\n    const [textSub, setTextSub] = useState(\"\")\n    const [draftDrawing, setDraftDrawing] = useState<DraftDrawing>({\n        drawing: {\n            paths: []\n        },\n        inProgress: {},\n    })\n\n    const playerList = <div>\n        Players: {playerGame.playerIds.map((p, idx) => <div key={idx}>{p}</div>)}\n    </div>\n\n    const doTextSub = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        submit({ kind: \"word\", word: textSub })\n        setTextSub(\"\")\n    }\n\n    const doDrawingSub = () => {\n        submit({ kind: \"drawing\", drawing: draftDrawing.drawing })\n    }\n\n    switch (playerGame.state) {\n        case \"UNSTARTED\":\n            return <div>\n                {playerList}\n                Waiting to start game.\n            <button onClick={startGame}>Start Game</button>\n            </div>\n        case \"FIRST_PROMPT\":\n            return <div>\n                {playerList}\n                <div>Come up with a thing!</div>\n                <form onSubmit={doTextSub}>\n                    <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n                    <button>Submit</button>\n                </form>\n            </div>\n        case \"WAITING_FOR_PROMPT\":\n            return <div>\n                {playerList}\n                Chill out for a sec while everyone else finishes.\n            </div>\n        case \"RESPOND_TO_PROMPT\":\n            if (playerGame.prompt.kind === 'word') {\n                return <div>\n                    {playerList}\n                    <div>Your prompt is: {playerGame.prompt.word}</div>\n                    <div>Drawz!</div>\n                    <Canvas draft={draftDrawing} onChange={setDraftDrawing} />\n                    <button onClick={doDrawingSub}>Submit</button>\n                </div>\n            } else {\n                return <div>\n                    {playerList}\n                    <div>Your prompt is:</div>\n                    <Drawing drawing={playerGame.prompt.drawing}\n                        width={500} height={500} />\n                    <div>Describe!</div>\n                    <form onSubmit={doTextSub}>\n                        <input value={textSub} onChange={e => setTextSub(e.target.value)} />\n                        <button>Submit</button>\n                    </form>\n                </div>\n            }\n        case \"GAME_OVER\":\n            return (\n                <div>\n                    {playerList}\n                    {playerGame.series.map((s, idx) =>\n                        <Series key={idx} series={s} seriesIdx={idx} />\n                    )}\n\n                </div>\n            )\n    }\n}\n\ntype SeriesProps = {\n    series: types.Series\n    seriesIdx: number\n}\n\nconst Series: React.FC<SeriesProps> = ({ series, seriesIdx }) => {\n    return <div>\n        <h2>Series {seriesIdx}</h2>\n        {\n            series.entries.map((e, eIdx) => <Entry key={eIdx} entry={e} />)\n        }\n    </div>\n}\n\nconst Entry: React.FC<{ entry: types.SeriesEntry }> = ({ entry }) => {\n    if (entry.submission.kind === 'word') {\n        return <div>\n            <h3>{entry.playerId} said</h3>\n            <div>{entry.submission.word}</div>\n        </div>\n    } else {\n        return <div>\n            <h3>{entry.playerId} drew</h3>\n            <Drawing drawing={entry.submission.drawing} \n                width={500} height={500}/>\n        </div>\n    }\n}\n\nexport default GameView","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport firebase from '@firebase/app';\nimport '@firebase/firestore';\nimport { FirestoreProvider, FirestoreCollection, FirestoreDocument } from 'react-firestore';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    useParams, useHistory,\n    Route, Link, match, RouteComponentProps\n} from \"react-router-dom\";\nimport * as types from './types';\nimport { validate } from './types.validator'\n\nimport GameView from './GameView'\n\nconst config = {\n    projectId: 'pictophone-app',\n};\n\nconst app = firebase.initializeApp(config);\nconst db = app.firestore!();\n//db.settings({ host: \"50051-dot-3073974-dot-devshell.appspot.com\" });\n(window as any)['db'] = db;\n\n// const App: React.FC = () => {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload OR NOT.\n//         </p>\n\n//   <FirestoreProvider firebase={firebase}>\n// <FirestoreDocument\n//   path=\"projections/v0/players/ehopper/games/1\"\n//   render={({ isLoading, data }:{ isLoading:boolean, data:any }) => (\n//       <div>{JSON.stringify(data)}</div>\n//   )}/>\n// </FirestoreProvider>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\nconst Home: React.FC = () => {\n    const [id, setId] = useState<string>(\"\")\n    const history = useHistory();\n\n    return <div>\n        <h1>Home</h1>\n        Username\n        <form onSubmit={() => history.push('/p/' + id)}>\n            <input\n                type=\"text\" value={id} onChange={e => setId(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </div>\n}\n\ntype PlayerPageParams = {\n    playerId: string\n}\n\ntype PlayerPageProps = {\n    dispatch: (a: types.Action) => void\n}\n\nconst PlayerPage: React.FC<PlayerPageProps> = ({ dispatch }) => {\n    const { playerId } = useParams()\n\n    return <Player playerId={playerId!} dispatch={dispatch} />\n}\n\ntype PlayerProps = {\n    playerId: string\n    dispatch: (a: types.Action) => void\n}\n\nconst Player: React.FC<PlayerProps> = ({ playerId, dispatch }) => {\n    const joinGame = (gameId: string) => dispatch({\n        kind: \"join_game\",\n        playerId,\n        gameId,\n    })\n\n    return <div>\n        <h1>User page for {playerId}</h1>\n        <JoinGame join={joinGame} />\n        <h2>Existing Games</h2>\n        <FirestoreCollection\n            path={`versions/0/players/${playerId}/games`}\n            render={({ isLoading, data }: { isLoading: boolean, data: any[] }) => (\n                <div>\n                    {\n                        isLoading\n                            ? <span>Loading...</span>\n                            : <div>\n                                {data.map((r) => (\n                                    <div key={r.id}>\n                                        <Link to={`/p/${playerId}/g/${r.id}`}>{r.id}</Link></div>))}\n                            </div>\n                    }\n                </div>\n            )} />\n    </div>\n}\n\nconst JoinGame = ({ join }: {\n    join: (gid: string) => void\n}) => {\n    const [gid, setGid] = useState(\"\")\n    return <div>\n        <h2>Join A Game</h2>\n        <form onSubmit={(e) => { e.preventDefault(); join(gid) }}>\n            <input\n                type=\"text\"\n                value={gid} onChange={e => setGid(e.target.value)} />\n            <button>Submit</button>\n        </form>\n    </div>\n}\n\ntype GamePageParams = {\n    dispatch: (a:types.Action) => void\n}\n\nconst GamePage : React.FC<GamePageParams> = ({dispatch}) =>{\n    const {playerId, gameId} = useParams()\n\n    const startGame = () => dispatch({\n        kind: \"start_game\",\n        playerId: playerId!,\n        gameId: gameId!\n    })\n\n    const submit = (submission: types.Submission) => dispatch({\n        kind: \"make_move\",\n        playerId: playerId!,\n        gameId: gameId!,\n        submission,\n    })\n\n    return (\n        <div>\n            <h1>Game {gameId}</h1>\n            <FirestoreDocument\n                path={`versions/0/players/${playerId}/games/${gameId}`}\n                render={({ isLoading, data }: { isLoading: boolean, data: any }) => {\n                    if (isLoading) {\n                        return <span>Loading...</span>;\n                    }\n                    const pg: types.PlayerGame = validate('PlayerGame')(data);\n                    return <GameView \n                        playerGame={pg}\n                        startGame={startGame}\n                        submit={submit}\n                     />\n                }}\n            />\n        </div>\n    )\n}\n\n\n\n\nasync function postit(body: types.Action): Promise<void> {\n    const res = await fetch('http://localhost:3000/action', {\n        method: 'post',\n        body: JSON.stringify(body),\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',       // receive json\n        },\n    });\n}\n\nfunction App() {\n    const dispatch = async (a: types.Action): Promise<void> => {\n        await postit(a)\n    }\n\n    return (\n        <FirestoreProvider firebase={firebase}>\n            <Router>\n                <div>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/\">Home</Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <Home />\n                        </Route>\n\n                        <Route path=\"/p/:playerId\" exact>\n                            <PlayerPage dispatch={dispatch} />\n                        </Route>\n\n        <Route path=\"/p/:playerId/g/:gameId\" exact>\n\n            <GamePage dispatch={dispatch}/>\n        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </FirestoreProvider>\n        // <Route path=\"/p/:playerId/g/:gameId\" />\n        //     <Game/>\n        // </Route>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}